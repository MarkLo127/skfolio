
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/1_mean_risk/plot_5_weight_constraints.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_1_mean_risk_plot_5_weight_constraints.py>`
        to download the full example code or to run this example in your browser via JupyterLite

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_1_mean_risk_plot_5_weight_constraints.py:


==================
Weight Constraints
==================

This tutorial shows how to incorporate weight constraints into the
:class:`~skfolio.optimization.MeanRisk` optimization.

We will show how to use the below parameters:
    * min_weights
    * max_weights
    * budget
    * min_budget
    * max_budget
    * max_short
    * max_long
    * linear_constraints
    * groups
    * left_inequality
    * right_inequality

.. GENERATED FROM PYTHON SOURCE LINES 24-30

Data
====
We load the S&P 500 :ref:`dataset <datasets>` composed of the daily prices of 20
assets from the S&P 500 Index composition starting from 1990-01-02 up to 2022-12-28.
We select only 3 assets to make the example more readable which are Apple (AAPL),
General Electric (GE) and JPMorgan (JPM):

.. GENERATED FROM PYTHON SOURCE LINES 30-43

.. code-block:: Python


    import numpy as np
    from plotly.io import show

    from skfolio.datasets import load_sp500_dataset
    from skfolio.optimization import MeanRisk
    from skfolio.preprocessing import prices_to_returns

    prices = load_sp500_dataset()
    prices = prices[["AAPL", "GE", "JPM"]]

    X = prices_to_returns(prices)








.. GENERATED FROM PYTHON SOURCE LINES 44-50

Model
=====
In this tutorial, we will use a Minimum Variance model.
By default,  :class:`~skfolio.optimization.MeanRisk` is long only (`min_weights=0`)
and fully invested (`budget=1`). In other terms, all weights are positive and sum to
one.

.. GENERATED FROM PYTHON SOURCE LINES 50-55

.. code-block:: Python

    model = MeanRisk()
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.0

    array([0.22768876, 0.56566507, 0.20664617])



.. GENERATED FROM PYTHON SOURCE LINES 56-67

Budget
======
The budget is the sum of long positions and short positions (sum of all weights).
It can be `None` or a float. `None` means that there is no budget constraints.
The default is 1.0 (fully invested).

Examples:

  * budget = 1    –> fully invested portfolio.
  * budget = 0    –> market neutral portfolio.
  * budget = None –> no constraints on the sum of weights.

.. GENERATED FROM PYTHON SOURCE LINES 67-73

.. code-block:: Python


    model = MeanRisk(budget=0.5)
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.5

    array([0.11391513, 0.28246101, 0.10362386])



.. GENERATED FROM PYTHON SOURCE LINES 74-78

You can also put a constraint on the minimum and maximum budget using `min_budget`
and `max_budget` which are the lower and upper bounds of the sum of long and short
positions (sum of all weights). The default is `None`. If provided, you must set
`budget=None`.

.. GENERATED FROM PYTHON SOURCE LINES 78-83

.. code-block:: Python

    model = MeanRisk(budget=None, min_budget=0.3, max_budget=0.5)
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    0.30000034617916516

    array([0.06832987, 0.16956647, 0.06210401])



.. GENERATED FROM PYTHON SOURCE LINES 84-117

Lower and upper bounds on weights
=================================
The weights lower and upper bounds are controlled by the parameters `min_weights` and
`max_weights` respectively.
You can provide `None`, a float, an array-like or a dictionary.
`None` is equivalent to `-np.Inf` (no lower bounds).
If a float is provided, it is applied to each asset.
If a dictionary is provided, its (key/value) pair must be the (asset name/asset
weight bound) and the input `X` of the `fit` methods must be a DataFrame with the
assets names in columns.
The default is `min_weights=0.0` (no short selling) and `max_weights=1.0` (each asset
is below 100%). When using a dictionary, you don't have to provide constraints for
all assets. The ones not provided will be assigned the default value (0.0 and 1.0
respectively).

.. note ::

  When adding a :ref:`pre-selection transformer <pre_selection>` into a `Pipeline`,
  you cannot use a **list** for the weight constraints because we don't know which
  assets will be selected by the pre-selection process. This is where the
  **dictionary** becomes useful.

Example:
  * min_weights = 0                     –> long only portfolio (no short selling).
  * min_weights = None                  –> no lower bound (same as -np.Inf).
  * min_weights = -2                    –> each weight must be above -200%.
  * min_weights = [0, -2, 0.5]          –> "AAPL", "GE" and "JPM" must be above 0%, -200% and 50% respectively.
  * min_weights = {"AAPL": 0, "GE": -2} -> "AAPL", "GE" and "JPM"  must be above 0%, -200% and 0% (default) respectively.
  * max_weights = 0                     –> no long position (short only portfolio).
  * max_weights = None                  –> no upper bound (same as +np.Inf).
  * max_weights = 2                     –> each weight must be below 200%.
  * max_weights = [1, 2, -0.5]          -> "AAPL", "GE" and "JPM"  must be below 100%, 200% and -50% respectively.
  * max_weights = {"AAPL": 1, "GE": 2}  -> "AAPL", "GE" and "JPM"  must be below 100%, 200% and 100% (default) respectively.

.. GENERATED FROM PYTHON SOURCE LINES 119-120

Allowing short positions with a budget of -100%:

.. GENERATED FROM PYTHON SOURCE LINES 120-125

.. code-block:: Python

    model = MeanRisk(budget=-1, min_weights=-1)
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    -1.0000000000000002

    array([-0.22770271, -0.56559255, -0.20670474])



.. GENERATED FROM PYTHON SOURCE LINES 126-127

"AAPL", "GE" and "JPM" above 0%, 50% and 10% respectively:

.. GENERATED FROM PYTHON SOURCE LINES 127-132

.. code-block:: Python

    model = MeanRisk(min_weights=[0, 0.5, 0.1])
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.0000000000000002

    array([0.22788246, 0.56548525, 0.20663228])



.. GENERATED FROM PYTHON SOURCE LINES 133-134

Let's plot the composition:

.. GENERATED FROM PYTHON SOURCE LINES 134-138

.. code-block:: Python

    portfolio = model.predict(X)
    fig = portfolio.plot_composition()
    show(fig)




.. raw:: html
    :file: images/sphx_glr_plot_5_weight_constraints_001.html





.. GENERATED FROM PYTHON SOURCE LINES 139-142

|

Same as above but using partial dictionary:

.. GENERATED FROM PYTHON SOURCE LINES 142-147

.. code-block:: Python

    model = MeanRisk(min_weights={"GE": 0.5, "JPM": 0.1})
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.0000000000000002

    array([0.22788246, 0.56548525, 0.20663228])



.. GENERATED FROM PYTHON SOURCE LINES 148-149

Leverage 3 with each weight below 150%:

.. GENERATED FROM PYTHON SOURCE LINES 149-154

.. code-block:: Python

    model = MeanRisk(budget=3, max_weights=1.5)
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    3.000000000000002

    array([0.74197781, 1.49999867, 0.75802352])



.. GENERATED FROM PYTHON SOURCE LINES 155-160

Short and long position constraints
===================================
Constraints on the upper bound for short and long positions can be set using
`max_short` and `max_long`. The short position is defined as the sum of negative
weights (in absolute term) and the long position as the sum of positive weights.

.. GENERATED FROM PYTHON SOURCE LINES 162-163

Fully invested long-short portfolio with a total short position less than 50%:

.. GENERATED FROM PYTHON SOURCE LINES 163-168

.. code-block:: Python

    model = MeanRisk(min_weights=-1, max_short=0.5)
    model.fit(X)
    print(sum(model.weights_))
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    1.0

    array([0.22770146, 0.56558315, 0.20671539])



.. GENERATED FROM PYTHON SOURCE LINES 169-185

Group and linear constraints
============================
We can assign groups to each asset using the `groups` parameter and set
constraints on these groups using the `linear_constraint` parameter.
The parameter `groups` can be a 2D array-like or a dictionary. If a dictionary is
provided, its (key/value)  pair must be the (asset name/asset groups).
You can reference these groups and/or the asset names in `linear_constraint` which
is a list if strings following the below patterns:

  * "2.5 * ref1 + 0.10 * ref2 + 0.0013 <= 2.5 * ref3"
  * "ref1 >= 2.9 * ref2"
  * "ref1 <= ref2"
  * "ref1 >= ref1"

Examples:
In this example we consider two groups: industry sector and capitalization.

.. GENERATED FROM PYTHON SOURCE LINES 185-204

.. code-block:: Python

    groups = {
        "AAPL": ["Technology", "Mega Cap"],
        "GE": ["Industrial", "Big Cap"],
        "JPM": ["Financial", "Big Cap"],
    }
    # You can also provide a 2D array-like:
    # groups = [["Technology", "Industrial", "Financial"], ["Mega Cap", "Big Cap", "Big Cap"]]
    linear_constraints = [
        "Technology + 1.5 * Industrial <= 2 * Financial",  # First group
        "Mega Cap >= 0.75 * Big Cap",  # Second group
        "Technology >= Big Cap",  # Mix of first and second groups
        "Mega Cap >= 2 * JPM",  # Mix of groups and assets
    ]
    # Note that only the first constraint would be sufficient in that case.

    model = MeanRisk(groups=groups, linear_constraints=linear_constraints)
    model.fit(X)
    model.weights_





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([6.66666667e-01, 1.17341817e-11, 3.33333333e-01])



.. GENERATED FROM PYTHON SOURCE LINES 205-209

Left and right inequalities
===========================
Finally, you can also provide the matrix :math:`A` and the vector :math:`b` of the
linear constraint :math:`A \cdot w \leq b`.

.. GENERATED FROM PYTHON SOURCE LINES 209-217

.. code-block:: Python

    left_inequality = np.array(
        [[1.0, 1.5, -2.0], [-1.0, 0.75, 0.75], [-1.0, 1.0, 1.0], [-1.0, -0.0, 2.0]]
    )
    right_inequality = np.array([0.0, 0.0, 0.0, 0.0])

    model = MeanRisk(left_inequality=left_inequality, right_inequality=right_inequality)
    model.fit(X)
    model.weights_




.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([6.66666667e-01, 1.17341817e-11, 3.33333333e-01])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.368 seconds)


.. _sphx_glr_download_auto_examples_1_mean_risk_plot_5_weight_constraints.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: lite-badge

      .. image:: images/jupyterlite_badge_logo.svg
        :target: ../../lite/lab/?path=auto_examples/1_mean_risk/plot_5_weight_constraints.ipynb
        :alt: Launch JupyterLite
        :width: 150 px

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_5_weight_constraints.ipynb <plot_5_weight_constraints.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_5_weight_constraints.py <plot_5_weight_constraints.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
