Search.setIndex({"docnames": ["api", "auto_examples/1_mean_risk/index", "auto_examples/1_mean_risk/plot_10_tracking_error", "auto_examples/1_mean_risk/plot_11_empirical_prior", "auto_examples/1_mean_risk/plot_12_black_and_litterman", "auto_examples/1_mean_risk/plot_13_factor_model", "auto_examples/1_mean_risk/plot_14_black_litterman_factor_model", "auto_examples/1_mean_risk/plot_1_maximum_sharpe_ratio", "auto_examples/1_mean_risk/plot_2_minimum_CVaR", "auto_examples/1_mean_risk/plot_3_efficient_frontier", "auto_examples/1_mean_risk/plot_4_mean_variance_cdar", "auto_examples/1_mean_risk/plot_5_weight_constraints", "auto_examples/1_mean_risk/plot_6_transaction_costs", "auto_examples/1_mean_risk/plot_7_management_fees", "auto_examples/1_mean_risk/plot_8_regularization", "auto_examples/1_mean_risk/plot_9_uncertainty_set", "auto_examples/1_mean_risk/sg_execution_times", "auto_examples/2_risk_budgeting/index", "auto_examples/2_risk_budgeting/plot_1_risk_parity_variance", "auto_examples/2_risk_budgeting/plot_2_risk_busgeting_CVaR", "auto_examples/2_risk_budgeting/plot_3_risk_parity_ledoit_wolf", "auto_examples/2_risk_budgeting/sg_execution_times", "auto_examples/3_maxiumum_diversification/index", "auto_examples/3_maxiumum_diversification/plot_1_maximum_divesification", "auto_examples/3_maxiumum_diversification/sg_execution_times", "auto_examples/4_distributionally_robust_cvar/index", "auto_examples/4_distributionally_robust_cvar/plot_1_distributionally_robust_cvar", "auto_examples/4_distributionally_robust_cvar/sg_execution_times", "auto_examples/5_clustering/index", "auto_examples/5_clustering/plot_1_hrp_cvar", "auto_examples/5_clustering/plot_2_herc_cdar", "auto_examples/5_clustering/plot_3_hrp_vs_herc", "auto_examples/5_clustering/plot_4_nco", "auto_examples/5_clustering/plot_5_nco_grid_search", "auto_examples/5_clustering/sg_execution_times", "auto_examples/6_ensemble/index", "auto_examples/6_ensemble/plot_1_stacking", "auto_examples/6_ensemble/sg_execution_times", "auto_examples/7_pre_selection/index", "auto_examples/7_pre_selection/plot_1_drop_correlated", "auto_examples/7_pre_selection/plot_2_select_best_performers", "auto_examples/7_pre_selection/sg_execution_times", "auto_examples/8_data_preparation/index", "auto_examples/8_data_preparation/plot_1_investment_horizon", "auto_examples/8_data_preparation/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "generated/skfolio.cluster.HierarchicalClustering", "generated/skfolio.cluster.LinkageMethod", "generated/skfolio.datasets.load_factors_dataset", "generated/skfolio.datasets.load_ftse100_dataset", "generated/skfolio.datasets.load_nasdaq_dataset", "generated/skfolio.datasets.load_sp500_dataset", "generated/skfolio.datasets.load_sp500_index", "generated/skfolio.distance.BaseDistance", "generated/skfolio.distance.CovarianceDistance", "generated/skfolio.distance.DistanceCorrelation", "generated/skfolio.distance.KendallDistance", "generated/skfolio.distance.MutualInformation", "generated/skfolio.distance.PearsonDistance", "generated/skfolio.distance.SpearmanDistance", "generated/skfolio.measures.BaseMeasure", "generated/skfolio.measures.ExtraRiskMeasure", "generated/skfolio.measures.PerfMeasure", "generated/skfolio.measures.RatioMeasure", "generated/skfolio.measures.RiskMeasure", "generated/skfolio.measures.average_drawdown", "generated/skfolio.measures.cdar", "generated/skfolio.measures.cvar", "generated/skfolio.measures.drawdown_at_risk", "generated/skfolio.measures.edar", "generated/skfolio.measures.effective_number_assets", "generated/skfolio.measures.entropic_risk_measure", "generated/skfolio.measures.evar", "generated/skfolio.measures.first_lower_partial_moment", "generated/skfolio.measures.fourth_central_moment", "generated/skfolio.measures.fourth_lower_partial_moment", "generated/skfolio.measures.get_cumulative_returns", "generated/skfolio.measures.get_drawdowns", "generated/skfolio.measures.gini_mean_difference", "generated/skfolio.measures.max_drawdown", "generated/skfolio.measures.mean", "generated/skfolio.measures.mean_absolute_deviation", "generated/skfolio.measures.owa_gmd_weights", "generated/skfolio.measures.semi_deviation", "generated/skfolio.measures.semi_variance", "generated/skfolio.measures.standard_deviation", "generated/skfolio.measures.third_central_moment", "generated/skfolio.measures.ulcer_index", "generated/skfolio.measures.value_at_risk", "generated/skfolio.measures.variance", "generated/skfolio.measures.worst_realization", "generated/skfolio.metrics.make_scorer", "generated/skfolio.model_selection.BaseCombinatorialCV", "generated/skfolio.model_selection.CombinatorialPurgedCV", "generated/skfolio.model_selection.WalkForward", "generated/skfolio.model_selection.cross_val_predict", "generated/skfolio.moments.BaseCovariance", "generated/skfolio.moments.BaseMu", "generated/skfolio.moments.DenoiseCovariance", "generated/skfolio.moments.DetoneCovariance", "generated/skfolio.moments.EWCovariance", "generated/skfolio.moments.EWMu", "generated/skfolio.moments.EmpiricalCovariance", "generated/skfolio.moments.EmpiricalMu", "generated/skfolio.moments.EquilibriumMu", "generated/skfolio.moments.GerberCovariance", "generated/skfolio.moments.GraphicalLassoCV", "generated/skfolio.moments.LedoitWolf", "generated/skfolio.moments.OAS", "generated/skfolio.moments.ShrunkCovariance", "generated/skfolio.moments.ShrunkMu", "generated/skfolio.moments.ShrunkMuMethods", "generated/skfolio.optimization.BaseComposition", "generated/skfolio.optimization.BaseHierarchicalOptimization", "generated/skfolio.optimization.ConvexOptimization", "generated/skfolio.optimization.DistributionallyRobustCVaR", "generated/skfolio.optimization.EqualWeighted", "generated/skfolio.optimization.HierarchicalEqualRiskContribution", "generated/skfolio.optimization.HierarchicalRiskParity", "generated/skfolio.optimization.InverseVolatility", "generated/skfolio.optimization.MaximumDiversification", "generated/skfolio.optimization.MeanRisk", "generated/skfolio.optimization.NestedClustersOptimization", "generated/skfolio.optimization.ObjectiveFunction", "generated/skfolio.optimization.Random", "generated/skfolio.optimization.RiskBudgeting", "generated/skfolio.optimization.StackingOptimization", "generated/skfolio.population.Population", "generated/skfolio.portfolio.BasePortfolio", "generated/skfolio.portfolio.MultiPeriodPortfolio", "generated/skfolio.portfolio.Portfolio", "generated/skfolio.pre_selection.DropCorrelated", "generated/skfolio.pre_selection.SelectKExtremes", "generated/skfolio.pre_selection.SelectNonDominated", "generated/skfolio.preprocessing.prices_to_returns", "generated/skfolio.prior.BaseLoadingMatrix", "generated/skfolio.prior.BasePrior", "generated/skfolio.prior.BlackLitterman", "generated/skfolio.prior.EmpiricalPrior", "generated/skfolio.prior.FactorModel", "generated/skfolio.prior.LoadingMatrixRegression", "generated/skfolio.prior.PriorModel", "generated/skfolio.uncertainty_set.BaseCovarianceUncertaintySet", "generated/skfolio.uncertainty_set.BaseMuUncertaintySet", "generated/skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet", "generated/skfolio.uncertainty_set.BootstrapMuUncertaintySet", "generated/skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet", "generated/skfolio.uncertainty_set.EmpiricalMuUncertaintySet", "generated/skfolio.uncertainty_set.UncertaintySet", "generated/skfolio.utils.stats.NBinsMethod", "generated/skfolio.utils.stats.assert_is_distance", "generated/skfolio.utils.stats.assert_is_square", "generated/skfolio.utils.stats.assert_is_symmetric", "generated/skfolio.utils.stats.commutation_matrix", "generated/skfolio.utils.stats.compute_optimal_n_clusters", "generated/skfolio.utils.stats.corr_to_cov", "generated/skfolio.utils.stats.cov_nearest", "generated/skfolio.utils.stats.cov_to_corr", "generated/skfolio.utils.stats.is_cholesky_dec", "generated/skfolio.utils.stats.n_bins_freedman", "generated/skfolio.utils.stats.n_bins_knuth", "generated/skfolio.utils.stats.rand_weights", "generated/skfolio.utils.stats.rand_weights_dirichlet", "index", "sg_execution_times", "user_guide/cluster", "user_guide/covariance", "user_guide/data_preparation", "user_guide/datasets", "user_guide/distance", "user_guide/expected_returns", "user_guide/hyper_parameters_tuning", "user_guide/index", "user_guide/install", "user_guide/model_selection", "user_guide/optimization", "user_guide/population", "user_guide/portfolio", "user_guide/pre_selection", "user_guide/prior", "user_guide/uncertainty_set"], "filenames": ["api.rst", "auto_examples/1_mean_risk/index.rst", "auto_examples/1_mean_risk/plot_10_tracking_error.rst", "auto_examples/1_mean_risk/plot_11_empirical_prior.rst", "auto_examples/1_mean_risk/plot_12_black_and_litterman.rst", "auto_examples/1_mean_risk/plot_13_factor_model.rst", "auto_examples/1_mean_risk/plot_14_black_litterman_factor_model.rst", "auto_examples/1_mean_risk/plot_1_maximum_sharpe_ratio.rst", "auto_examples/1_mean_risk/plot_2_minimum_CVaR.rst", "auto_examples/1_mean_risk/plot_3_efficient_frontier.rst", "auto_examples/1_mean_risk/plot_4_mean_variance_cdar.rst", "auto_examples/1_mean_risk/plot_5_weight_constraints.rst", "auto_examples/1_mean_risk/plot_6_transaction_costs.rst", "auto_examples/1_mean_risk/plot_7_management_fees.rst", "auto_examples/1_mean_risk/plot_8_regularization.rst", "auto_examples/1_mean_risk/plot_9_uncertainty_set.rst", "auto_examples/1_mean_risk/sg_execution_times.rst", "auto_examples/2_risk_budgeting/index.rst", "auto_examples/2_risk_budgeting/plot_1_risk_parity_variance.rst", "auto_examples/2_risk_budgeting/plot_2_risk_busgeting_CVaR.rst", "auto_examples/2_risk_budgeting/plot_3_risk_parity_ledoit_wolf.rst", "auto_examples/2_risk_budgeting/sg_execution_times.rst", "auto_examples/3_maxiumum_diversification/index.rst", "auto_examples/3_maxiumum_diversification/plot_1_maximum_divesification.rst", "auto_examples/3_maxiumum_diversification/sg_execution_times.rst", "auto_examples/4_distributionally_robust_cvar/index.rst", "auto_examples/4_distributionally_robust_cvar/plot_1_distributionally_robust_cvar.rst", "auto_examples/4_distributionally_robust_cvar/sg_execution_times.rst", "auto_examples/5_clustering/index.rst", "auto_examples/5_clustering/plot_1_hrp_cvar.rst", "auto_examples/5_clustering/plot_2_herc_cdar.rst", "auto_examples/5_clustering/plot_3_hrp_vs_herc.rst", "auto_examples/5_clustering/plot_4_nco.rst", "auto_examples/5_clustering/plot_5_nco_grid_search.rst", "auto_examples/5_clustering/sg_execution_times.rst", "auto_examples/6_ensemble/index.rst", "auto_examples/6_ensemble/plot_1_stacking.rst", "auto_examples/6_ensemble/sg_execution_times.rst", "auto_examples/7_pre_selection/index.rst", "auto_examples/7_pre_selection/plot_1_drop_correlated.rst", "auto_examples/7_pre_selection/plot_2_select_best_performers.rst", "auto_examples/7_pre_selection/sg_execution_times.rst", "auto_examples/8_data_preparation/index.rst", "auto_examples/8_data_preparation/plot_1_investment_horizon.rst", "auto_examples/8_data_preparation/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "generated/skfolio.cluster.HierarchicalClustering.rst", "generated/skfolio.cluster.LinkageMethod.rst", "generated/skfolio.datasets.load_factors_dataset.rst", "generated/skfolio.datasets.load_ftse100_dataset.rst", "generated/skfolio.datasets.load_nasdaq_dataset.rst", "generated/skfolio.datasets.load_sp500_dataset.rst", "generated/skfolio.datasets.load_sp500_index.rst", "generated/skfolio.distance.BaseDistance.rst", "generated/skfolio.distance.CovarianceDistance.rst", "generated/skfolio.distance.DistanceCorrelation.rst", "generated/skfolio.distance.KendallDistance.rst", "generated/skfolio.distance.MutualInformation.rst", "generated/skfolio.distance.PearsonDistance.rst", "generated/skfolio.distance.SpearmanDistance.rst", "generated/skfolio.measures.BaseMeasure.rst", "generated/skfolio.measures.ExtraRiskMeasure.rst", "generated/skfolio.measures.PerfMeasure.rst", "generated/skfolio.measures.RatioMeasure.rst", "generated/skfolio.measures.RiskMeasure.rst", "generated/skfolio.measures.average_drawdown.rst", "generated/skfolio.measures.cdar.rst", "generated/skfolio.measures.cvar.rst", "generated/skfolio.measures.drawdown_at_risk.rst", "generated/skfolio.measures.edar.rst", "generated/skfolio.measures.effective_number_assets.rst", "generated/skfolio.measures.entropic_risk_measure.rst", "generated/skfolio.measures.evar.rst", "generated/skfolio.measures.first_lower_partial_moment.rst", "generated/skfolio.measures.fourth_central_moment.rst", "generated/skfolio.measures.fourth_lower_partial_moment.rst", "generated/skfolio.measures.get_cumulative_returns.rst", "generated/skfolio.measures.get_drawdowns.rst", "generated/skfolio.measures.gini_mean_difference.rst", "generated/skfolio.measures.max_drawdown.rst", "generated/skfolio.measures.mean.rst", "generated/skfolio.measures.mean_absolute_deviation.rst", "generated/skfolio.measures.owa_gmd_weights.rst", "generated/skfolio.measures.semi_deviation.rst", "generated/skfolio.measures.semi_variance.rst", "generated/skfolio.measures.standard_deviation.rst", "generated/skfolio.measures.third_central_moment.rst", "generated/skfolio.measures.ulcer_index.rst", "generated/skfolio.measures.value_at_risk.rst", "generated/skfolio.measures.variance.rst", "generated/skfolio.measures.worst_realization.rst", "generated/skfolio.metrics.make_scorer.rst", "generated/skfolio.model_selection.BaseCombinatorialCV.rst", "generated/skfolio.model_selection.CombinatorialPurgedCV.rst", "generated/skfolio.model_selection.WalkForward.rst", "generated/skfolio.model_selection.cross_val_predict.rst", "generated/skfolio.moments.BaseCovariance.rst", "generated/skfolio.moments.BaseMu.rst", "generated/skfolio.moments.DenoiseCovariance.rst", "generated/skfolio.moments.DetoneCovariance.rst", "generated/skfolio.moments.EWCovariance.rst", "generated/skfolio.moments.EWMu.rst", "generated/skfolio.moments.EmpiricalCovariance.rst", "generated/skfolio.moments.EmpiricalMu.rst", "generated/skfolio.moments.EquilibriumMu.rst", "generated/skfolio.moments.GerberCovariance.rst", "generated/skfolio.moments.GraphicalLassoCV.rst", "generated/skfolio.moments.LedoitWolf.rst", "generated/skfolio.moments.OAS.rst", "generated/skfolio.moments.ShrunkCovariance.rst", "generated/skfolio.moments.ShrunkMu.rst", "generated/skfolio.moments.ShrunkMuMethods.rst", "generated/skfolio.optimization.BaseComposition.rst", "generated/skfolio.optimization.BaseHierarchicalOptimization.rst", "generated/skfolio.optimization.ConvexOptimization.rst", "generated/skfolio.optimization.DistributionallyRobustCVaR.rst", "generated/skfolio.optimization.EqualWeighted.rst", "generated/skfolio.optimization.HierarchicalEqualRiskContribution.rst", "generated/skfolio.optimization.HierarchicalRiskParity.rst", "generated/skfolio.optimization.InverseVolatility.rst", "generated/skfolio.optimization.MaximumDiversification.rst", "generated/skfolio.optimization.MeanRisk.rst", "generated/skfolio.optimization.NestedClustersOptimization.rst", "generated/skfolio.optimization.ObjectiveFunction.rst", "generated/skfolio.optimization.Random.rst", "generated/skfolio.optimization.RiskBudgeting.rst", "generated/skfolio.optimization.StackingOptimization.rst", "generated/skfolio.population.Population.rst", "generated/skfolio.portfolio.BasePortfolio.rst", "generated/skfolio.portfolio.MultiPeriodPortfolio.rst", "generated/skfolio.portfolio.Portfolio.rst", "generated/skfolio.pre_selection.DropCorrelated.rst", "generated/skfolio.pre_selection.SelectKExtremes.rst", "generated/skfolio.pre_selection.SelectNonDominated.rst", "generated/skfolio.preprocessing.prices_to_returns.rst", "generated/skfolio.prior.BaseLoadingMatrix.rst", "generated/skfolio.prior.BasePrior.rst", "generated/skfolio.prior.BlackLitterman.rst", "generated/skfolio.prior.EmpiricalPrior.rst", "generated/skfolio.prior.FactorModel.rst", "generated/skfolio.prior.LoadingMatrixRegression.rst", "generated/skfolio.prior.PriorModel.rst", "generated/skfolio.uncertainty_set.BaseCovarianceUncertaintySet.rst", "generated/skfolio.uncertainty_set.BaseMuUncertaintySet.rst", "generated/skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.rst", "generated/skfolio.uncertainty_set.BootstrapMuUncertaintySet.rst", "generated/skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.rst", "generated/skfolio.uncertainty_set.EmpiricalMuUncertaintySet.rst", "generated/skfolio.uncertainty_set.UncertaintySet.rst", "generated/skfolio.utils.stats.NBinsMethod.rst", "generated/skfolio.utils.stats.assert_is_distance.rst", "generated/skfolio.utils.stats.assert_is_square.rst", "generated/skfolio.utils.stats.assert_is_symmetric.rst", "generated/skfolio.utils.stats.commutation_matrix.rst", "generated/skfolio.utils.stats.compute_optimal_n_clusters.rst", "generated/skfolio.utils.stats.corr_to_cov.rst", "generated/skfolio.utils.stats.cov_nearest.rst", "generated/skfolio.utils.stats.cov_to_corr.rst", "generated/skfolio.utils.stats.is_cholesky_dec.rst", "generated/skfolio.utils.stats.n_bins_freedman.rst", "generated/skfolio.utils.stats.n_bins_knuth.rst", "generated/skfolio.utils.stats.rand_weights.rst", "generated/skfolio.utils.stats.rand_weights_dirichlet.rst", "index.rst", "sg_execution_times.rst", "user_guide/cluster.rst", "user_guide/covariance.rst", "user_guide/data_preparation.rst", "user_guide/datasets.rst", "user_guide/distance.rst", "user_guide/expected_returns.rst", "user_guide/hyper_parameters_tuning.rst", "user_guide/index.rst", "user_guide/install.rst", "user_guide/model_selection.rst", "user_guide/optimization.rst", "user_guide/population.rst", "user_guide/portfolio.rst", "user_guide/pre_selection.rst", "user_guide/prior.rst", "user_guide/uncertainty_set.rst"], "titles": ["API Reference", "Mean-Risk", "Tracking Error", "Empirical Prior", "Black &amp; Litterman", "Factor Model", "Black &amp; Litterman Factor Model", "Maximum Sharpe Ratio", "Minimum CVaR", "Efficient Frontier", "Mean-Variance-CDaR Surface", "Weight Constraints", "Transaction Costs", "Management Fees", "L1 and L2 Regularization", "Uncertainty Set", "Computation times", "Risk Budgeting", "Risk Parity - Variance", "Risk Budgeting - CVaR", "Risk Parity - Covariance shrinkage", "Computation times", "Maximum Diversification", "Maximum Diversification", "Computation times", "Distributionally Robust CVaR", "Distributionally Robust CVaR", "Computation times", "Hierarchical Clustering and NCO", "Hierarchical Risk Parity - CVaR", "Hierarchical Equal Risk Contribution - CDaR", "HRP vs HERC", "Nested Clusters Optimization", "NCO - Combinatorial Purged CV", "Computation times", "Ensemble Optimizations", "Stacking Optimization", "Computation times", "Pre-selection", "Drop Highly Correlated Assets", "Select Best Performers", "Computation times", "Data Preparation", "Investment Horizon", "Computation times", "Examples", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.cluster</span></code>.HierarchicalClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.cluster</span></code>.LinkageMethod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_factors_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_ftse100_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_nasdaq_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_sp500_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_sp500_index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.BaseDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.CovarianceDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.DistanceCorrelation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.KendallDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.MutualInformation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.PearsonDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.SpearmanDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.BaseMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.ExtraRiskMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.PerfMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.RatioMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.RiskMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.average_drawdown", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.cdar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.cvar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.drawdown_at_risk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.edar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.effective_number_assets", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.entropic_risk_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.evar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.first_lower_partial_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.fourth_central_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.fourth_lower_partial_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.get_cumulative_returns", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.get_drawdowns", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.gini_mean_difference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.max_drawdown", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.mean", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.mean_absolute_deviation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.owa_gmd_weights", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.semi_deviation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.semi_variance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.standard_deviation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.third_central_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.ulcer_index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.value_at_risk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.variance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.worst_realization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.BaseCombinatorialCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.CombinatorialPurgedCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.WalkForward", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.BaseCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.BaseMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.DenoiseCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.DetoneCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EWCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EWMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EmpiricalMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EquilibriumMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.GerberCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.ShrunkMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.ShrunkMuMethods", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.BaseComposition", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.BaseHierarchicalOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.ConvexOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.DistributionallyRobustCVaR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.EqualWeighted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.HierarchicalEqualRiskContribution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.HierarchicalRiskParity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.InverseVolatility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.MaximumDiversification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.MeanRisk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.NestedClustersOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.ObjectiveFunction", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.Random", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.RiskBudgeting", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.StackingOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.population</span></code>.Population", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.portfolio</span></code>.BasePortfolio", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.portfolio</span></code>.MultiPeriodPortfolio", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.portfolio</span></code>.Portfolio", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.pre_selection</span></code>.DropCorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.pre_selection</span></code>.SelectKExtremes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.pre_selection</span></code>.SelectNonDominated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.preprocessing</span></code>.prices_to_returns", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.BaseLoadingMatrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.BasePrior", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.BlackLitterman", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.EmpiricalPrior", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.FactorModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.LoadingMatrixRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.PriorModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BaseCovarianceUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BaseMuUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BootstrapCovarianceUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BootstrapMuUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.EmpiricalCovarianceUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.EmpiricalMuUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.UncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.NBinsMethod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.assert_is_distance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.assert_is_square", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.assert_is_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.commutation_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.compute_optimal_n_clusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.corr_to_cov", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.cov_nearest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.cov_to_corr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.is_cholesky_dec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.n_bins_freedman", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.n_bins_knuth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.rand_weights", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.rand_weights_dirichlet", "skfolio", "Computation times", "Clustering Estimators", "Covariance Estimator", "Data Preparation", "Datasets", "Distance Estimator", "Expected Return Estimator", "Hyper-Parameters Tuning", "User Guide", "Installation", "Model Selection", "Optimization", "Population", "Portfolio", "Pre-Selection Transformers", "Prior Estimator", "Uncertainty Set Estimator"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 77, 78, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 164, 168, 172, 173, 175, 176, 177, 178, 180], "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 69, 70, 72, 73, 74, 76, 77, 78, 79, 82, 84, 85, 89, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 151, 152, 153, 155, 157, 159, 164, 166, 168, 169, 172, 173, 174, 175, 176, 177, 178, 180, 181], "pleas": [0, 47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "full": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 48, 127, 172, 178], "user": [0, 7, 8, 47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 168, 169], "guid": [0, 7, 8, 47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 168], "further": [0, 33], "detail": [0, 97, 99, 100, 101, 103, 106, 107, 108, 115, 116, 121, 122, 126, 164, 172], "raw": 0, "specif": [0, 5, 100, 115, 116, 121, 122, 126, 127, 140, 172, 180], "mai": [0, 7, 8, 14, 31, 33, 36, 39, 107, 172, 176], "enough": [0, 31, 33, 36, 39, 178], "give": [0, 7, 8, 96, 107, 168], "guidelin": 0, "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 38, 39, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 70, 73, 74, 76, 79, 82, 83, 84, 85, 92, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 157, 160, 161, 164, 166, 168, 169, 172, 175, 176, 178, 180, 181], "modul": [0, 150, 166, 172, 175, 176], "includ": [0, 7, 94, 107, 108, 109, 110, 126, 128, 132, 134, 164, 166, 175, 178], "all": [0, 5, 8, 11, 12, 14, 15, 26, 29, 32, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 164, 165, 168, 169, 172, 175, 176, 178], "across": [0, 107, 135, 168], "multiperiodportfolio": [0, 12, 13, 14, 15, 31, 33, 36, 39, 40, 96, 128, 164, 175, 177, 178], "object": [0, 7, 8, 14, 18, 26, 29, 31, 33, 36, 39, 40, 47, 54, 55, 56, 57, 58, 59, 60, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 175, 176], "ar": [0, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 29, 30, 31, 32, 33, 36, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 77, 78, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 164, 167, 168, 169, 170, 171, 172, 175, 176, 178, 179, 180], "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 26, 29, 31, 33, 36, 39, 40, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 170, 172, 175, 176, 177, 178, 179, 180, 181], "predict": [0, 10, 11, 12, 13, 15, 92, 96, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 141, 172, 176, 177, 178, 179], "method": [0, 5, 7, 8, 9, 11, 12, 13, 14, 18, 36, 47, 48, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 157, 164, 167, 168, 170, 171, 172, 175, 176, 177, 179, 180, 181], "thei": [0, 77, 78, 139, 164, 168, 169, 172, 176, 178], "need": [0, 7, 8, 12, 13, 15, 114, 115, 116, 118, 119, 121, 122, 123, 126, 131, 157, 164, 168], "homogen": [0, 4, 6, 12, 114, 115, 118, 119, 121, 122, 126, 131, 178], "problem": [0, 5, 12, 13, 26, 40, 97, 99, 100, 101, 103, 106, 108, 114, 115, 116, 118, 119, 121, 122, 126, 131, 140, 157, 176, 178, 180], "mean": [0, 2, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 29, 31, 32, 36, 39, 40, 43, 63, 64, 65, 68, 74, 76, 79, 82, 83, 84, 85, 92, 96, 102, 104, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 134, 135, 138, 141, 142, 145, 146, 147, 148, 164, 165, 168, 172, 178], "dot": [0, 32, 36, 123, 127, 131, 176, 178], "product": [0, 32, 36, 123, 127, 131, 147, 168, 172, 176, 178], "asset": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 71, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 146, 147, 148, 164, 165, 167, 168, 169, 170, 171, 176, 178, 179, 180, 181], "weight": [0, 1, 2, 4, 8, 12, 13, 14, 16, 23, 26, 29, 30, 31, 32, 33, 36, 45, 48, 71, 83, 101, 102, 105, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 135, 138, 162, 163, 165, 168, 176, 177, 178], "list": [0, 11, 40, 107, 115, 116, 121, 122, 123, 126, 127, 128, 129, 130, 131, 134, 138, 172, 177, 178], "packag": [0, 173], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 94, 95, 96, 114, 115, 116, 118, 119, 121, 122, 123, 126, 131, 132, 133, 134, 138, 142, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181], "meanrisk": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 36, 39, 40, 43, 45, 121, 123, 127, 164, 172, 175, 176, 177, 179, 181], "optim": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 37, 39, 40, 43, 62, 96, 106, 107, 108, 111, 131, 134, 135, 140, 142, 145, 146, 147, 148, 155, 160, 161, 165, 166, 173, 175, 177, 178, 179, 180, 181], "maximum": [1, 3, 4, 5, 6, 10, 11, 12, 13, 16, 24, 36, 39, 40, 47, 64, 65, 69, 80, 89, 97, 99, 100, 101, 103, 106, 107, 108, 114, 115, 116, 118, 119, 121, 122, 126, 128, 129, 130, 131, 140, 157, 165], "sharp": [1, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 18, 19, 20, 23, 29, 32, 33, 36, 39, 40, 45, 64, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 165, 172, 176, 178], "ratio": [1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 18, 19, 20, 23, 29, 31, 32, 33, 36, 39, 40, 45, 64, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 165, 172, 176], "minimum": [1, 2, 9, 10, 11, 16, 29, 32, 40, 45, 47, 74, 76, 82, 84, 85, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 129, 130, 131, 134, 165, 176], "cvar": [1, 2, 7, 9, 14, 15, 16, 17, 18, 20, 21, 23, 27, 28, 30, 31, 32, 33, 34, 36, 40, 65, 73, 114, 115, 116, 118, 119, 122, 123, 126, 129, 130, 131, 165, 172, 178], "effici": [1, 10, 16, 43, 45, 119, 123, 165, 168, 172, 177], "frontier": [1, 10, 16, 43, 45, 119, 123, 165, 168, 177], "varianc": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 36, 39, 40, 43, 45, 47, 48, 65, 79, 85, 97, 99, 100, 101, 103, 106, 108, 111, 114, 115, 118, 119, 122, 123, 126, 129, 130, 131, 134, 140, 142, 145, 146, 147, 148, 157, 165, 168, 172, 176, 177, 178], "cdar": [1, 7, 8, 9, 14, 15, 16, 18, 19, 20, 23, 28, 29, 34, 36, 40, 45, 65, 70, 114, 115, 118, 119, 122, 126, 129, 130, 131, 164, 165, 176, 178], "surfac": [1, 16, 45, 128, 165], "constraint": [1, 2, 9, 10, 14, 15, 16, 26, 45, 115, 116, 121, 122, 126, 165, 176], "transact": [1, 16, 45, 109, 114, 115, 116, 118, 119, 121, 122, 126, 131, 165, 176, 178], "cost": [1, 16, 45, 114, 115, 116, 118, 119, 121, 122, 126, 131, 165, 176, 178], "manag": [1, 16, 45, 55, 57, 59, 60, 99, 100, 106, 113, 114, 115, 118, 119, 121, 122, 123, 126, 131, 135, 139, 164, 165, 168, 176, 178], "fee": [1, 16, 45, 114, 115, 118, 119, 121, 122, 126, 131, 164, 165, 176, 178], "l1": [1, 16, 36, 45, 107, 115, 121, 122, 164, 165, 176], "l2": [1, 16, 45, 115, 121, 122, 160, 165, 176], "regular": [1, 15, 16, 36, 45, 110, 115, 116, 121, 122, 164, 165, 176], "uncertainti": [1, 16, 26, 45, 115, 122, 138, 143, 144, 145, 146, 147, 148, 149, 165, 176], "set": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 45, 47, 54, 55, 56, 57, 58, 59, 60, 77, 78, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 157, 162, 165, 168, 169, 172, 175, 176, 177, 178], "track": [1, 16, 45, 121, 122, 164, 165, 176], "error": [1, 5, 15, 16, 45, 107, 108, 109, 110, 111, 115, 116, 121, 122, 126, 130, 131, 140, 151, 152, 153, 157, 164, 165, 176, 180, 181], "empir": [1, 16, 45, 99, 103, 104, 139, 147, 148, 164, 165], "prior": [1, 4, 5, 6, 16, 20, 36, 40, 43, 45, 100, 114, 115, 116, 118, 119, 120, 121, 122, 126, 145, 146, 147, 148, 164, 165, 168, 172], "black": [1, 16, 45, 138, 165, 176], "litterman": [1, 16, 45, 138, 165, 176], "factor": [1, 3, 4, 16, 29, 45, 49, 96, 101, 102, 105, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 135, 140, 141, 142, 145, 146, 147, 148, 165, 176], "model": [1, 14, 15, 16, 45, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 138, 140, 142, 165, 166, 167, 170, 171, 172, 173, 176, 177, 178, 179, 181], "go": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 168], "end": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 94, 95, 97, 99, 100, 101, 103, 106, 108, 122, 126, 128, 134, 155, 176], "download": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 50, 51, 169], "code": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 164], "run": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 96, 107, 123, 127, 132, 133, 134, 141, 168, 172, 176], "your": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 168, 172, 176], "browser": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "via": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 169], "binder": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "tutori": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 115, 116, 121, 122, 126], "show": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 128], "how": [2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 20, 36, 40, 47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 172, 176], "incorpor": [2, 6, 11, 12, 13, 14, 15, 20, 94, 100, 138, 175, 176, 180], "The": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 67, 68, 69, 70, 72, 73, 74, 76, 79, 82, 84, 85, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 157, 159, 160, 161, 162, 163, 164, 166, 169, 172, 175, 176, 178, 180, 181], "defin": [2, 11, 12, 47, 55, 56, 57, 58, 59, 60, 71, 72, 93, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 149, 155, 168, 181], "rmse": [2, 121, 122], "root": [2, 84, 86, 121, 122, 129, 130, 131, 168], "squar": [2, 29, 30, 32, 47, 55, 57, 59, 60, 84, 86, 107, 108, 109, 110, 121, 122, 129, 130, 131, 145, 146, 147, 148, 152, 168], "portfolio": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 55, 57, 59, 60, 71, 92, 95, 96, 106, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 134, 135, 139, 140, 145, 146, 147, 148, 164, 166, 172, 173, 175, 176, 177, 179, 180], "compar": [2, 7, 8, 10, 14, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 94, 95, 107, 108, 109, 110, 121, 122, 130, 134, 138, 142, 175, 176, 178], "target": [2, 15, 74, 76, 82, 84, 85, 94, 96, 111, 120, 121, 122, 123, 127, 132, 133, 134, 135], "In": [2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 29, 30, 31, 32, 33, 39, 40, 58, 92, 95, 107, 109, 127, 142, 172, 175, 177, 178], "we": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 92, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 134, 140, 147, 157, 164, 168, 172, 173, 175, 176, 177, 180], "creat": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 96, 169, 177, 180], "long": [2, 14, 15, 114, 115, 116, 118, 119, 121, 122, 126, 168, 176], "short": [2, 14, 15, 36, 114, 115, 116, 118, 119, 121, 122, 126, 168], "20": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 36, 39, 43, 52, 53, 115, 116, 121, 122, 126, 169], "stock": [2, 13], "spx": [2, 3, 4, 5, 6, 29, 114, 115, 116, 118, 119, 121, 122, 126, 138, 169], "index": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 50, 51, 52, 53, 64, 65, 71, 88, 94, 95, 115, 116, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 164, 176, 178], "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 52, 55, 56, 57, 59, 60, 67, 68, 69, 70, 72, 73, 77, 89, 94, 95, 96, 101, 102, 103, 105, 106, 107, 108, 109, 110, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 145, 146, 147, 148, 149, 162, 164, 165, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181], "30": [2, 7, 8, 9, 14, 15, 18, 20, 23, 29, 33, 36, 40, 43, 129, 130, 131, 177], "while": [2, 36, 79, 94, 96, 106, 127, 129, 130, 131, 164, 172, 173], "minim": [2, 9, 26, 29, 30, 31, 32, 47, 48, 116, 118, 119, 122, 124, 164, 176], "condit": [2, 8, 10, 64, 65, 67, 68, 79, 99, 107, 108, 115, 116, 122, 126, 129, 130, 131, 164, 176], "valu": [2, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 23, 29, 30, 32, 36, 40, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 155, 157, 159, 164, 172, 176], "risk": [2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 21, 23, 28, 32, 34, 36, 40, 47, 62, 64, 65, 67, 68, 69, 70, 72, 73, 89, 105, 111, 114, 115, 116, 118, 119, 121, 122, 123, 124, 126, 127, 129, 130, 131, 134, 135, 138, 139, 140, 165, 168, 172, 173, 180], "95": [2, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 50, 67, 68, 69, 70, 72, 73, 89, 115, 116, 122, 126, 129, 130, 131, 132, 145, 146, 147, 148, 175, 177], "load": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 136, 140, 141, 169, 180], "": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 128, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 155, 161, 164, 167, 168, 169, 170, 171, 176, 177, 178, 179, 180, 181], "p": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 23, 26, 29, 30, 32, 33, 43, 52, 53, 94, 106, 109, 169], "500": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 32, 33, 43, 52, 53, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 169], "dataset": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 94, 96, 97, 99, 100, 101, 103, 106, 108, 157, 166, 167, 170, 171, 172, 175, 176, 177, 179, 180, 181], "compos": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 49, 50, 51, 52, 53, 114, 115, 118, 119, 121, 122, 126, 128, 130, 131, 164, 169, 178], "daili": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 114, 115, 118, 119, 121, 122, 126, 131, 138, 168, 169], "price": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 92, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134, 135, 138, 139, 140, 141, 145, 146, 147, 148, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181], "from": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 55, 57, 59, 60, 70, 73, 77, 78, 92, 94, 95, 99, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 157, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181], "composit": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 31, 33, 36, 39, 40, 43, 50, 51, 52, 128, 129, 130, 131, 169, 177, 178], "itself": [2, 128], "import": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 94, 95, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181], "numpi": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 92, 94, 95, 167, 170, 171, 175, 176, 178, 179, 180, 181], "np": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 47, 92, 94, 95, 108, 109, 110, 114, 115, 116, 118, 119, 121, 122, 126, 175, 176, 178], "plotli": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 128, 131], "io": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "sklearn": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 92, 94, 95, 107, 108, 109, 110, 123, 141, 164, 166, 172, 175, 176, 177, 178, 179], "clone": [2, 14, 15], "model_select": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 92, 123, 164, 172, 175, 176, 177, 178, 179], "train_test_split": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 164, 172, 175, 176, 177, 179], "skfolio": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181], "popul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 96, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 164, 175], "riskmeasur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 29, 30, 31, 32, 33, 36, 43, 92, 114, 115, 118, 119, 122, 123, 126, 127, 129, 130, 131, 134, 164, 172, 176, 177, 178], "load_sp500_dataset": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 32, 33, 43, 164, 166, 167, 169, 170, 171, 172, 175, 176, 177, 179, 180, 181], "load_sp500_index": [2, 169], "equalweight": [2, 8, 14, 23, 26, 29, 30, 31, 32, 33, 36, 125, 176], "objectivefunct": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 32, 36, 39, 122, 164, 172, 176, 181], "preprocess": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 164, 166, 167, 170, 171, 172, 175, 176, 177, 179, 180, 181], "prices_to_return": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 164, 166, 167, 170, 171, 172, 175, 176, 177, 179, 180, 181], "2014": [2, 5, 6, 29, 49], "spx_price": 2, "x": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 135, 138, 139, 140, 141, 145, 146, 147, 148, 151, 152, 153, 154, 159, 160, 161, 164, 166, 167, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181], "y": [2, 5, 6, 9, 10, 14, 15, 29, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 145, 146, 147, 148, 164, 176, 177, 180], "x_train": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 164, 172, 176, 177, 179], "x_test": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 107, 108, 109, 110, 164, 172, 176, 177, 179], "y_train": [2, 5, 6, 29, 164, 176], "y_test": [2, 5, 6, 29, 164, 176], "test_siz": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 95, 164, 172, 176, 177, 179], "33": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 32, 36, 39, 40, 164, 172, 176, 177], "shuffl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 95, 164, 172, 175, 176, 177, 179], "fals": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 50, 51, 55, 57, 59, 60, 77, 78, 92, 95, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 111, 115, 116, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 157, 159, 164, 172, 175, 176, 177, 179], "two": [2, 6, 14, 29, 31, 33, 40, 47, 58, 79, 106, 107, 108, 109, 110, 111, 118, 119, 128, 129, 130, 131, 132, 155, 168, 172, 176], "without": [2, 5, 7, 8, 12, 13, 14, 15, 20, 39, 40, 115, 116, 121, 122, 126, 129, 130, 131], "versu": [2, 10], "A": [2, 3, 4, 5, 11, 12, 14, 29, 40, 46, 47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 167, 168, 170, 172, 176, 177, 178, 179, 180], "differ": [2, 7, 8, 9, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 33, 36, 39, 40, 43, 47, 64, 65, 79, 83, 109, 118, 121, 122, 126, 128, 129, 130, 131, 155, 164, 168, 176], "between": [2, 12, 14, 15, 29, 30, 32, 43, 47, 48, 58, 79, 107, 108, 109, 110, 119, 121, 122, 129, 130, 131, 135, 138, 155, 172, 176], "first": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 29, 36, 39, 40, 43, 64, 65, 74, 95, 100, 107, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 157, 164, 168, 173, 176], "model_no_track": 2, "objective_funct": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 32, 36, 39, 122, 164, 172, 176, 181], "minimize_risk": [2, 8, 122, 124], "risk_measur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 29, 30, 31, 32, 33, 36, 43, 114, 115, 118, 119, 122, 126, 164, 172, 176, 177], "min_weight": [2, 11, 14, 15, 36, 114, 115, 116, 118, 119, 121, 122, 126, 164, 172], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 24, 26, 27, 29, 30, 31, 32, 33, 36, 37, 39, 40, 43, 44, 47, 53, 55, 56, 57, 59, 60, 67, 68, 69, 71, 72, 89, 92, 94, 95, 96, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 141, 145, 146, 147, 148, 149, 150, 155, 157, 160, 161, 164, 168, 172, 173, 176, 177, 178, 181], "portfolio_param": [2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 18, 19, 20, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 96, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127], "dict": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 20, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "name": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 169, 172, 176, 177, 178], "tag": [2, 9, 10, 14, 15, 31, 33, 36, 39, 43, 128, 129, 130, 131], "No": [2, 14, 15, 159], "fit": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 166, 167, 168, 170, 171, 172, 175, 176, 177, 179, 180, 181], "weights_": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 39, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 164, 172, 176, 177, 181], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 32, 39, 47, 54, 55, 56, 57, 58, 59, 60, 92, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 145, 146, 147, 148, 160, 161, 167, 170, 171, 176, 178, 179, 180, 181], "03676195": 2, "02374444": 2, "02155918": 2, "02117437": 2, "0373302": 2, "00370324": 2, "01028137": 2, "0298146": 2, "07317879": 2, "15980287": 2, "00139632": 2, "01100645": 2, "0810491": 2, "20227491": 2, "21580436": 2, "17510456": 2, "00322793": 2, "06858182": 2, "11093659": 2, "07941073": 2, "Then": [2, 12, 13, 14, 31, 32, 39, 40, 123, 139, 157, 176], "model_track": 2, "set_param": [2, 12, 13, 14, 15, 31, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "max_tracking_error": [2, 121, 122], "003": [2, 178], "For": [2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 58, 94, 96, 97, 99, 100, 101, 103, 105, 106, 107, 108, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 135, 140, 164, 168, 172, 175, 176, 177, 178, 180], "comparison": [2, 3, 4, 5, 6, 31], "singl": [2, 29, 30, 31, 32, 33, 47, 48, 94, 96, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 134, 135, 168, 175, 176], "contain": [2, 3, 4, 5, 7, 8, 29, 30, 32, 47, 50, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 172, 176, 177, 178, 180], "model_spx": 2, "now": [2, 10, 12, 14, 15, 36, 40], "plot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 94, 128, 129, 130, 131, 178], "both": [2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 15, 18, 19, 20, 23, 31, 33, 36, 39, 94, 109, 128, 131, 149, 157, 168, 176, 177, 181], "train": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 94, 95, 96, 107, 116, 123, 127, 141, 175, 176, 178], "ptf_no_tracking_train": 2, "ptf_tracking_train": 2, "spx_train": 2, "note": [2, 5, 11, 12, 13, 14, 15, 40, 54, 92, 97, 98, 103, 107, 108, 109, 110, 115, 116, 121, 122, 123, 126, 127, 136, 137, 143, 144, 168, 178, 180], "coul": 2, "have": [2, 4, 6, 10, 11, 12, 14, 30, 36, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 168, 172], "directli": [2, 11, 58, 114, 115, 118, 119, 121, 122, 126, 127, 142, 168, 172, 178], "train_spx": 2, "population_train": [2, 9, 10, 14, 15], "fig": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47], "plot_cumulative_return": [2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 128, 129, 130, 131, 164, 177, 178], "let": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 132, 177], "print": [2, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 39, 40, 94, 95, 107, 164, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181], "tracking_rms": 2, "sqrt": [2, 48, 55, 57, 59, 60, 107, 108, 109, 110, 129, 130, 131, 155], "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 23, 26, 29, 31, 32, 36, 39, 40, 41, 43, 47, 48, 51, 55, 57, 58, 59, 60, 71, 94, 95, 96, 101, 102, 106, 108, 109, 111, 115, 116, 118, 119, 121, 122, 123, 126, 128, 131, 132, 134, 138, 145, 146, 147, 148, 149, 155, 164, 168, 172, 176, 177, 178, 181], "f": [2, 14, 23, 31, 33, 36, 39, 43, 94, 95, 122, 124, 176, 178], "cvar_ratio": [2, 15, 31, 33, 64, 129, 130, 131], "2f": [2, 14, 23, 33, 36, 39, 40], "n": [2, 12, 13, 14, 31, 33, 36, 46, 105, 114, 115, 118, 119, 121, 122, 126, 128, 131, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 164, 168, 177], "60": [2, 8, 9, 12, 13, 14, 15, 23, 31, 33, 36, 40, 164], "58": [2, 7, 9, 14, 15, 20, 29, 109], "02": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20, 23, 26, 29, 30, 32, 33, 34, 37, 39, 40, 43, 49, 51, 52, 53, 116, 138, 165, 169, 178], "78": [2, 8, 9, 14, 19, 23, 29, 40, 51], "03": [2, 4, 5, 6, 7, 8, 9, 13, 15, 16, 19, 23, 29, 32, 36, 39, 40, 43, 49, 51, 52, 53, 164, 165, 178], "achiev": [2, 12, 14, 15, 31, 168], "requir": 2, "tradeoff": 2, "higher": [2, 12, 13, 14, 31, 71, 76, 95, 129, 130, 131, 133, 164], "final": [2, 7, 8, 9, 11, 12, 14, 15, 18, 19, 20, 23, 29, 30, 31, 32, 36, 106, 118, 119, 123, 127, 134, 176, 178], "test": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 56, 93, 94, 95, 96, 107, 108, 109, 110, 123, 127, 157, 175, 177, 178], "ptf_no_tracking_test": 2, "ptf_tracking_test": 2, "spx_test": 2, "04": [2, 3, 4, 7, 8, 9, 14, 15, 16, 20, 21, 31, 36, 39, 40, 43, 50, 51, 52, 53, 138, 164, 165], "3": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 23, 26, 29, 31, 32, 36, 39, 40, 43, 52, 94, 95, 106, 107, 108, 109, 110, 111, 115, 116, 118, 119, 121, 122, 123, 126, 132, 145, 146, 164, 168, 172, 178, 179], "08": [2, 4, 5, 7, 8, 9, 13, 14, 15, 19, 23, 36, 40, 43, 49, 51, 52, 53], "39": [2, 7, 9, 14, 15, 18, 19, 20, 29, 36, 40], "As": [2, 12, 13, 18, 19, 23], "expect": [2, 3, 4, 5, 6, 9, 12, 13, 15, 18, 19, 23, 65, 67, 68, 79, 98, 102, 104, 105, 111, 114, 115, 116, 118, 119, 120, 121, 122, 124, 126, 129, 130, 131, 138, 139, 140, 142, 146, 148, 149, 168, 176, 180, 181], "also": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 29, 30, 31, 32, 40, 48, 115, 116, 121, 122, 123, 126, 127, 132, 134, 135, 140, 164, 168, 175, 176, 178, 180], "lower": [2, 3, 4, 5, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 74, 76, 84, 85, 114, 115, 116, 118, 119, 121, 122, 126, 129, 130, 131, 142, 164, 176, 180], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 96, 111, 114, 115, 118, 119, 121, 122, 126, 131, 135, 165, 176], "time": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 55, 57, 58, 59, 60, 92, 94, 95, 105, 107, 114, 115, 116, 118, 119, 121, 122, 124, 126, 129, 130, 131, 135, 168, 175, 176], "script": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "minut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "179": [2, 16, 165], "second": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 65, 79, 84, 85, 86, 90, 122, 129, 130, 131, 132, 172], "jupyt": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45], "notebook": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45], "plot_10_tracking_error": [2, 16, 165], "ipynb": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 164], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "py": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 132, 133, 134, 165], "galleri": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 165], "gener": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 94, 95, 96, 107, 119, 123, 127, 132, 133, 134, 145, 146, 168, 172, 175, 176], "sphinx": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45], "empiricalprior": [3, 5, 20, 29, 36, 40, 43, 114, 115, 116, 118, 119, 120, 121, 122, 126, 138, 140, 145, 146, 147, 148, 164, 168, 172, 176, 180], "estim": [3, 4, 5, 6, 7, 13, 14, 15, 18, 19, 20, 23, 26, 31, 33, 36, 40, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 160, 164, 168, 175, 179], "priormodel": [3, 4, 5, 29, 114, 115, 116, 118, 119, 120, 121, 122, 126, 138, 139, 140, 176, 180], "distribut": [3, 4, 5, 14, 15, 26, 29, 49, 50, 51, 52, 53, 79, 107, 108, 109, 110, 116, 125, 128, 129, 130, 131, 145, 146, 147, 148, 155, 162, 163, 164, 168, 169, 172, 176, 180, 181], "It": [3, 4, 5, 7, 8, 11, 15, 26, 29, 30, 32, 71, 74, 76, 79, 82, 84, 85, 99, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 130, 131, 138, 140, 155, 164, 166, 167, 168, 170, 171, 172, 176, 178, 179, 180, 181], "repres": [3, 4, 5, 6, 15, 29, 30, 31, 32, 33, 36, 39, 40, 47, 49, 68, 70, 73, 107, 108, 109, 110, 129, 130, 131, 147, 175, 176, 180], "investor": [3, 4, 5, 29, 72, 129, 130, 131, 138, 176, 178, 180], "belief": [3, 4, 5, 29, 176, 180], "about": [3, 4, 5, 6, 26, 29, 42, 45, 115, 116, 121, 122, 126, 138, 173, 176, 180], "dataclass": [3, 4, 5, 142, 149, 180], "mu": [3, 4, 5, 12, 13, 15, 102, 104, 105, 108, 109, 110, 111, 114, 115, 116, 118, 119, 121, 122, 124, 126, 142, 144, 146, 148, 149, 168, 171, 176, 180, 181], "covari": [3, 4, 5, 17, 21, 40, 45, 55, 97, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 120, 121, 122, 126, 131, 138, 139, 140, 142, 143, 145, 146, 147, 148, 149, 156, 157, 158, 165, 168, 176, 180, 181], "matrix": [3, 4, 5, 11, 29, 30, 32, 40, 47, 48, 54, 55, 56, 57, 58, 59, 60, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 114, 115, 116, 118, 119, 120, 121, 122, 123, 126, 131, 136, 138, 139, 140, 141, 142, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 166, 167, 168, 170, 175, 176, 178, 180, 181], "choleski": [3, 4, 5, 97, 99, 100, 101, 103, 106, 108, 115, 116, 120, 121, 122, 126, 138, 142, 157, 159, 176, 180], "triangular": [3, 4, 5, 142, 180], "option": [3, 4, 5, 47, 50, 51, 55, 58, 74, 76, 82, 84, 85, 92, 94, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 146, 147, 148, 168, 180], "simpli": [3, 12, 132], "mu_estim": [3, 5, 138, 139, 164, 172, 176, 180], "covariance_estim": [3, 5, 20, 36, 40, 55, 99, 100, 105, 111, 139, 164, 176, 180], "build": [3, 4, 5, 6, 19, 55, 57, 59, 60, 119, 123, 164, 173, 177, 181], "jame": [3, 5, 111, 112, 180], "stein": [3, 5, 111, 112, 180], "shrinkag": [3, 5, 13, 17, 21, 45, 108, 109, 110, 111, 112, 114, 115, 118, 119, 121, 122, 126, 164, 165, 180], "denois": [3, 99, 176, 180], "start": [3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 49, 50, 51, 52, 53, 77, 94, 119, 128, 129, 130, 131, 150, 157, 164, 169, 176], "1990": [3, 4, 7, 8, 9, 11, 12, 13, 18, 19, 20, 23, 32, 43, 52, 53, 169], "01": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 26, 30, 31, 32, 33, 34, 36, 39, 40, 43, 49, 50, 51, 52, 53, 138, 165, 169, 172, 176, 178], "up": [3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 97, 99, 100, 101, 103, 106, 108, 169], "2022": [3, 4, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 30, 32, 33, 43, 49, 52, 53, 106, 169, 178], "12": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 36, 39, 43, 49, 51, 52, 53, 94, 164, 169], "28": [3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 36, 40, 43, 49, 52, 53, 165, 169], "moment": [3, 5, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 74, 75, 76, 84, 85, 86, 87, 90, 114, 115, 118, 119, 122, 126, 129, 130, 131, 139, 164, 167, 168, 171, 172, 176, 180, 181], "denoisecovari": [3, 164, 167, 176, 180], "shrunkmu": [3, 5, 112, 164, 171, 180], "maximize_ratio": [3, 4, 5, 6, 7, 10, 32, 39, 122, 124, 164, 172, 176, 181], "prior_estim": [3, 4, 5, 6, 20, 29, 36, 40, 43, 114, 115, 116, 118, 119, 120, 121, 122, 126, 138, 145, 146, 147, 148, 164, 172, 176], "max": [3, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 48, 107, 108, 109, 110, 122, 155, 176], "5": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 34, 36, 39, 40, 49, 52, 55, 56, 57, 59, 60, 94, 95, 96, 106, 107, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 134, 164, 168, 179, 181], "30314924e": 3, "93771054e": 3, "10": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 26, 29, 36, 39, 40, 43, 50, 94, 109, 115, 116, 121, 122, 126, 133, 164, 172], "58269647e": 3, "78708311e": 3, "05717669e": 3, "4": [3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 23, 26, 32, 36, 39, 40, 43, 47, 51, 52, 94, 95, 106, 107, 118, 119, 122, 132, 133, 134, 155, 168, 176, 178], "89322196e": 3, "23352411e": 3, "64823756e": 3, "96895546e": 3, "8": [3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 20, 23, 26, 31, 32, 33, 36, 39, 40, 51, 94, 155, 164], "40812344e": 3, "98213665e": 3, "9": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 20, 23, 26, 32, 33, 36, 39, 94, 115, 116, 121, 122, 126, 176, 179], "90879685e": 3, "6": [3, 5, 6, 8, 9, 11, 12, 13, 15, 23, 26, 29, 32, 39, 43, 51, 94, 95, 168, 178], "51844546e": 3, "7": [3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 23, 26, 32, 33, 39, 40, 51, 94, 115, 116, 121, 122, 126, 168], "44938306e": 3, "78413867e": 3, "09": [3, 4, 5, 6, 7, 8, 9, 12, 13, 26, 40], "27194222e": 3, "87866505e": 3, "81161325e": 3, "35005322e": 3, "04863941e": 3, "default": [3, 4, 5, 7, 8, 11, 12, 13, 14, 26, 29, 30, 32, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 82, 84, 85, 89, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 162, 168, 169, 172, 176, 178, 180], "bench": [3, 18, 19, 20, 23, 26, 29, 30, 32], "43855248e": [3, 4, 7], "09226948e": [3, 4, 7], "30530766e": [3, 4, 7], "11": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 16, 18, 19, 20, 23, 26, 29, 31, 34, 36, 39, 40, 52, 94, 165], "20898034e": [3, 4, 7], "18441126e": [3, 4, 7], "28498817e": [3, 4, 7], "28522027e": [3, 4, 7], "24120028e": [3, 4, 7], "43231855e": [3, 4, 7], "78010014e": [3, 4, 7], "19871439e": [3, 4, 7], "49938736e": [3, 4, 7], "16368341e": [3, 4, 7], "73909314e": [3, 4, 7], "74856659e": [3, 4, 7], "09507654e": [3, 4, 7], "64772972e": [3, 4, 7], "84021249e": [3, 4, 7], "34862950e": [3, 4, 7], "35710067e": [3, 4, 7], "pred_model": [3, 7, 8, 40], "pred_bench": [3, 7, 8, 14, 33, 36, 40], "171": [3, 16, 36, 165], "plot_11_empirical_prior": [3, 16, 165], "blacklitterman": [4, 6, 164, 176, 180], "take": [4, 5, 12, 14, 15, 115, 116, 121, 122, 126, 128, 132, 138, 167, 168, 170, 171, 172, 176, 178, 179, 180, 181], "input": [4, 6, 11, 12, 13, 36, 47, 96, 107, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 160, 161, 164, 168, 176, 178, 180], "comput": [4, 14, 15, 29, 30, 32, 47, 48, 55, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 99, 100, 101, 103, 105, 106, 107, 108, 109, 110, 114, 115, 118, 119, 120, 121, 122, 123, 126, 129, 130, 131, 134, 138, 145, 146, 147, 148, 154, 155, 157, 159, 160, 161, 168, 172, 176, 178, 180], "which": [4, 5, 6, 11, 12, 13, 14, 15, 23, 26, 29, 30, 32, 49, 50, 51, 52, 53, 55, 57, 59, 60, 70, 72, 73, 94, 96, 106, 107, 108, 109, 110, 115, 116, 118, 119, 121, 122, 123, 126, 127, 129, 130, 131, 132, 133, 134, 138, 140, 157, 168, 169, 172, 175, 176, 178, 180], "updat": [4, 12, 29, 30, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 176, 180], "get": [4, 6, 26, 47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 168, 180], "posterior": [4, 138, 180], "assum": [4, 6, 10, 12, 13, 107, 108, 109, 110, 127], "abl": [4, 6, 14, 15, 33], "accur": [4, 6, 140], "futur": [4, 6, 115, 116, 121, 122, 126, 168], "realiz": [4, 6, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 91, 122, 126, 129, 130, 131, 164, 176], "market": [4, 11, 100, 105, 115, 116, 118, 119, 121, 122, 138, 168, 176], "appl": [4, 11, 12, 13, 19], "an": [4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 23, 26, 29, 30, 31, 32, 33, 36, 39, 48, 50, 51, 70, 73, 94, 96, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 148, 149, 151, 152, 153, 162, 171, 175, 176, 178, 181], "25": [4, 9, 14, 15, 31, 33, 36, 40, 114, 118, 119], "absolut": [4, 6, 7, 8, 9, 11, 14, 15, 18, 19, 20, 23, 29, 30, 32, 36, 40, 55, 57, 59, 60, 64, 65, 79, 82, 115, 116, 121, 122, 126, 129, 130, 131, 132, 138, 164, 176], "outperform": [4, 6, 7, 8, 12, 13, 31, 33, 36, 55, 57, 59, 60, 119, 123, 138, 164], "electr": [4, 11, 12, 13, 19], "22": [4, 7, 9, 10, 14, 15, 16, 18, 19, 20, 29, 36, 37, 165], "rel": [4, 6, 29, 70, 73, 129, 130, 131, 138], "jpmorgan": [4, 11, 12, 13, 19], "15": [4, 7, 8, 9, 14, 15, 18, 19, 23, 26, 27, 29, 36, 40, 165], "By": [4, 6, 11, 12, 13, 14, 15, 32, 40, 50, 51, 169, 172, 180], "convert": [4, 6, 12, 13, 92, 138, 139, 156, 157, 158, 168], "annual": [4, 6, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 63, 64, 65, 129, 130, 131, 168], "analyst_view": [4, 180], "aapl": [4, 7, 8, 11, 12, 13, 19, 43, 51, 52, 164, 180], "00098": 4, "ge": [4, 11, 12, 13, 19, 43, 122, 126, 155, 176], "00086": [4, 14], "jpm": [4, 11, 12, 13, 19, 43, 164], "00059": [4, 9], "model_bl": 4, "73670065e": 4, "66647584e": 4, "24355699e": 4, "02231082e": 4, "84980192e": 4, "73718908e": 4, "40597193e": 4, "51376159e": 4, "27250993e": 4, "77910456e": 4, "72985253e": 4, "34073945e": 4, "11421641e": 4, "65451603e": 4, "79851683e": 4, "45803069e": 4, "40429482e": 4, "36401076e": 4, "99610901e": 4, "27962284e": 4, "model_empir": [4, 5], "pred_bl": 4, "pred_empir": 4, "becaus": [4, 6, 12, 18, 30, 109, 134, 168, 175], "our": [4, 6, 7, 8, 12, 13, 36, 164, 175], "were": [4, 6, 164], "below": [4, 9, 11, 12, 13, 14, 15, 29, 30, 32, 33, 36, 47, 74, 76, 85, 106, 107, 114, 115, 116, 118, 119, 121, 122, 126, 129, 130, 131, 132, 134, 164, 168, 172, 176], "can": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 54, 58, 70, 73, 79, 92, 94, 96, 97, 98, 99, 100, 101, 103, 106, 107, 108, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 136, 137, 138, 140, 141, 143, 144, 149, 157, 159, 164, 167, 168, 169, 170, 171, 172, 174, 175, 176, 178, 179, 180, 181], "see": [4, 7, 8, 14, 15, 26, 29, 30, 31, 43, 47, 48, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 114, 115, 118, 119, 121, 122, 123, 126, 127, 132, 133, 134, 140, 164, 172], "alloc": [4, 12, 14, 15, 26, 29, 30, 31, 111, 116, 118, 119, 126, 164, 168], "more": [4, 5, 7, 8, 11, 12, 13, 14, 19, 29, 30, 31, 32, 33, 36, 39, 45, 47, 71, 95, 96, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 115, 116, 118, 119, 121, 122, 123, 126, 131, 132, 140, 164, 172, 176, 178, 180], "plot_composit": [4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 23, 26, 29, 30, 31, 32, 33, 36, 40, 43, 128, 129, 130, 131, 177, 178], "470": [4, 16, 165], "plot_12_black_and_litterman": [4, 16, 165], "factormodel": [5, 6, 29, 164, 176, 180], "purpos": [5, 140, 176, 180], "impos": [5, 126, 140, 176, 180], "structur": [5, 29, 30, 32, 140, 167, 170, 171, 176, 179, 180, 181], "financi": [5, 11, 71, 94, 100, 118, 119, 131, 138, 140, 175, 180], "variabl": [5, 14, 15, 58, 79, 94, 115, 116, 121, 122, 126, 129, 130, 131, 132, 140, 147, 169, 172, 176, 180], "explain": [5, 12, 13, 29, 43, 100, 140, 180], "them": [5, 6, 13, 26, 31, 33, 36, 39, 40, 127, 128, 140, 178, 180], "through": [5, 72, 107, 129, 130, 131, 140, 168, 176, 180], "small": [5, 109, 111, 140, 180], "number": [5, 7, 8, 9, 14, 15, 18, 19, 20, 23, 26, 29, 31, 33, 36, 39, 40, 47, 55, 56, 57, 58, 59, 60, 71, 83, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 145, 146, 150, 155, 157, 162, 163, 164, 172, 176, 180], "common": [5, 6, 29, 49, 135, 138, 139, 140, 168, 176, 180], "help": [5, 140, 180], "overcom": [5, 140, 180], "reduc": [5, 14, 15, 96, 99, 111, 115, 121, 122, 126, 132, 133, 134, 140, 164, 173, 180, 181], "paramet": [5, 7, 8, 9, 11, 12, 13, 26, 47, 48, 50, 51, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 168, 173, 175, 176, 177, 180], "e": [5, 96, 107, 108, 109, 110, 127, 128, 140, 168, 180], "dimension": [5, 40, 97, 99, 100, 101, 103, 106, 108, 111, 140, 180], "make": [5, 7, 8, 11, 12, 13, 92, 95, 140, 176, 178, 180], "robust": [5, 14, 15, 27, 31, 33, 36, 39, 106, 115, 116, 119, 121, 122, 123, 140, 145, 146, 147, 148, 164, 165, 180, 181], "against": [5, 111, 132, 140, 180], "nois": [5, 99, 131, 140, 180], "provid": [5, 9, 11, 12, 13, 94, 95, 105, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 135, 138, 139, 140, 142, 168, 172, 180], "decomposit": [5, 97, 99, 100, 101, 103, 106, 108, 115, 116, 120, 121, 122, 126, 138, 140, 142, 157, 159, 176, 180], "systemat": [5, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 140, 180], "secur": [5, 49, 50, 51, 52, 53, 100, 135, 140, 168, 169, 180], "compon": [5, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 168, 180], "To": [5, 7, 8, 10, 12, 18, 19, 20, 23, 26, 29, 30, 32, 36, 40, 94, 123, 127, 131, 132, 175, 176, 180], "compat": [5, 7, 8, 95, 164, 175, 178, 179, 180], "scikit": [5, 7, 8, 92, 107, 108, 109, 110, 164, 167, 170, 171, 172, 173, 175, 176, 179, 180, 181], "learn": [5, 7, 8, 92, 94, 99, 100, 107, 108, 109, 110, 119, 123, 164, 167, 170, 171, 172, 173, 175, 176, 179, 180, 181], "lowercas": [5, 180], "even": [5, 8, 95, 168, 180], "2d": [5, 11, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 138, 180], "than": [5, 11, 14, 29, 30, 31, 32, 33, 36, 39, 43, 47, 79, 95, 96, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 115, 116, 118, 119, 121, 122, 123, 126, 129, 130, 131, 132, 133, 134, 157, 168, 176, 178, 180], "one": [5, 11, 12, 13, 29, 30, 31, 32, 33, 36, 39, 43, 47, 94, 95, 96, 114, 115, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 141, 142, 162, 163, 168, 172, 175, 176, 180], "consist": [5, 8, 36, 47, 48, 54, 55, 56, 57, 58, 59, 60, 94, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 138, 139, 172, 175, 176, 180], "api": [5, 8, 33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 138, 139, 164, 167, 169, 170, 171, 172, 176, 179, 180, 181], "etf": [5, 6, 29, 49], "linear_model": [5, 180], "ridgecv": 5, "load_factors_dataset": [5, 6, 29, 164, 169, 176, 180], "gerbercovari": [5, 55, 164, 167], "loadingmatrixregress": [5, 140, 180], "factor_pric": [5, 6, 29, 164, 176, 180], "model_factor_1": 5, "22188511e": [5, 6], "31737525e": [5, 6], "74253021e": [5, 6], "70440099e": [5, 6], "46436338e": [5, 6], "24959219e": [5, 6], "13001762e": [5, 6], "35652050e": [5, 6], "36336705e": [5, 6], "79104637e": [5, 6], "03133290e": [5, 6], "13696569e": [5, 6], "12895735e": [5, 6], "27967880e": [5, 6], "13346758e": [5, 6], "44128512e": [5, 6], "88142338e": [5, 6], "19657594e": [5, 6], "63432134e": [5, 6], "09849875e": [5, 6], "chang": [5, 7, 8, 12, 13, 14, 29, 30, 32, 40, 107, 108, 109, 110, 168, 173], "baseloadingmatrix": [5, 140], "beta": [5, 67, 68, 69, 70, 72, 73, 89, 111, 129, 130, 131, 140, 145, 146, 147, 148, 180], "lassocv": [5, 140, 141, 180], "each": [5, 7, 8, 11, 12, 13, 14, 18, 19, 20, 23, 29, 30, 31, 32, 33, 36, 39, 40, 47, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 172, 175, 176, 178, 180], "separ": [5, 6, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 139, 140, 141, 180], "intercept": [5, 141], "parallel": [5, 12, 96, 107, 123, 127, 141, 176], "model_factor_2": 5, "loading_matrix_estim": [5, 140, 180], "linear_regressor": [5, 141], "fit_intercept": [5, 141], "n_job": [5, 12, 13, 14, 15, 31, 32, 33, 36, 39, 40, 96, 107, 123, 127, 141, 164, 172, 176], "97776252e": 5, "57851861e": 5, "18408031e": 5, "98298183e": 5, "16206284e": 5, "42391438e": 5, "00175085e": 5, "32124541e": 5, "74823262e": 5, "59482204e": 5, "59789920e": 5, "91802980e": 5, "42282444e": 5, "05685439e": 5, "43876113e": 5, "94746608e": 5, "31092783e": 5, "23719260e": 5, "35228602e": 5, "54697151e": 5, "gerber": [5, 106], "model_factor_3": 5, "factor_prior_estim": [5, 6, 140, 164, 176, 180], "48283750e": 5, "49645166e": 5, "48850261e": 5, "13": [5, 7, 8, 9, 14, 15, 20, 23, 29, 36, 40, 51, 97, 99, 100, 101, 103, 106, 108, 157], "59880563e": 5, "22380709e": 5, "12492676e": 5, "68739416e": 5, "26134346e": 5, "33953561e": 5, "45574521e": 5, "24004576e": 5, "61481439e": 5, "68197345e": 5, "44687699e": 5, "21327461e": 5, "72794158e": 5, "77006663e": 5, "47134961e": 5, "66255502e": 5, "78965839e": 5, "save": [5, 115, 116, 121, 122, 126, 180], "trail": 5, "underscor": [5, 15], "access": [5, 26, 127], "prior_estimator_": [5, 114, 115, 116, 120, 121, 122, 126, 138, 145, 146, 147, 148], "prior_model": 5, "prior_model_": [5, 138, 139, 140, 180], "loading_matrix": 5, "loading_matrix_estimator_": [5, 140], "loading_matrix_": [5, 141], "01562655e": 5, "81176235e": 5, "48598568e": 5, "89116954e": 5, "18538495e": 5, "64582189e": 5, "10584830e": 5, "88210632e": 5, "64220700e": 5, "95142106e": 5, "62632716e": 5, "66785730e": 5, "77784307e": 5, "61513792e": 5, "10083470e": 5, "72248235e": 5, "74361693e": 5, "44532312e": 5, "38087390e": 5, "50514320e": 5, "ptf_factor_1_test": 5, "ptf_factor_2_test": 5, "ptf_factor_3_test": 5, "ptf_empirical_test": 5, "304": [5, 16, 43, 165], "plot_13_factor_model": [5, 16, 165], "coupl": 6, "previou": [6, 12, 31, 33, 36, 40, 114, 115, 118, 119, 121, 122, 126, 131, 178], "introduc": [6, 26, 29, 30, 32, 33, 36, 39, 40, 56, 164], "merg": [6, 31, 39], "togeth": [6, 36, 127, 164, 176, 178], "size": [6, 15, 31, 33, 36, 39, 49, 101, 102, 103, 104, 106, 108, 115, 116, 121, 122, 126, 129, 130, 131, 145, 146, 147, 148, 149, 155, 160, 161, 164, 176, 180, 181], "momentum": [6, 49], "qualiti": 6, "factor_view": [6, 164, 176], "00039": [6, 9, 138], "vlue": [6, 49, 164, 176, 180], "00011": [6, 9, 40], "mtum": [6, 49, 164, 176, 180], "qual": [6, 49, 164, 176, 180], "00007": 6, "model_bl_factor": 6, "56000809e": 6, "42685508e": 6, "64005580e": 6, "97994501e": 6, "93188830e": 6, "69581067e": 6, "34097308e": 6, "19789402e": 6, "78013891e": 6, "56214479e": 6, "72469426e": 6, "04183614e": 6, "24556425e": 6, "98242729e": 6, "85688593e": 6, "83522508e": 6, "69632764e": 6, "02313728e": 6, "14759387e": 6, "32493866e": 6, "simpl": [6, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 168, 176], "model_factor": 6, "ptf_bl_factor_test": 6, "ptf_factor_test": 6, "528": [6, 16, 165], "plot_14_black_litterman_factor_model": [6, 16, 165], "find": [7, 8, 9, 10, 18, 23, 26, 31, 33, 36, 40, 47, 97, 99, 100, 101, 103, 106, 108, 111, 116, 140, 157, 168, 172, 176, 177], "transform": [7, 8, 11, 12, 13, 38, 39, 40, 43, 45, 55, 57, 59, 60, 132, 133, 134, 135, 139, 164, 168], "linear": [7, 8, 12, 13, 26, 56, 114, 115, 116, 118, 119, 121, 122, 126, 131, 135, 139, 141, 176], "prepar": [7, 8, 43, 135, 139], "split": [7, 8, 12, 29, 49, 50, 51, 52, 53, 93, 94, 95, 96, 107, 108, 119, 123, 127, 169, 175, 176], "avoid": [7, 8, 32, 36, 94, 96, 115, 123, 127, 132, 175, 176], "leakag": [7, 8, 32, 36, 94, 123, 127, 164, 173, 175, 176], "inversevolatil": [7, 18, 19, 36, 176], "head": [7, 8, 43, 49, 50, 51, 52, 53, 169], "amd": [7, 8, 43, 52], "bac": [7, 8, 43, 52], "unh": [7, 8, 43, 52], "wmt": [7, 8, 29, 30, 32, 43, 52], "xom": [7, 8, 43, 52], "date": [7, 8, 43, 49, 50, 51, 53, 178], "007576": [7, 8], "030303": [7, 8], "008045": [7, 8], "019355": [7, 8], "000000": [7, 8], "010079": [7, 8], "003759": [7, 8], "015500": [7, 8], "021355": [7, 8], "009868": [7, 8], "005201": [7, 8], "009933": [7, 8], "05": [7, 8, 9, 10, 14, 15, 16, 18, 19, 23, 26, 29, 30, 31, 32, 36, 39, 40, 43, 50, 51, 52, 53, 115, 116, 121, 122, 126, 138, 164], "003745": [7, 8], "031996": [7, 8], "021821": [7, 8], "043189": [7, 8], "010732": [7, 8], "005267": [7, 8], "003731": [7, 8], "005633": [7, 8], "020833": [7, 8], "013630": [7, 8], "015381": [7, 8], "007435": [7, 8], "016527": [7, 8], "024823": [7, 8], "026619": [7, 8], "020114": [7, 8], "row": [7, 8, 135], "column": [7, 8, 11, 12, 13, 19, 96, 107, 114, 115, 116, 118, 119, 121, 122, 126, 131, 132, 133, 134, 138, 178], "pass": [7, 8, 13, 47, 92, 96, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 172], "omit": [7, 8, 109], "here": [7, 8, 29, 32, 107, 109, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 168, 172, 176], "ration": [7, 178], "invers": [7, 18, 19, 29, 30, 36, 71, 107, 108, 109, 110, 118, 119, 120, 131, 138, 145, 146, 147, 148, 157, 164, 176], "volatil": [7, 12, 14, 18, 19, 23, 36, 49, 111, 120, 121, 131, 164, 176], "benchmark": [7, 8, 14, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 40, 120, 121, 122, 123, 127, 176], "vol": [7, 18, 19, 164], "03306735": [7, 18, 19], "02548697": [7, 18, 19], "03551377": [7, 18, 19], "0296872": [7, 18, 19], "06358463": [7, 18, 19], "05434705": [7, 18, 19], "04742354": [7, 18, 19], "07049715": [7, 18, 19], "03882539": [7, 18, 19], "06697905": [7, 18, 19], "05570808": [7, 18, 19], "05576851": [7, 18, 19], "04723274": [7, 18, 19], "06351213": [7, 18, 19], "05581397": [7, 18, 19], "0676481": [7, 18, 19], "02564642": [7, 18, 19], "03970752": [7, 18, 19], "05744543": [7, 18, 19], "06610498": [7, 18, 19], "tool": [7, 8, 164, 172, 175, 178], "call": [7, 8, 14, 29, 30, 32, 48, 58, 96, 115, 122, 123, 135, 172, 177, 178], "asarrai": [7, 8, 14, 15, 92, 175, 178], "same": [7, 8, 11, 12, 13, 18, 31, 33, 36, 40, 47, 107, 108, 109, 110, 114, 115, 116, 118, 119, 121, 122, 126, 127, 134, 138, 164, 167, 170, 171, 172, 176, 179, 180, 181], "00805152": 7, "01084089": 7, "00199173": 7, "00932275": 7, "00152747": 7, "01787286": 7, "class": [7, 8, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 172, 176, 177, 178, 181], "vast": [7, 8], "properti": [7, 8, 29, 30, 32, 94, 118, 119, 127, 129, 130, 131, 145, 146, 147, 148, 168, 172, 176], "summari": [7, 8, 9, 14, 15, 18, 19, 20, 23, 31, 33, 36, 39, 40, 94, 128, 129, 130, 131, 164, 168, 175, 177, 178], "annualized_sharpe_ratio": [7, 9, 10, 14, 15, 31, 33, 36, 39, 40, 64, 129, 130, 131, 164, 175, 176, 178, 179], "0399564198202886": 7, "0036976120249752": 7, "improv": [7, 8, 9, 18, 19, 20, 23, 31, 33, 36, 39, 40, 115, 142, 155, 177, 178], "everi": [7, 8, 11, 12, 13, 175, 176], "figur": [7, 8, 14, 15, 40, 47, 128, 129, 130, 131], "displai": [7, 8, 29, 30, 32, 36, 40, 47, 128, 129, 130, 131], "you": [7, 8, 9, 11, 12, 13, 15, 29, 58, 92, 95, 105, 107, 108, 109, 110, 115, 116, 121, 122, 126, 127, 138, 164, 168, 173, 176], "render": [7, 8], "http": [7, 8, 115, 116, 121, 122, 126, 164], "com": [7, 8, 164], "cumul": [7, 8, 12, 13, 18, 19, 20, 26, 31, 33, 36, 39, 40, 77, 78, 128, 129, 130, 131, 145, 146, 147, 148], "onli": [7, 8, 11, 12, 13, 14, 26, 29, 31, 33, 36, 39, 43, 47, 55, 56, 57, 58, 59, 60, 94, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 128, 132, 133, 134, 138, 139, 140, 168, 176, 178, 179], "document": [7, 8, 115, 116, 121, 122, 126], "sticker": [7, 8], "strategi": [7, 8, 18, 19, 20, 23, 96, 107, 123, 127], "evalu": [7, 8, 9, 14, 18, 19, 20, 23, 31, 33, 36, 40, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 172], "073": [7, 9, 14, 36], "064": [7, 8, 9, 18, 19, 20, 23], "18": [7, 9, 14, 15, 18, 19, 20, 23, 29, 33, 36, 40], "43": [7, 8, 9, 14, 15, 19, 23, 29, 36], "16": [7, 8, 9, 14, 15, 18, 19, 20, 29, 31, 36, 40, 165], "06": [7, 8, 9, 13, 16, 18, 19, 20, 23, 29, 49, 50, 164, 165], "012": [7, 8, 9, 14, 18, 19, 20, 23, 29], "010": [7, 8, 9, 15, 18, 19, 20], "14": [7, 8, 9, 14, 15, 16, 23, 29, 31, 40, 43], "56": [7, 9, 15, 18, 19, 29], "semi": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 84, 85, 106, 115, 122, 126, 129, 130, 131, 140, 164, 172, 176], "0063": [7, 9, 14, 15, 18, 20, 40], "0053": [7, 9, 14, 18, 19, 20], "standard": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 40, 49, 50, 51, 52, 53, 55, 57, 59, 60, 64, 65, 84, 86, 107, 122, 128, 129, 130, 131, 156, 157, 158, 169, 176], "deviat": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 40, 64, 65, 76, 82, 84, 86, 107, 115, 122, 126, 128, 129, 130, 131, 156, 157, 158, 164, 176], "17": [7, 8, 9, 10, 14, 16, 18, 19, 20, 23, 29, 40, 165], "72": [7, 9, 10, 14, 15, 19, 29, 36, 40, 50, 51], "00": [7, 8, 9, 14, 15, 16, 18, 19, 20, 21, 23, 24, 27, 29, 34, 36, 40, 41, 44, 46, 165], "79": [7, 9, 14, 18, 19, 23, 36, 53], "73": [7, 9, 14, 15, 18, 19, 20, 40], "54": [7, 8, 9, 14, 18, 19, 23, 29, 34, 40], "74": [7, 9, 14, 15, 50], "65": [7, 9, 14, 15, 18, 19, 29, 36, 40], "35": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 51], "evar": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 65, 114, 115, 118, 119, 122, 126, 129, 130, 131, 164, 176], "29": [7, 9, 14, 18, 19, 23, 29, 40, 49], "worst": [7, 8, 9, 14, 15, 18, 19, 20, 23, 26, 29, 36, 40, 64, 65, 67, 68, 69, 89, 91, 115, 116, 122, 126, 129, 130, 131, 133, 164, 181], "49": [7, 8, 9, 15, 18, 19, 23, 29, 36, 40], "81": [7, 8, 9, 14, 15, 19, 29, 40], "drawdown": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 66, 67, 69, 70, 78, 80, 88, 115, 122, 126, 129, 130, 131, 164, 176, 178], "34": [7, 8, 9, 15, 18, 19, 20, 23, 29], "83": [7, 9, 15, 18, 19, 36], "averag": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 39, 40, 48, 64, 65, 66, 103, 122, 126, 129, 130, 131, 132, 135, 164, 176], "edar": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 65, 114, 115, 118, 119, 122, 126, 129, 130, 131, 164, 176], "19": [7, 8, 9, 14, 18, 20, 23, 29, 36, 40, 41, 165], "53": [7, 8, 9, 14, 15, 36, 40, 49], "partial": [7, 8, 9, 11, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 74, 76, 84, 85, 95, 115, 122, 126, 129, 130, 131, 164, 176], "37": [7, 9, 14, 18, 20, 23, 29, 33, 34, 51, 165], "32": [7, 8, 9, 14, 15, 18, 19, 23, 29], "ulcer": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 88, 122, 126, 129, 130, 131, 164, 176], "048": [7, 9, 40, 50], "040": [7, 9, 14, 18, 19, 29], "gini": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 79, 83, 122, 126, 129, 130, 131, 164, 176], "98": [7, 9, 15, 18, 19, 36], "45": [7, 9, 14, 15, 18, 19, 23, 31, 36], "23": [7, 8, 9, 18, 20, 29, 109], "entrop": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 70, 72, 73, 115, 122, 126, 129, 130, 131, 164, 176], "measur": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 30, 31, 32, 33, 36, 39, 40, 56, 58, 92, 106, 115, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 133, 134, 164, 172, 175, 176, 177, 178], "fourth": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 75, 76, 129, 130, 131, 164], "central": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 75, 87, 129, 130, 131, 164], "000029": [7, 9], "000022": [7, 9, 18, 19], "000011": [7, 9, 18, 19, 20], "skew": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 114, 118, 119, 129, 130, 131, 164, 168], "kurtosi": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 114, 118, 119, 129, 130, 131, 164, 168], "89": [7, 9, 15, 29, 40, 51], "21": [7, 8, 9, 12, 14, 15, 18, 19, 29, 39, 40], "066": [7, 9], "063": [7, 9, 14, 18, 19, 29, 36], "sortino": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 129, 130, 131, 172], "092": [7, 9, 23], "088": [7, 8, 9, 18, 19, 23], "47": [7, 9, 20, 29, 49], "099": [7, 9], "098": [7, 9, 18, 19, 20], "047": [7, 9, 14, 19], "044": [7, 8, 9, 15, 18, 19, 23], "029": [7, 9, 19, 23, 40], "027": [7, 8, 9, 14, 18, 19, 20, 23, 29, 43], "00024": [7, 9, 23], "00021": [7, 9, 18, 19], "014": [7, 9, 14, 23, 29, 40, 51], "0073": [7, 9, 18, 19, 20, 29, 40], "0061": [7, 8, 9, 18, 19], "0071": [7, 9, 14], "0052": [7, 9, 18, 19, 20, 36], "calmar": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 129, 130, 131], "0022": [7, 9, 15], "0018": [7, 9, 14, 18, 19, 40], "024": [7, 8, 9, 14, 15, 29, 43], "0037": [7, 9, 14], "0032": [7, 9, 18, 19], "015": [7, 8, 9, 14, 15, 23, 29, 138], "016": [7, 9, 15, 18, 19, 20, 36, 40], "065": [7, 9, 18, 19, 20, 23], "effect": [7, 8, 9, 18, 19, 20, 23, 29, 30, 32, 71, 106, 107, 108, 109, 110, 131, 132], "912975728797552": 7, "460872007821077": [7, 18, 19], "underperform": [7, 8, 33, 138], "shortfal": [7, 8, 65, 68, 122, 129, 130, 131], "wa": [7, 8, 12, 33, 48, 56, 132, 133, 134], "toi": [7, 8, 33], "advanc": [7, 8, 11, 45, 94, 115, 116, 121, 122, 126], "concept": [7, 8, 70, 73, 129, 130, 131], "check": [7, 8, 47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 159, 176], "other": [7, 8, 11, 15, 19, 29, 31, 62, 107, 108, 109, 110, 128, 129, 130, 131, 132, 135, 138, 172], "132": [7, 9, 16, 165], "plot_1_maximum_sharpe_ratio": [7, 16, 165], "min": [8, 48, 122, 126, 176], "16562529e": 8, "41742527e": 8, "64888981e": 8, "47358386e": 8, "35927671e": 8, "91035768e": 8, "58350612e": 8, "10319630e": 8, "89793803e": 8, "14733606e": 8, "92817471e": 8, "13607836e": 8, "79844555e": 8, "26155697e": 8, "04585759e": 8, "52708811e": 8, "20106233e": 8, "41726679e": 8, "01024013e": 8, "18289085e": 8, "equal": [8, 12, 14, 18, 23, 26, 28, 29, 31, 32, 33, 34, 36, 45, 47, 105, 115, 116, 117, 118, 120, 121, 122, 123, 126, 128, 164, 165], "ha": [8, 12, 14, 18, 19, 23, 29, 30, 31, 32, 47, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 118, 119, 121, 122, 123, 126, 127, 132, 133, 134, 138, 139, 140, 155, 164, 172, 176], "impact": [8, 12, 13, 14, 30, 114, 115, 118, 119, 121, 122, 126, 131], "still": [8, 173], "00354605": 8, "00342423": 8, "00105085": 8, "01069377": 8, "00542224": 8, "01217676": 8, "021741551637176403": 8, "025061083134673378": 8, "052": [8, 9, 29, 36], "069": [8, 9, 15, 23], "07": [8, 9, 12, 16, 23, 29, 41, 49, 50, 165], "0090": [8, 9], "26": [8, 9, 15, 36, 40, 41], "94": [8, 9, 15, 23, 29, 36], "0046": [8, 9, 29], "0060": [8, 9, 23], "52": [8, 9, 15, 23, 49], "68": [8, 9, 36], "76": [8, 9, 15, 20, 53], "61": [8, 9, 14, 40], "71": [8, 9, 14, 23, 29, 40], "51": [8, 9, 14, 15, 20, 23, 29, 39, 51], "62": [8, 9, 14, 15, 29], "77": [8, 9, 14, 23, 29, 51], "70": [8, 9, 15, 23, 29, 36, 47, 50, 115, 116, 121, 122, 126], "67": [8, 9, 23, 53], "48": [8, 9, 14, 19, 23, 29, 36, 49], "31": [8, 9, 14, 15, 31, 36, 39, 40, 50, 51], "050": [8, 9, 14, 36], "92": [8, 9, 15, 23, 29, 50], "000016": [8, 9], "000027": [8, 23], "000008": [8, 9], "000013": [8, 9, 14, 15, 23], "0013": [8, 11, 14, 15, 40, 115, 116, 121, 122, 126], "028": [8, 9, 23], "055": [8, 9, 14, 29], "87": [8, 9, 14, 29], "076": [8, 9, 29], "40": [8, 9, 14, 18, 20, 23, 29, 36, 39, 50, 178], "085": [8, 9, 29], "097": [8, 9, 20, 23, 40], "039": [8, 9, 29, 50, 138], "045": [8, 9, 15, 18, 20, 23, 40], "00017": [8, 9, 36], "00023": [8, 9, 14, 19, 20, 23], "011": [8, 9, 20, 29, 36], "013": [8, 9, 14, 15, 19, 20, 23, 29, 36], "0064": [8, 9, 15, 23], "0072": [8, 9, 14, 23, 29], "0035": [8, 9], "0051": [8, 9, 15, 23], "0015": [8, 9, 40, 178], "0020": [8, 9, 20, 23, 40], "017": [8, 9, 19], "026": [8, 9, 14, 20, 23, 29, 40], "0025": [8, 9, 178], "0033": [8, 9, 15, 18, 20, 23, 29], "056": [8, 9, 29], "461275191312059": 8, "999999999999993": [8, 23, 29], "except": [8, 128, 129, 130, 131], "613": [8, 16, 165], "plot_2_minimum_cvar": [8, 16, 165], "ensembl": [9, 10, 36, 113, 127, 164, 176], "belong": [9, 10, 177], "pareto": [9, 128, 134], "font": 9, "perfmeasur": [9, 10, 14, 15, 43, 92, 123, 127, 129, 130, 131, 134, 177, 178], "ratiomeasur": [9, 10, 14, 15, 31, 33, 36, 39, 40, 123, 127, 129, 130, 131, 133, 164, 172, 175, 177, 178], "efficient_frontier_s": [9, 14, 15, 43, 122, 177], "entir": [9, 14, 107], "shape": [9, 10, 12, 13, 14, 15, 29, 30, 32, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 176, 177, 179, 181], "population_test": [9, 10, 14, 29, 30, 32], "add": [9, 11, 12, 13, 31, 33, 36, 39, 40, 114, 115, 116, 118, 119, 121, 122, 126], "concaten": 9, "set_portfolio_param": [9, 10, 128, 177], "plot_measur": [9, 10, 14, 15, 43, 128, 177], "annualized_vari": [9, 10, 18, 43, 65, 129, 130, 131, 177], "annualized_mean": [9, 10, 14, 15, 43, 63, 129, 130, 131, 177], "color_scal": [9, 10, 14, 15, 128], "hover_measur": [9, 10, 14, 15, 128], "max_drawdown": [9, 10, 14, 15, 65, 114, 115, 118, 119, 122, 126, 129, 130, 131, 177, 178], "annualized_sortino_ratio": [9, 10, 14, 15, 31, 64, 129, 130, 131], "91785162": 9, "93000375": 9, "9401232": 9, "95027284": 9, "96861483": 9, "98463685": 9, "9983657": 9, "00992555": 9, "01943433": 9, "02702131": 9, "032813": 9, "03704654": 9, "03993049": 9, "04204356": 9, "0430764": 9, "04289017": 9, "04158213": 9, "03774863": 9, "02943678": 9, "02092595": 9, "01241175": 9, "00356473": 9, "97964062": 9, "93749217": 9, "87986871": 9, "78090544": 9, "68550154": 9, "59858003": 9, "53398775": 9, "55455742": 9, "ptf0": 9, "ptf1": [9, 29, 30, 39, 178], "ptf2": [9, 30, 39, 178], "ptf3": [9, 178], "ptf4": 9, "ptf5": 9, "ptf6": 9, "ptf7": 9, "ptf8": 9, "ptf9": 9, "ptf10": 9, "ptf11": 9, "ptf12": 9, "ptf13": 9, "ptf14": 9, "ptf15": 9, "ptf16": 9, "ptf17": 9, "ptf18": 9, "ptf19": 9, "ptf20": 9, "ptf21": 9, "ptf22": 9, "ptf23": 9, "ptf24": 9, "ptf25": 9, "ptf26": 9, "ptf27": 9, "ptf28": 9, "ptf29": 9, "062": 9, "068": [9, 14, 19, 20, 36, 40, 43], "071": 9, "074": [9, 15, 29], "079": [9, 29], "082": 9, "091": 9, "094": [9, 29, 34, 165], "096": [9, 23], "054": [9, 29, 40, 49], "057": [9, 18, 20, 29], "059": 9, "061": 9, "070": [9, 15, 36], "075": [9, 14, 29], "077": [9, 29, 36], "078": 9, "080": [9, 50], "083": 9, "086": [9, 29], "087": [9, 29], "081": [9, 29], "090": [9, 15], "66": [9, 15, 18, 20, 23, 29, 40, 50, 51], "38": [9, 15, 29, 40, 51], "82": [9, 15, 23, 29, 36, 51], "99": [9, 15, 19, 29], "59": [9, 14, 15, 23, 40], "24": [9, 14, 23, 29, 36, 40], "27": [9, 15, 29, 36], "42": [9, 14, 15, 29, 36], "86": [9, 14, 15, 18, 20, 29, 33, 40], "36": [9, 14, 18, 20, 29, 33, 51], "93": [9, 14, 29], "46": [9, 14, 15, 18, 20, 23, 29, 36, 39, 40, 49], "90": [9, 15, 29], "97": [9, 14, 15, 18, 20, 29, 36, 50], "41": [9, 14, 18, 20, 29, 51, 108], "018": 9, "019": [9, 14], "020": [9, 14], "022": [9, 15, 23, 29, 36], "023": [9, 14, 29, 40, 43], "025": [9, 15, 19, 29], "030": 9, "032": [9, 15, 40, 43], "034": [9, 14, 40], "038": [9, 40], "053": [9, 29], "084": [9, 29], "0088": [9, 14], "0089": 9, "0092": 9, "0094": 9, "0096": [9, 36], "0099": [9, 15], "035": [9, 14, 15, 36], "043": [9, 20], "067": [9, 19, 40, 49], "44": [9, 15, 29, 31, 40], "55": [9, 14, 15, 23], "84": [9, 14, 20, 29, 36], "63": [9, 15, 18, 20, 29], "50": [9, 11, 12, 14, 15, 19, 29, 31, 36, 40, 51, 114, 118, 119], "88": [9, 33, 36, 40, 108], "75": [9, 11, 14, 15, 23, 29, 36, 40], "85": [9, 14, 15, 40], "80": [9, 15, 19, 40], "0054": [9, 14, 18, 20, 36], "0055": [9, 15], "0056": [9, 19], "0058": [9, 20], "0062": [9, 23], "0065": 9, "0068": 9, "0076": [9, 14, 29], "0080": [9, 29], "0085": [9, 14], "021": [9, 15, 36, 43], "041": [9, 18, 20, 29, 43], "058": [9, 29], "0045": [9, 15, 29], "0047": [9, 29, 36], "0048": [9, 36, 40], "0049": [9, 23], "0074": [9, 29, 40], "0077": [9, 19, 29], "0082": 9, "0086": 9, "0091": 9, "69": [9, 14, 15, 20, 29, 36, 50, 53], "96": [9, 14, 50], "57": [9, 14, 19, 23], "91": [9, 15, 29, 40, 51], "64": [9, 14, 15, 29, 31, 36, 39, 40, 50], "106": 9, "060": 9, "046": [9, 29, 50], "049": [9, 36], "051": [9, 23, 36, 40], "072": [9, 16, 23, 165], "100": [9, 11, 14, 15, 31, 36, 39, 40, 50, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 114, 115, 116, 118, 119, 121, 122, 126, 140, 157, 177], "000017": 9, "000018": 9, "000019": 9, "000021": [9, 14, 19], "000024": 9, "000026": 9, "000028": [9, 23], "000031": 9, "000034": 9, "000037": [9, 29], "000041": [9, 29], "000045": 9, "000050": 9, "000055": 9, "000062": 9, "000070": 9, "000079": [9, 29], "000088": 9, "000097": 9, "00012": [9, 10], "00016": 9, "00027": [9, 29], "00047": 9, "00085": 9, "000020": [9, 14], "000023": [9, 18, 20], "000033": 9, "000035": 9, "000040": [9, 29], "000043": [9, 29], "000046": 9, "000054": 9, "000058": 9, "00014": 9, "00037": 9, "00077": 9, "000006": [9, 40], "000007": [9, 40], "000009": [9, 15, 23], "000010": [9, 19, 36], "000012": [9, 20], "000014": [9, 15, 36], "000038": 9, "000056": 9, "00031": 9, "0014": [9, 178], "000015": [9, 36], "000057": 9, "000098": 9, "00042": 9, "0011": [9, 40], "042": [9, 15, 50], "089": [9, 18, 20], "093": [9, 13, 16, 19, 165], "095": 9, "031": [9, 15], "033": [9, 40], "00022": [9, 18, 20], "00025": [9, 15], "00026": [9, 29], "00028": [9, 29], "00029": 9, "00030": 9, "00032": 9, "00033": 9, "00034": 9, "00035": 9, "00036": 9, "00038": 9, "00040": 9, "00041": 9, "00043": 9, "00044": 9, "00045": 9, "00046": 9, "00048": 9, "00018": 9, "00019": 9, "00020": 9, "0078": [9, 14, 29], "0084": 9, "0079": [9, 23], "0095": [9, 36], "0100": 9, "0098": [9, 15, 36], "0097": [9, 15], "0093": 9, "0066": [9, 40], "0067": [9, 19], "0069": [9, 15], "0070": [9, 29, 40], "0075": [9, 40], "0041": [9, 14, 40], "0044": [9, 14], "0050": 9, "0026": [9, 36], "0059": 9, "0039": [9, 23], "0028": [9, 14], "0024": [9, 23, 29], "0021": [9, 14, 15, 19], "0034": [9, 15, 29, 40], "0031": [9, 36], "0030": [9, 178], "0027": [9, 14, 15], "0040": [9, 15, 36, 40], "0043": [9, 15], "0036": [9, 19], "0023": [9, 14, 29, 40], "0019": [9, 15, 18, 20, 36], "0017": [9, 14, 15], "0016": [9, 15, 40], "0012": [9, 14, 15, 36], "0083": 9, "0081": [9, 36], "0029": [9, 15, 31], "0038": [9, 40], "0087": 9, "037": [9, 14, 20, 36, 40], "200105310175214": 9, "591675649894958": 9, "914061803583557": 9, "200575932248872": 9, "669076363622692": 9, "042905188108048": 9, "296356964248307": 9, "407690290599575": 9, "368335377715717": 9, "182061194357152": 9, "864764715990296": 9, "43758398806516": 9, "936428254316073": 9, "399360341488464": 9, "843069929154527": 9, "305664213686036": 9, "788185892520897": 9, "322661810340446": 9, "894001701422519": 9, "474123745524875": 9, "083026522037701": 9, "687782011560027": 9, "40239485319279": 9, "022087577333468": 9, "6008387080754516": 9, "202081924170507": 9, "5798056188194143": 9, "020193584925389": 9, "5152184941723748": 9, "0000001319361242": 9, "instead": [9, 10, 14, 30, 50, 51, 58, 95, 96, 107, 108, 109, 110, 118, 123, 127, 135, 138, 172, 175, 176], "bound": [9, 14, 70, 73, 114, 115, 116, 118, 119, 121, 122, 126, 129, 130, 131], "min_return": [9, 121, 122, 126], "under": [9, 10, 13, 14, 15, 106, 107, 108, 109, 110, 148, 164, 168, 173, 176], "252": [9, 12, 13, 14, 15, 31, 33, 36, 39, 40, 43, 129, 130, 131, 164, 168], "fit_predict": [9, 10, 33, 43, 47, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127], "plot_3_efficient_fronti": [9, 16, 165], "2015": [10, 33, 106], "1700238781664583": 10, "satisfi": 10, "correspond": [10, 47, 76, 96, 100, 107, 123, 127, 128, 129, 130, 131, 132, 133, 134, 175, 178], "want": [10, 12, 13, 176], "analyz": [10, 14, 15, 18, 19, 23, 29, 30, 31, 32, 36], "altern": [10, 169], "maxim": [10, 14, 15, 23, 31, 32, 33, 36, 40, 47, 121, 122, 124, 164, 176], "idea": 10, "feasibl": [10, 11], "09718550832245014": 10, "rang": [10, 40, 107, 108, 109, 110, 128, 172, 177], "max_cdar": [10, 122], "linspac": 10, "0972": 10, "stop": [10, 107, 128], "num": 10, "deform": 10, "variance_upp": 10, "max_measur": [10, 128], "map": [10, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 168], "ravel": 10, "meshgrid": 10, "maximize_return": [10, 14, 15, 122, 124], "max_vari": [10, 14, 122], "raise_on_failur": [10, 115, 116, 121, 122, 126], "z": [10, 128, 132, 177], "to_surfac": [10, 128], "true": [10, 14, 29, 30, 32, 40, 43, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 77, 78, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 159, 164, 168, 172, 177], "update_layout": [10, 14, 15, 40], "scene_camera": 10, "ey": 10, "measures_mean": [10, 14, 31, 33, 36, 39, 128], "measures_std": [10, 31, 33, 36, 39, 128], "345087054431556": 10, "10292071071001885": 10, "9038840095066056": 10, "06751700747046248": 10, "153": [10, 16, 165], "plot_4_mean_variance_cdar": [10, 16, 165], "max_weight": [11, 114, 115, 116, 118, 119, 121, 122, 126, 164], "min_budget": [11, 115, 116, 121, 122], "max_budget": [11, 115, 116, 121, 122], "max_short": [11, 115, 116, 121, 122], "max_long": [11, 115, 116, 121, 122], "linear_constraint": [11, 115, 116, 121, 122, 126, 164], "left_inequ": [11, 115, 116, 121, 122, 126], "right_inequ": [11, 115, 116, 121, 122, 126], "select": [11, 12, 13, 14, 15, 31, 39, 41, 107, 123, 127, 132, 133, 134, 145, 146, 165, 173, 176, 178], "readabl": [11, 12, 13], "fulli": [11, 115, 116, 121, 122, 179, 180], "invest": [11, 12, 42, 44, 45, 115, 116, 121, 122, 131, 139, 165, 168], "term": [11, 31, 33, 115, 116, 121, 122, 134, 140, 168], "sum": [11, 115, 116, 120, 121, 122, 125, 126, 135, 138, 162, 163, 168, 178], "22768876": 11, "56566507": 11, "20664617": 11, "none": [11, 12, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 74, 76, 82, 84, 85, 92, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 146, 147, 148, 150, 176], "float": [11, 12, 13, 14, 15, 40, 55, 56, 57, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 97, 99, 100, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 139, 145, 146, 147, 148, 149, 157], "neutral": [11, 115, 116, 121, 122], "11391513": 11, "28246101": 11, "10362386": 11, "If": [11, 12, 13, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 77, 78, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 164, 168, 169], "must": [11, 12, 13, 92, 93, 94, 95, 105, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 129, 130, 131, 132, 133, 134, 138, 139, 159, 168], "30000034617916516": 11, "06832987": 11, "16956647": 11, "06210401": 11, "control": [11, 26, 95, 96, 107, 121, 122, 138, 178], "respect": [11, 48, 107, 108, 109, 110], "like": [11, 12, 13, 26, 29, 47, 48, 54, 55, 56, 57, 58, 59, 60, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 131, 132, 133, 134, 138, 139, 140, 141, 145, 146, 147, 148, 164, 167, 168, 170, 171, 175, 176, 179, 180, 181], "dictionari": [11, 12, 13, 114, 115, 116, 118, 119, 121, 122, 126, 127, 131, 138, 172], "equival": [11, 14, 29, 114, 115, 116, 118, 119, 121, 122, 126, 172], "inf": [11, 107, 114, 115, 116, 118, 119, 121, 122, 126], "appli": [11, 12, 13, 55, 57, 59, 60, 114, 115, 116, 118, 119, 121, 122, 123, 126, 128, 131, 142, 155, 159, 168, 172], "its": [11, 12, 13, 14, 15, 40, 48, 58, 73, 107, 108, 109, 110, 114, 115, 116, 118, 119, 120, 121, 122, 126, 129, 130, 131, 132, 133, 134, 138, 149, 155, 156, 167, 168, 170, 171, 176, 178, 180, 181], "kei": [11, 12, 13, 107, 114, 115, 116, 118, 119, 121, 122, 126, 127, 128, 131, 138], "pair": [11, 12, 13, 96, 114, 115, 116, 118, 119, 121, 122, 126, 131, 132, 134, 138, 175], "datafram": [11, 12, 13, 49, 50, 51, 52, 53, 114, 115, 116, 118, 119, 121, 122, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 167, 170, 171, 176, 178, 179, 180, 181], "sell": [11, 12, 114, 115, 116, 118, 119, 121, 122, 126], "when": [11, 12, 13, 14, 29, 30, 32, 40, 47, 55, 56, 57, 58, 59, 60, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 121, 122, 123, 126, 127, 132, 133, 134, 135, 138, 139, 140, 141, 142, 172, 175, 178], "don": 11, "t": [11, 12, 13, 15, 29, 48, 105, 107, 108, 109, 110, 114, 115, 118, 119, 121, 122, 124, 126, 135, 138, 145, 146, 147, 148, 149, 155, 168, 176, 178, 181], "assign": [11, 48, 94, 114, 115, 116, 118, 119, 121, 122, 126, 134], "specifi": [11, 14, 15, 19, 50, 51, 54, 58, 68, 96, 97, 98, 107, 108, 109, 110, 123, 127, 129, 130, 131, 136, 137, 138, 143, 144], "pre": [11, 39, 40, 134], "pipelin": [11, 38, 45, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 172, 179], "know": 11, "process": [11, 94, 96, 109, 134, 175], "where": [11, 29, 30, 48, 94, 96, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 118, 119, 121, 128, 132, 133, 134, 155, 168, 172, 175, 176, 178], "prove": [11, 26, 111, 116, 176], "abov": [11, 12, 13, 14, 15, 32, 47, 97, 99, 100, 101, 103, 106, 108, 114, 115, 116, 118, 119, 121, 122, 126, 132, 135, 157, 164, 168, 172], "200": [11, 40, 41, 115, 116, 121, 122, 126, 165], "allow": [11, 36, 100, 107, 108, 109, 110, 114, 118, 119, 127, 172, 176], "0000000000000002": 11, "22770271": 11, "56559255": 11, "20670474": 11, "22788246": 11, "56548525": 11, "20663228": 11, "leverag": 11, "150": 11, "000000000000002": 11, "74197781": 11, "49999867": 11, "75802352": 11, "neg": [11, 114, 115, 116, 118, 119, 121, 122, 132, 134], "less": [11, 19, 31, 95, 115, 116, 121, 122, 126, 138, 142, 168], "22770146": 11, "56558315": 11, "20671539": 11, "refer": [11, 14, 47, 55, 56, 57, 59, 60, 71, 94, 99, 100, 106, 108, 109, 111, 116, 118, 119, 123, 131, 134, 135, 138, 139, 145, 146, 147, 148, 155, 157, 160, 161, 164, 168, 176], "string": [11, 47, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140], "follow": [11, 19, 40, 48, 94, 115, 116, 121, 122, 126, 132, 133, 134, 138, 164, 166, 167, 168, 170, 171, 172, 175, 176, 179, 180, 181], "pattern": [11, 115, 116, 121, 122, 126, 138], "ref1": [11, 115, 116, 121, 122, 126], "ref2": [11, 115, 116, 121, 122, 126], "ref3": [11, 115, 116, 121, 122, 126], "industri": 11, "sector": 11, "capit": 11, "technologi": 11, "mega": 11, "cap": [11, 105], "big": 11, "mix": [11, 13, 114, 115, 116, 118, 119, 121, 122, 126], "would": [11, 13, 14, 36, 114, 115, 118, 119, 121, 122, 126, 132, 133, 134, 164, 168, 176, 178], "suffici": 11, "case": [11, 15, 26, 92, 96, 115, 116, 121, 122, 126, 142, 155, 168, 178, 181], "66666667e": 11, "17341817e": 11, "33333333e": 11, "vector": [11, 12, 13, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 111, 114, 115, 116, 118, 119, 121, 122, 126, 128, 129, 131, 132, 133, 134, 138, 147, 156, 158, 162, 163, 168, 175, 176, 178], "b": [11, 12, 106, 115, 116, 121, 122, 126, 134, 138, 176, 178], "cdot": [11, 12, 13, 105, 114, 115, 116, 118, 119, 121, 122, 126, 131, 178], "w": [11, 12, 13, 14, 15, 71, 105, 114, 115, 116, 118, 119, 121, 122, 124, 126, 131, 147, 168, 176, 178], "leq": [11, 101, 102, 115, 116, 121, 122, 126, 145, 146, 147, 148, 149, 181], "364": [11, 16, 43, 165], "plot_5_weight_constraint": [11, 16, 165], "tc": 12, "fix": [12, 107, 138], "incur": 12, "bui": 12, "transaction_cost": [12, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 131, 164], "_cost": [12, 114, 115, 118, 119, 121, 122, 126, 131], "sum_": [12, 13, 14, 48, 114, 115, 118, 119, 121, 122, 126, 131, 155, 168], "c_": [12, 48, 114, 115, 118, 119, 121, 122, 126, 131, 155], "w_": [12, 13, 14, 114, 115, 118, 119, 121, 122, 126, 131, 155, 168, 178], "_prev_": [12, 114, 115, 118, 119, 121, 122, 126, 131], "previous_weight": [12, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 131], "_return": [12, 13, 114, 115, 118, 119, 121, 122, 126, 131, 176], "af": [12, 13, 114, 115, 118, 119, 121, 122, 126, 131], "n_asset": [12, 13, 39, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 71, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 177], "accord": [12, 40, 96, 123, 127, 128, 132, 133, 134, 175, 176], "formula": [12, 105, 108, 109, 111, 114, 115, 118, 119, 121, 122, 126], "express": [12, 13, 96, 114, 115, 116, 118, 119, 121, 122, 126, 131, 138], "notion": [12, 168], "durat": 12, "crucial": 12, "sinc": [12, 29, 94, 164, 175], "005": 12, "correl": [12, 18, 29, 30, 32, 38, 41, 45, 55, 56, 57, 59, 60, 94, 106, 118, 119, 132, 134, 156, 157, 158, 164, 165, 175], "month": [12, 14, 15, 31, 33, 36, 40], "should": [12, 33, 54, 97, 98, 107, 108, 109, 110, 135, 136, 137, 143, 144, 168, 172, 178], "howev": [12, 13, 14, 29, 33, 40, 97, 99, 100, 101, 103, 106, 108, 114, 115, 118, 119, 121, 122, 126, 168], "year": [12, 13, 14, 15, 26, 31, 33, 36, 40, 43, 164, 168], "busi": [12, 14, 15, 31, 33, 36, 40, 168], "dai": [12, 13, 14, 15, 31, 33, 36, 39, 40, 168], "so": [12, 13, 26, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 178], "order": [12, 13, 29, 47, 114, 115, 118, 119, 121, 122, 126, 128, 130, 132, 155], "account": [12, 18], "divid": [12, 64, 107, 108, 109, 110, 129, 130, 131], "walkforward": [12, 13, 14, 15, 31, 33, 36, 40, 164, 178], "cross_val_predict": [12, 13, 14, 15, 31, 33, 36, 39, 40, 127, 164, 175, 178], "util": [12, 13, 29, 36, 72, 107, 108, 109, 110, 116, 122, 124, 129, 130, 131, 164, 176, 177], "avers": [12, 13, 72, 73, 105, 116, 122, 129, 130, 131, 176], "maximize_util": [12, 13, 36, 122, 124], "17733231e": [12, 13], "78775169e": [12, 13], "82266765e": [12, 13], "002": [12, 178], "posit": [12, 36, 40, 97, 99, 100, 101, 103, 106, 108, 114, 115, 116, 118, 119, 121, 122, 126, 140, 157, 159], "model_tc": 12, "11868007e": 12, "40979832e": 12, "88131852e": 12, "induc": [12, 13], "toward": [12, 13, 111], "05865225e": 12, "37192080e": 12, "05865087e": 12, "model_tc2": 12, "ones": [12, 14, 15], "33333336": 12, "3333332": 12, "33333345": 12, "notic": [12, 13, 29, 30], "becom": [12, 123, 127, 178], "non": [12, 14, 18, 26, 33, 36, 40, 56, 77, 79, 96, 97, 99, 100, 101, 103, 106, 108, 115, 116, 121, 122, 128, 129, 130, 131, 134, 145, 146, 147, 148, 157, 162, 164, 175, 176], "neglig": [12, 178], "due": [12, 33, 40, 96, 97, 99, 100, 101, 103, 106, 108, 141, 157, 178], "rebalanc": [12, 168, 178], "28439988": 12, "04893332": 12, "rebal": [12, 13], "re": [12, 13, 107, 108, 109, 110, 173], "latest": [12, 13], "walk": [12, 13, 15, 95, 164], "forward": [12, 13, 15, 95, 164], "analysi": [12, 13, 15, 39, 40, 108, 111, 157, 177, 178], "holding_period": [12, 13], "fitting_period": [12, 13], "cv": [12, 13, 14, 15, 28, 31, 34, 36, 39, 40, 45, 94, 95, 96, 107, 123, 127, 164, 165, 172, 175, 176], "train_siz": [12, 13, 14, 15, 31, 33, 36, 40, 95, 164], "pred1": [12, 13], "retriev": [12, 115, 116, 121, 122, 126], "result": [12, 13, 96, 107, 108, 109, 110, 141, 168], "pred2": [12, 13], "new_portfolio": 12, "append": [12, 29, 30, 32, 128, 130, 177], "cannot": [12, 79, 129, 130, 131, 168], "function": [12, 14, 15, 26, 40, 72, 92, 96, 107, 115, 116, 121, 122, 124, 126, 128, 129, 130, 131, 145, 146, 147, 148, 164, 168, 172, 176, 177], "anymor": 12, "handl": [12, 26, 113, 116, 176], "depend": [12, 33, 56, 58, 72, 92, 106, 115, 116, 121, 122, 126, 129, 130, 131, 132, 145, 146, 164, 168], "fold": [12, 31, 33, 36, 39, 94, 95, 96, 107, 123, 127, 172, 175, 178], "pred3": 12, "visual": [12, 13], "success": [12, 13, 157], "exclud": [12, 94, 95], "unrealist": 12, "634": [12, 16, 43, 165], "plot_6_transaction_cost": [12, 16, 165], "mf": 13, "management_fe": [13, 114, 115, 116, 117, 118, 119, 120, 121, 122, 125, 126, 131], "_fee": [13, 114, 115, 118, 119, 121, 122, 126, 131], "f_": [13, 114, 115, 118, 119, 121, 122, 126, 131], "anoth": [13, 14, 50, 51, 114, 115, 118, 119, 121, 122, 126, 131, 168, 172, 178, 180], "approach": [13, 14, 15, 114, 115, 118, 119, 121, 122, 126, 132, 138, 164, 172, 176, 180], "direcli": 13, "net": [13, 107, 114, 115, 118, 119, 121, 122, 126], "determinist": [13, 114, 115, 118, 119, 121, 122, 126], "amount": 13, "uncertain": [13, 114, 115, 118, 119, 121, 122, 126], "lead": [13, 114, 115, 118, 119, 121, 122, 123, 126, 127, 168, 172, 175], "unwant": [13, 114, 115, 118, 119, 121, 122, 126], "bia": [13, 111, 114, 115, 118, 119, 121, 122, 126, 131], "usual": [13, 100, 172], "per": [13, 14, 15, 36, 40, 123, 128, 141, 164], "annum": 13, "suppos": [13, 132], "trade": [13, 111, 164, 178], "model_mf": 13, "74787861e": 13, "43028265e": 13, "25212125e": 13, "29453703e": 13, "05150748e": 13, "29453598e": 13, "yearli": [13, 168], "dure": [13, 30, 47, 55, 56, 57, 58, 59, 60, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 119, 121, 122, 123, 126, 127, 132, 133, 134, 138, 139, 140, 176], "plot_7_management_fe": [13, 16, 165], "tend": [14, 39, 106, 115, 121, 122, 164], "increas": [14, 26, 39, 40, 115, 116, 121, 122, 126, 172], "out": [14, 15, 31, 32, 33, 36, 39, 40, 55, 57, 59, 60, 107, 115, 119, 121, 122, 123, 127, 128, 164, 176], "sampl": [14, 15, 26, 31, 32, 33, 36, 39, 40, 55, 57, 59, 60, 94, 95, 96, 107, 108, 109, 110, 111, 115, 116, 119, 121, 122, 123, 127, 132, 133, 134, 145, 146, 148, 155, 164, 172, 176], "stabil": [14, 31, 115, 116, 121, 122, 126, 155], "l1_coef": [14, 36, 115, 121, 122, 172], "penal": [14, 107, 115, 121, 122], "norm": [14, 107, 108, 109, 110, 115, 121, 122], "_coef": [14, 115, 121, 122], "vert": [14, 71, 115, 121, 122, 131], "vert_": [14, 71, 115, 121, 122, 131], "l2_coef": [14, 115, 121, 122, 164, 172], "coeffici": [14, 108, 109, 110, 115, 121, 122], "zero": [14, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 115, 121, 122, 129, 130, 131, 132, 133, 134, 145, 146, 147, 148, 157, 162, 178], "cardin": [14, 48, 115, 121, 122, 155], "diversif": [14, 24, 36, 115, 121, 122, 131, 164, 165], "reduct": 14, "doe": [14, 107, 108, 169, 172], "necessarili": 14, "equat": 14, "larg": [14, 97, 99, 100, 101, 103, 106, 108, 109, 134, 157, 164, 178], "exacerb": 14, "overfit": [14, 15, 123, 127, 164, 173], "cross": [14, 32, 40, 93, 94, 95, 96, 107, 123, 127, 172, 176], "valid": [14, 32, 40, 93, 94, 95, 96, 107, 123, 127, 172, 173, 176], "gridsearchcv": [14, 15, 31, 33, 36, 40, 92, 164, 172], "ftse": [14, 15, 31, 36, 39, 40, 50], "2000": [14, 15, 31, 36, 39, 40, 50, 116], "2023": [14, 15, 31, 36, 39, 40, 50, 51, 106, 164], "graph_object": [14, 15], "scipi": [14, 15, 47, 48, 164, 172], "stat": [14, 15, 164, 172, 177], "loguniform": [14, 164, 172], "randomizedsearchcv": [14, 15, 164, 172], "load_ftse100_dataset": [14, 15, 31, 36, 39, 40, 169], "metric": [14, 15, 29, 30, 31, 32, 36, 40, 58, 116], "make_scor": [14, 15, 31, 36, 40, 172], "constrain": [14, 15, 176], "model_l1": 14, "001": [14, 26, 36, 131, 172, 178], "model_l2": 14, "annualized_standard_devi": [14, 65, 129, 130, 131], "ran": 14, "along": 14, "therefor": [14, 134, 157, 168], "avg": [14, 15, 36, 40], "len": 14, "ptf": [14, 31, 33, 36, 131], "nonzero_asset": [14, 131], "filter": [14, 128], "clearli": 14, "down": [14, 29, 30, 32, 118, 119, 176], "made": 14, "section": [14, 15, 47, 48], "consid": [14, 15, 31, 131, 134, 147, 172], "roll": [14, 15, 31, 33, 36, 39, 40, 129, 130, 131], "preced": [14, 15, 31], "highest": [14, 15, 23, 31, 132, 133, 164, 172], "score": [14, 15, 31, 36, 40, 92, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 172], "ref_model": 14, "grid_search": [14, 15, 36, 40, 172], "param_grid": [14, 15, 31, 33, 36, 40, 164, 172], "best_model": [14, 15, 164, 172], "best_estimator_": [14, 15, 31, 33, 36, 40, 164, 172], "00035714285714285714": 14, "among": [14, 15, 115, 122, 123, 126, 127, 176], "3x3": 14, "grid": [14, 15, 107], "These": [14, 15, 168, 180], "continu": [14, 15, 36, 135, 168, 172], "better": [14, 15, 29, 30, 31, 32, 115, 116, 118, 119, 121, 122, 126, 129, 130, 131, 176], "advantag": [14, 15, 172], "random": [14, 15, 58, 94, 95, 99, 132, 145, 146, 147, 162, 163, 176, 177], "log": [14, 107, 108, 109, 110, 126, 168, 172, 176], "uniform": [14, 15, 26, 116, 162, 163, 172, 176], "version": [14, 47, 92, 107, 108, 109, 110, 132, 133, 134, 172, 173], "space": [14, 26, 116, 131, 176], "1e": [14, 97, 99, 100, 101, 103, 106, 107, 108, 115, 116, 121, 122, 126, 157, 164], "mirror": [14, 172], "search": [14, 15, 33, 107], "uniformli": [14, 15, 172], "randomized_search": [14, 15, 164], "param_distribut": [14, 15, 164, 172], "n_iter": [14, 15, 172], "return_train_scor": [14, 40], "best_model_rd": 14, "022624553411095448": 14, "cv_result": [14, 15, 40], "cv_results_": [14, 15, 40, 107, 172], "param_l2_coef": 14, "astyp": [14, 15], "sort_idx": [14, 15], "argsort": [14, 15], "y_train_mean": 14, "mean_train_scor": [14, 40], "y_train_std": 14, "std_train_scor": [14, 40], "y_test_mean": [14, 15], "mean_test_scor": [14, 15, 40, 107], "y_test_std": 14, "std_test_scor": [14, 40, 107], "scatter": [14, 15, 40, 128], "mode": [14, 15, 40, 107], "line": [14, 15, 29, 30, 32, 40, 47], "color": [14, 15, 29, 30, 32, 40, 47, 128], "rgb": [14, 15, 40], "119": [14, 40, 50], "180": [14, 40], "width": [14, 40], "showlegend": [14, 40], "fillcolor": [14, 40], "rgba": [14, 40], "fill": [14, 40], "tonexti": [14, 40], "255": [14, 15, 40], "165": [14, 15, 40], "add_vlin": [14, 15, 40], "best_params_": [14, 15, 40], "line_width": [14, 15, 40], "line_dash": [14, 15, 40], "dash": [14, 15, 40], "line_color": [14, 15, 40], "green": [14, 15, 40], "titl": [14, 15, 40, 128, 164], "xaxis_titl": [14, 15, 40], "coef": 14, "yaxis_titl": [14, 15, 40], "update_yax": [14, 15, 40], "tickformat": [14, 15, 40], "around": [14, 107], "six": 14, "That": [14, 115], "clear": [14, 128, 129, 130, 131], "indict": 14, "three": [14, 15, 31, 33, 36, 40, 106, 111, 132, 169], "pred_no_reg": 14, "pred_reg": 14, "un": 14, "perform": [14, 15, 31, 33, 36, 38, 41, 45, 47, 63, 94, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 135, 141, 142, 155, 159, 164, 165, 168, 172, 173, 175, 178, 179], "poorli": [14, 15], "Its": [14, 15, 123], "significantli": [14, 157], "upper": [14, 15, 70, 73, 114, 115, 116, 118, 119, 121, 122, 126, 129, 130, 131], "lowest": [14, 15, 132, 133], "00084": 14, "00013": 14, "00087": 14, "00081": 14, "00071": 14, "00094": 14, "00079": [14, 15], "nb": [14, 15, 36, 40], "multi": [14, 15, 94, 106, 128, 130, 134, 177], "period": [14, 15, 114, 115, 118, 119, 121, 122, 126, 128, 130, 131, 135, 168], "454": [14, 16, 165], "plot_8_regular": [14, 16, 165], "ellipsoid": [15, 115, 122, 145, 146, 147, 148, 149, 176, 181], "known": [15, 48, 58, 164, 176], "fall": [15, 176], "umbrella": 15, "instabl": [15, 39, 115, 122, 176, 181], "aris": [15, 115, 122, 176, 181], "hat": [15, 111, 115, 122, 145, 146, 147, 148, 149, 181], "kappa_": [15, 115, 122], "lvert": [15, 115, 122], "s_": [15, 115, 122, 135, 168], "frac": [15, 48, 58, 71, 115, 122, 124, 131, 135, 147, 148, 155, 168, 176], "rvert_": [15, 115, 122], "kappa": [15, 115, 122, 145, 146, 147, 148, 149, 181], "confid": [15, 67, 68, 69, 70, 72, 73, 89, 115, 116, 122, 126, 129, 130, 131, 138, 145, 146, 147, 148, 149], "region": [15, 115, 122, 145, 146, 147, 148, 149], "empiricalmuuncertaintyset": [15, 181], "bootstrapmuuncertaintyset": [15, 164, 176, 181], "uncertainty_set": [15, 164, 176, 181], "loss": [15, 89, 92, 129, 130, 131], "over": [15, 23, 26, 107, 116, 121, 129, 130, 131, 135, 162, 163, 168, 172, 176], "max_cvar": [15, 122], "model_uncertainti": 15, "mu_uncertainty_set_estim": [15, 115, 122, 164, 176, 181], "confidence_level": [15, 145, 146, 147, 148, 176, 181], "cvar_beta": [15, 115, 116, 122, 126, 129, 130, 131], "level": [15, 54, 67, 68, 69, 70, 72, 73, 89, 96, 97, 98, 115, 116, 122, 123, 126, 127, 128, 129, 130, 131, 136, 137, 143, 144, 145, 146, 147, 148], "embed": 15, "doubl": 15, "mu_uncertainty_set_estimator__confidence_level": 15, "model_no_uncertainti": 15, "2x3x3": 15, "loc": [15, 29], "scale": [15, 107, 108, 109, 110, 115, 116, 121, 122, 126, 128, 129, 130, 131, 134, 168], "best_model_r": 15, "param_mu_uncertainty_set_estimator__confidence_level": 15, "3f": 15, "update_xax": 15, "pred_no_uncertainti": 15, "pred_uncertainti": 15, "pred_uncertainty_r": 15, "006": 15, "0057": [15, 36], "107": 15, "00010": [15, 138], "000082": 15, "00080": 15, "00075": 15, "00068": 15, "00062": 15, "00074": 15, "00092": 15, "223": [15, 16, 33, 165], "plot_9_uncertainty_set": [15, 16, 165], "390": 16, "execut": [16, 21, 24, 27, 34, 37, 41, 44, 46, 96, 165], "file": [16, 21, 24, 27, 34, 37, 41, 44, 46, 165], "auto_exampl": [16, 21, 24, 27, 34, 37, 41, 44, 46], "1_mean_risk": [16, 165], "mem": [16, 21, 24, 27, 34, 37, 41, 44, 46, 165], "mb": [16, 21, 24, 27, 34, 37, 41, 44, 46, 165], "concern": [17, 22, 25, 28, 35, 45, 173], "riskbudget": [17, 18, 19, 20, 32, 33, 45, 164, 176], "pariti": [17, 21, 28, 30, 32, 34, 45, 118, 119, 126, 165], "0413538": [18, 20], "03210798": [18, 20], "03372651": [18, 20], "03785032": [18, 20], "06105326": [18, 20], "04432829": [18, 20], "04252121": [18, 20], "06593503": [18, 20], "03451835": [18, 20], "06469404": [18, 20], "0541895": [18, 20], "05209546": [18, 20], "04535287": [18, 20], "06568125": [18, 20], "05103901": [18, 20], "06894629": [18, 20], "04046571": [18, 20], "04667685": [18, 20], "05627134": [18, 20], "06119293": [18, 20], "ptf_model_train": [18, 19, 23], "plot_contribut": [18, 19, 29, 30, 131, 178], "And": [18, 19, 30, 111, 126, 176], "taken": 18, "ptf_bench_train": [18, 19, 23], "ptf_model_test": [18, 19, 20, 23], "ptf_bench_test": [18, 19, 20, 23, 26], "995820707977355": [18, 20], "432": [18, 21, 165], "plot_1_risk_parity_vari": [18, 21, 165], "chose": 19, "remain": [19, 29, 30, 32, 47, 48, 132, 133, 134, 176], "risk_budget": [19, 126], "asset_nam": 19, "06173109": 19, "0325744": 19, "03336025": 19, "03994727": 19, "06348992": 19, "00930168": 19, "04579238": 19, "06880723": 19, "00765283": 19, "06700223": 19, "05537244": 19, "05430778": 19, "04828169": 19, "07033671": 19, "05371219": 19, "06892884": 19, "04230966": 19, "04897376": 19, "06251597": 19, "06560167": 19, "possibl": [19, 20, 23, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 172, 176, 180], "72810558608303": 19, "775": [19, 21, 43, 165], "plot_2_risk_busgeting_cvar": [19, 21, 165], "shrunkcovari": [20, 167], "04774369": 20, "04370262": 20, "04503192": 20, "04647661": 20, "05284765": 20, "04907272": 20, "04852997": 20, "05374008": 20, "04539423": 20, "05360779": 20, "05178561": 20, "05137849": 20, "04927095": 20, "05375844": 20, "05112862": 20, "0541766": 20, "04755055": 20, "04988132": 20, "05199178": 20, "05293035": 20, "basic": 20, "000025": 20, "921023753343427": 20, "202": [20, 21, 165], "plot_3_risk_parity_ledoit_wolf": [20, 21, 165], "409": 21, "2_risk_budget": [21, 165], "budget": [21, 115, 116, 121, 122, 126, 164, 165, 172], "maximumdiversif": [22, 23, 36, 45, 176], "33456624e": 23, "74138185e": 23, "93952573e": 23, "57560762e": 23, "11892006e": 23, "98154300e": 23, "50727312e": 23, "41147667e": 23, "90340137e": 23, "11478008e": 23, "82592031e": 23, "02737024e": 23, "79050966e": 23, "95048460e": 23, "48699105e": 23, "10847215e": 23, "08086158e": 23, "45171911e": 23, "51323607e": 23, "35632022e": 23, "685271602584908": 23, "452": [23, 24, 43, 50, 165], "plot_1_maximum_divesif": [23, 24, 165], "3_maxiumum_diversif": [24, 165], "distributionallyrobustcvar": [25, 26, 45, 176], "construct": [26, 106, 116, 172, 176], "wasserstein": [26, 116, 176], "ball": [26, 116, 176], "multivari": [26, 108, 116, 168, 176], "discret": [26, 116, 172, 176], "probabl": [26, 116, 176], "center": [26, 49, 50, 51, 52, 53, 107, 108, 109, 110, 116, 169, 176], "within": [26, 30, 116, 118, 127, 155, 172, 176], "mohajerin": 26, "esfahani": [26, 116, 176], "kuhn": [26, 116, 176], "2018": [26, 51, 94, 116, 118], "piecewis": [26, 116, 176], "rockafellar": [26, 116], "uryasev": [26, 116], "reformul": [26, 116, 176], "finit": [26, 116, 131, 176], "convex": [26, 62, 108, 109, 110, 115, 116, 126, 131, 164, 176, 178], "program": [26, 116, 145, 146, 147, 148, 176], "advis": [26, 173], "solver": [26, 107, 115, 116, 121, 122, 126, 176], "high": [26, 40, 92, 97, 99, 100, 101, 103, 106, 108, 111, 116, 123, 127, 134, 138, 164, 176], "mosek": [26, 116, 168, 176], "open": [26, 164], "clarabel": [26, 115, 116, 121, 122, 126], "converg": [26, 107, 115, 142], "speed": 26, "radiu": [26, 116], "wasserstein_ball_radiu": [26, 116, 176], "bring": 26, "closer": 26, "2020": [26, 30, 99, 100, 118, 119, 123, 176, 181], "four": 26, "model1": [26, 29, 30, 32, 36, 39, 176], "model2": [26, 29, 30, 32, 36, 39, 176], "model3": [26, 29, 30, 32, 36], "model4": [26, 29, 32, 36], "0001": [26, 107, 164, 172], "84531907e": 26, "01910610e": 26, "81629430e": 26, "56967308e": 26, "67249461e": 26, "07087663e": 26, "97503410e": 26, "42882219e": 26, "84348572e": 26, "53379955e": 26, "85983398e": 26, "38460704e": 26, "62545194e": 26, "42768380e": 26, "90123331e": 26, "06982611e": 26, "16112642e": 26, "18803064e": 26, "36241349e": 26, "34914228e": 26, "ptf_model1_test": 26, "ptf_model2_test": 26, "ptf_model3_test": 26, "ptf_model4_test": 26, "534": [26, 27, 165], "plot_1_distributionally_robust_cvar": [26, 27, 165], "4_distributionally_robust_cvar": [27, 165], "distribution": [27, 116, 164, 165], "base": [28, 29, 36, 40, 45, 47, 54, 61, 93, 94, 97, 98, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 134, 136, 137, 143, 144, 147, 148, 155, 161, 164], "contribut": [28, 34, 36, 45, 47, 118, 126, 131, 134, 164, 165, 178], "hrp": [28, 29, 30, 32, 34, 45, 123, 165, 176], "v": [28, 34, 45, 48, 135, 139, 155, 165, 168], "herc": [28, 30, 34, 45, 165, 176], "nest": [28, 34, 45, 47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 165, 172], "combinatori": [28, 34, 45, 93, 94, 96, 165, 176], "purg": [28, 34, 45, 94, 165], "hierarchicalriskpar": [29, 31, 166, 176], "develop": [29, 30, 32, 118, 119, 123, 155, 164, 173, 176], "marco": [29, 32, 94, 119, 123, 176], "lopez": [29, 32, 119, 123, 176], "de": [29, 32, 55, 57, 59, 60, 94, 99, 100, 119, 123, 176], "prado": [29, 32, 55, 57, 59, 60, 94, 99, 100, 119, 123, 176], "algorithm": [29, 30, 32, 47, 48, 97, 99, 100, 101, 103, 106, 108, 109, 118, 119, 123, 132, 134, 140, 145, 146, 157, 176], "cluster": [29, 30, 31, 33, 34, 100, 114, 118, 119, 123, 127, 155, 165], "tree": [29, 30, 32, 118, 119, 123, 176], "emploi": [29, 31, 119, 176], "seriat": [29, 119, 176], "rearrang": [29, 119, 176], "leaf": [29, 119, 176], "step": [29, 30, 40, 118, 119, 132, 138, 168, 176], "recurs": [29, 30, 118, 119, 176], "bisect": [29, 30, 118, 119, 176], "sub": [29, 36, 107, 108, 109, 110, 119, 127, 128, 176], "topmost": [29, 119, 176], "travers": [29, 119, 176], "top": [29, 30, 40, 118, 119, 164, 173, 176], "manner": [29, 119, 172, 176], "origin": [29, 32, 47, 107, 108, 109, 110, 119, 123, 176], "paper": [29, 32, 106, 119, 123, 176], "multipl": [29, 31, 33, 36, 39, 94, 96, 115, 119, 123, 127, 175, 176, 178], "ward": [29, 30, 31, 32, 33, 47, 48, 118, 119, 176], "stabl": [29, 30, 31, 32, 107, 118, 119, 128, 173, 176], "hierarchicalclust": [29, 30, 31, 32, 33, 114, 118, 119, 123, 166], "linkagemethod": [29, 30, 31, 32, 33, 47], "kendalldist": [29, 30, 31, 32, 33, 170, 176], "pearson": [29, 30, 32, 59, 164], "05033705": 29, "02773558": 29, "05289115": 29, "03632272": 29, "059202": 29, "02483767": 29, "03790179": 29, "07464383": 29, "03497807": 29, "08622477": 29, "06308422": 29, "04094166": 29, "03144452": 29, "08277551": 29, "04421773": 29, "04807705": 29, "02596219": 29, "07596741": 29, "0393462": 29, "06310889": 29, "blue": [29, 30, 32, 47], "distinct": [29, 30, 32, 47], "hierarchical_clustering_estimator_": [29, 30, 114, 118, 119], "plot_dendrogram": [29, 30, 32, 47], "heatmap": [29, 30, 32, 47], "horizont": [29, 30, 32], "axi": [29, 30, 32, 128, 129, 130, 131], "link": [29, 30, 32], "upsid": [29, 30, 32, 74, 76, 82, 84, 85, 115, 122, 126, 129, 130, 131], "u": [29, 30, 32, 48, 115, 116, 121, 122, 126, 138, 155, 164], "height": [29, 30, 32], "indic": [29, 30, 32, 71, 94, 95, 96, 107, 129, 130, 131, 132, 133, 134], "hd": [29, 30, 32, 43], "cophenet": [29, 30, 32, 47], "reorder": [29, 30, 32, 47], "outlin": [29, 30, 32, 47], "yellow": [29, 30, 32, 47], "greatli": [29, 30, 32], "affect": [29, 30, 32, 100, 108, 109], "choic": [29, 30, 32, 107, 111, 168, 172], "span": 29, "suffer": [29, 30, 32], "chain": [29, 30, 32], "doesn": [29, 109], "regardless": 29, "chosen": [29, 31, 33, 36, 40, 55, 123, 127, 172, 176], "hierarchical_clustering_estim": [29, 30, 31, 114, 118, 119], "linkage_method": [29, 30, 31, 32, 47], "been": [29, 30, 106, 127, 132, 133, 134, 155, 164], "bellow": 29, "reason": [29, 135], "earlier": 29, "third": [29, 30, 32, 87], "kendal": [29, 30, 32, 57, 60, 106, 164, 176], "distance_estim": [29, 30, 31, 32, 33, 47, 114, 118, 119, 123, 166, 176], "new": [29, 32, 47, 48, 107, 108, 109, 110, 128, 132, 133, 134, 177, 179, 180], "close": [29, 49, 50, 51, 52, 53, 107, 147, 168, 169], "statist": [29, 47, 106, 118, 155, 168], "dtype": [29, 31, 33, 36, 39, 47, 107], "000078": 29, "000073": 29, "000074": 29, "000090": 29, "000039": 29, "560177235001134": 29, "30105753780178": 29, "533289375090764": 29, "272263586429105": 29, "plot_1_hrp_cvar": [29, 34, 165], "hierarchicalequalriskcontribut": [30, 31, 36, 166, 176], "thoma": [30, 118, 176], "raffinot": [30, 118, 176], "divis": [30, 118, 176], "naiv": [30, 118, 132, 164], "exploit": [30, 33, 118, 176], "05814153": 30, "04927288": 30, "09420898": 30, "05726203": 30, "02409012": 30, "08083036": 30, "08070112": 30, "02983878": 30, "06656721": 30, "02730592": 30, "01757816": 30, "01140416": 30, "0933616": 30, "04726087": 30, "02170548": 30, "02428936": 30, "00827991": 30, "02575021": 30, "14895433": 30, "03319698": 30, "reli": 30, "oppos": [30, 139], "greater": [30, 76, 100, 107, 115, 116, 121, 122, 126, 129, 130, 131], "veri": [30, 107, 127, 168, 172, 176], "concentr": [30, 71, 131, 164], "alreadi": [30, 127, 169], "conclud": 30, "appropri": [30, 49, 50, 51, 52, 53, 132, 133, 134, 169], "confirm": 30, "highli": [30, 38, 41, 45, 132, 164, 165, 168], "164": [30, 34, 165], "plot_2_herc_cdar": [30, 34, 165], "combinatorialpurgedcv": [31, 33, 36, 39, 96, 123, 127, 164, 175, 176], "distanc": [31, 33, 47, 48, 107, 108, 109, 110, 114, 118, 119, 123, 151, 155, 164, 166, 176], "pearsondist": [31, 33, 114, 118, 119, 123, 166, 170, 176], "model_hrp": 31, "model_herc": 31, "simul": [31, 33, 36, 40], "grid_search_hrp": [31, 33], "hierarchical_clustering_estimator__linkage_method": 31, "complet": [31, 48], "grid_search_herc": 31, "pred_hrp": 31, "pred_herc": 31, "display_sub_ptf_nam": [31, 33, 36, 40, 128], "4f": [31, 33], "0141": 31, "0159": 31, "path": [31, 33, 36, 39, 93, 94, 96, 123, 127, 175, 176], "histor": [31, 33, 36, 39, 67, 68, 89, 101, 104, 129, 130, 131], "combin": [31, 33, 36, 39, 94, 108, 109, 110, 127, 138, 172, 175], "n_fold": [31, 33, 36, 39, 94, 95, 164], "n_test_fold": [31, 33, 36, 39, 94, 164], "choos": [31, 33, 36, 39, 115, 116, 121, 122, 126], "obtain": [31, 33, 36, 39, 70, 73, 129, 130, 131, 139, 142], "approxim": [31, 33, 36, 39, 109, 164, 168], "observ": [31, 33, 36, 39, 47, 49, 50, 51, 52, 53, 67, 68, 69, 83, 89, 94, 95, 101, 102, 103, 104, 106, 107, 108, 109, 110, 128, 129, 130, 131, 135, 138, 175, 178], "1967": [31, 39], "embargo": [31, 33, 36, 39, 94, 175], "245": 31, "105": 31, "120": 31, "int64": [31, 33, 36, 39, 47], "plot_distribut": [31, 33, 36, 39, 128, 164, 177], "measure_list": [31, 33, 36, 39, 128, 164, 177], "tag_list": [31, 36, 39, 128], "n_bin": [31, 36, 39, 58, 128, 160, 161], "pred": [31, 36, 40, 92, 172, 175], "std": [31, 33, 36, 39, 156, 158], "0149": 31, "0005": 31, "0157": 31, "word": 31, "slightli": [31, 33, 40, 97, 99, 100, 101, 103, 106, 108], "do": [31, 172], "567": [31, 34, 165], "plot_3_hrp_vs_herc": [31, 34, 165], "nestedclustersoptim": [32, 33, 164, 166, 176], "nco": [32, 34, 123, 165, 176], "hierarch": [32, 34, 36, 47, 114, 118, 119, 123, 164, 165, 166], "kmean": [32, 123, 176], "etc": [32, 123, 164, 167, 168, 170, 171, 176, 178, 179, 180, 181], "inner": [32, 123, 127, 176], "whole": [32, 123, 176], "outer": [32, 36, 123, 127, 135, 176], "intra": [32, 123], "inter": [32, 123], "kfold": [32, 94, 96, 107, 123, 127, 164, 172, 175, 176], "form": [32, 47, 48, 54, 55, 56, 57, 58, 59, 60, 79, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 166], "inner_estim": [32, 33, 123, 164, 176], "outer_estim": [32, 33, 123, 164, 176], "34583417e": 32, "11063384e": 32, "22116860e": 32, "55247336e": 32, "75792540e": 32, "00648530e": 32, "72965814e": 32, "25072628e": 32, "62233910e": 32, "16513980e": 32, "74283462e": 32, "48338528e": 32, "63900807e": 32, "19327658e": 32, "00331177e": 32, "79312466e": 32, "30720714e": 32, "98356116e": 32, "48490337e": 32, "34908730e": 32, "clustering_estimator_": [32, 123], "clustering_estim": [32, 33, 123, 176], "replac": [32, 40, 97, 99, 100, 101, 103, 106, 108, 115, 116, 121, 122, 126, 155], "ani": [32, 47, 114, 115, 116, 118, 119, 121, 122, 126, 127, 128, 164, 167, 170, 171, 172, 176, 178, 179, 180, 181], "n_init": [32, 176], "auto": [32, 176], "24469824e": 32, "53108476e": 32, "11966029e": 32, "81525219e": 32, "05714660e": 32, "50720277e": 32, "07161401e": 32, "80879989e": 32, "23811220e": 32, "62534803e": 32, "39186672e": 32, "74337373e": 32, "98906005e": 32, "87184938e": 32, "69821247e": 32, "03875706e": 32, "28609406e": 32, "07474815e": 32, "15174617e": 32, "31754063e": 32, "921": [32, 34, 165], "plot_4_nco": [32, 34, 165], "hyperparamet": 33, "gridsearch": 33, "model_nco": 33, "inner_estimator__risk_measur": 33, "clustering_estimator__linkage_method": 33, "pred_nco": 33, "ann": 33, "0235": 33, "0376": 33, "1006": 33, "0507476631082548": 33, "recombin": [33, 36, 94], "present": [33, 47, 54, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 132, 133, 134, 138, 139], "determin": [33, 96, 107, 111, 123, 127, 130, 155, 168], "chanc": 33, "inform": [33, 47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 176], "lost": 33, "159": [33, 34, 43, 165], "plot_5_nco_grid_search": [33, 34, 165], "905": 34, "5_cluster": [34, 165], "stack": [35, 37, 45, 127, 164, 165], "stackingoptim": [36, 176], "output": [36, 96, 123, 127, 132, 133, 134, 175, 176, 177], "individu": [36, 127, 134, 141, 145, 146, 176], "strength": [36, 127, 176], "estimators_": [36, 127], "final_estimator_": [36, 127], "empiricalcovari": [36, 40, 99, 100, 105, 111, 139, 167], "ledoitwolf": [36, 167], "model_stack": 36, "final_estim": [36, 127, 176], "stake": 36, "demonstr": [36, 40, 168, 176], "work": [36, 40, 47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "model2__prior_estimator__covariance_estim": 36, "model3__l1_coef": 36, "model4__risk_measur": 36, "gini_mean_differ": [36, 65, 129, 130, 131], "calmar_ratio": [36, 64, 129, 130, 131, 164], "pred_stack": 36, "cdar_ratio": [36, 64, 129, 130, 131, 176], "5f": 36, "00263": 36, "00122": 36, "00305": 36, "00125": 36, "2980": 36, "298": 36, "190": 36, "independ": [36, 56, 168, 172], "model_nam": 36, "extend": [36, 43, 106, 128, 175, 177], "435": [36, 37, 165], "plot_1_stack": [36, 37, 165], "6_ensembl": [37, 165], "drop": [38, 41, 45, 127, 132, 135, 164, 165], "best": [38, 41, 45, 107, 133, 164, 165, 172], "dropcorrel": [39, 179], "remov": [39, 94, 100, 127, 128, 132, 133, 134, 175], "befor": [39, 40, 45, 94, 95, 107, 108, 109, 110, 128, 134, 178], "set_config": [39, 40, 107, 108, 109, 110, 164, 179], "pre_select": [39, 40, 164, 172, 179], "11477958e": 39, "92866673e": 39, "99620661e": 39, "10752495e": 39, "16248113e": 39, "14940375e": 39, "84053635e": 39, "22729906e": 39, "38469617e": 39, "65046123e": 39, "67810934e": 39, "03431023e": 39, "79558938e": 39, "85394928e": 39, "75757760e": 39, "92149669e": 39, "30675668e": 39, "89240131e": 39, "31550592e": 39, "74499181e": 39, "13808863e": 39, "84365114e": 39, "89248471e": 39, "30767706e": 39, "08797657e": 39, "02335296e": 39, "81108516e": 39, "40097067e": 39, "18843086e": 39, "64841618e": 39, "09425878e": 39, "84470288e": 39, "12558991e": 39, "82822281e": 39, "41661311e": 39, "27306716e": 39, "20495386e": 39, "09690756e": 39, "38515810e": 39, "68742795e": 39, "12489362e": 39, "53601183e": 39, "48139841e": 39, "63365545e": 39, "94502152e": 39, "11970704e": 39, "84876780e": 39, "74340049e": 39, "79623520e": 39, "74507544e": 39, "80823151e": 39, "28133405e": 39, "98247368e": 39, "54382763e": 39, "96891040e": 39, "72770463e": 39, "20563054e": 39, "42845847e": 39, "36085745e": 39, "52171782e": 39, "12141020e": 39, "00959883e": 39, "80653860e": 39, "14316461e": 39, "pipeplin": [39, 40], "transform_output": [39, 40, 164, 179], "panda": [39, 40, 128, 129, 130, 131, 132, 133, 134, 164, 167, 170, 171, 176, 178, 179, 180, 181], "threshold": [39, 47, 56, 97, 99, 100, 101, 103, 106, 108, 132, 134, 135, 157, 179], "named_step": 39, "17183301e": 39, "99627408e": 39, "75907600e": 39, "59687833e": 39, "82564384e": 39, "92880653e": 39, "52217700e": 39, "13239659e": 39, "76926114e": 39, "62035863e": 39, "94836568e": 39, "20549958e": 39, "08919173e": 39, "64696218e": 39, "58312606e": 39, "20210608e": 39, "25426519e": 39, "83697624e": 39, "84916828e": 39, "91846109e": 39, "96049980e": 39, "05201907e": 39, "54482537e": 39, "99284245e": 39, "91471166e": 39, "98391244e": 39, "23117943e": 39, "98558904e": 39, "40973224e": 39, "60306246e": 39, "91741539e": 39, "73658093e": 39, "65079997e": 39, "67279164e": 39, "53270264e": 39, "56311233e": 39, "32678922e": 39, "48213167e": 39, "17212380e": 39, "51475217e": 39, "12051211e": 39, "42766417e": 39, "17359260e": 39, "77319466e": 39, "40287802e": 39, "07120393e": 39, "800": 39, "786": 39, "126": 39, "210": 39, "pred_1": 39, "annualized_factor": [39, 129, 130, 131], "pred_2": 39, "sharpe_ratio": [39, 64, 123, 127, 129, 130, 131, 133, 164, 175, 176, 177, 178], "451": [39, 41, 165], "plot_1_drop_correl": [39, 41, 165], "selectkextrem": [40, 164, 172, 179], "k": [40, 94, 96, 107, 133, 135, 145, 147, 149, 154, 155, 168, 172, 175, 181], "given": [40, 69, 72, 89, 107, 108, 109, 110, 123, 127, 128, 129, 130, 131, 133, 138, 148, 156, 168, 172], "assembl": 40, "graph_obj": 40, "nearest": [40, 48, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 140, 157], "theori": [40, 58, 97, 99, 100, 101, 103, 106, 108, 160, 164], "definit": [40, 97, 99, 100, 101, 103, 106, 108, 140, 157, 159], "psd": [40, 97, 99, 100, 101, 103, 106, 108], "point": [40, 48, 97, 99, 100, 101, 103, 106, 107, 108, 128, 157], "inaccuraci": [40, 97, 99, 100, 101, 103, 106, 108], "just": 40, "often": [40, 94, 97, 99, 100, 101, 103, 106, 108, 175], "occur": [40, 97, 99, 100, 101, 103, 106, 108], "scorer": [40, 92], "custom": [40, 92, 115, 116, 121, 122, 126, 168, 172], "wai": [40, 121, 122, 172], "lambda": [40, 122, 124, 168, 176], "pre_selection__k": 40, "vertic": 40, "param_pre_selection__k": 40, "decreas": [40, 172], "000005": 40, "000096": 40, "00097": 40, "0042": 40, "plot_2_select_best_perform": [40, 41, 165], "651": 41, "7_pre_select": [41, 165], "horizon": [42, 44, 45, 139, 165, 168], "explor": [43, 107, 172, 176, 177], "procedur": [43, 168], "simplifi": [43, 168], "data": [43, 47, 49, 50, 51, 52, 53, 94, 95, 96, 101, 102, 103, 104, 106, 107, 108, 109, 110, 116, 123, 127, 132, 133, 134, 135, 139, 140, 161, 164, 169, 172, 173, 175, 176, 178, 180], "bby": [43, 164, 180], "cvx": [43, 115, 164, 180], "jnj": 43, "ko": [43, 164, 180], "lly": 43, "mrk": 43, "msft": [43, 164, 180], "pep": 43, "pfe": 43, "pg": 43, "rrc": [43, 164], "264": 43, "125": 43, "599": 43, "144": 43, "991": [43, 49], "391": 43, "117": 43, "438": 43, "394": 43, "235": 43, "658": 43, "215": 43, "384": 43, "738": 43, "860": 43, "322": 43, "310": [43, 51], "653": 43, "266": 43, "000": [43, 46], "636": 43, "161": 43, "910": 43, "121": [43, 50], "508": 43, "203": 43, "282": 43, "386": [43, 50], "692": 43, "853": 43, "267": 43, "938": 43, "537": 43, "847": 43, "283": [43, 50], "128": 43, "459": 43, "522": 43, "192": 43, "621": [43, 51], "397": 43, "646": 43, "777": 43, "301": 43, "987": 43, "268": 43, "812": 43, "148": 43, "113": 43, "423": 43, "536": 43, "174": 43, "549": 43, "387": 43, "581": [43, 50], "709": 43, "288": 43, "595": 43, "966": 43, "269": 43, "463": 43, "147": 43, "820": 43, "229": [43, 50], "102": 43, "481": 43, "220": [43, 50], "181": 43, "393": 43, "664": 43, "644": 43, "investment_horizon": [43, 139, 168], "3m": 43, "1y": 43, "10y": 43, "is_log_norm": [43, 139, 168], "diverg": 43, "longer": [43, 129, 130, 131], "955": [43, 44, 165], "plot_1_investment_horizon": [43, 44, 165], "8_data_prepar": [44, 165], "recommend": [45, 168, 172], "move": [45, 178], "auto_examples_python": 45, "zip": 45, "auto_examples_jupyt": 45, "max_clust": 47, "int": [47, 55, 56, 57, 58, 59, 60, 83, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 119, 121, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 145, 146, 155, 157, 160, 161, 162, 163], "coher": [47, 70, 73, 129, 130, 131, 164, 178], "r": [47, 131, 168, 178], "flat": 47, "gap": [47, 107, 118, 155], "calcul": [47, 48, 107], "linkag": [47, 48, 114, 118, 119, 123, 155, 176], "hierarchi": [47, 48, 118, 119], "descript": [47, 48, 122, 126], "attribut": [47, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 167, 170, 171, 176, 180, 181], "n_clusters_": 47, "labels_": [47, 123], "ndarrai": [47, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 131, 132, 133, 134, 138, 139, 140, 141, 142, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "label": [47, 94, 96, 175], "linkage_matrix_": [47, 166], "condensed_distance_": 47, "binom": 47, "d": [47, 48, 58, 106, 148, 155], "condens": 47, "n_features_in_": [47, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 119, 121, 122, 123, 126, 127, 132, 133, 134, 138, 139, 140], "seen": [47, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 119, 121, 122, 123, 126, 127, 132, 133, 134, 138, 139, 140, 168], "feature_names_in_": [47, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 118, 119, 121, 122, 123, 126, 127, 132, 133, 134, 138, 139, 140], "applic": [47, 49, 50, 51, 52, 53, 100, 118, 155, 169, 172], "yue": [47, 118, 155], "wang": [47, 118, 155], "wei": [47, 118, 155], "2009": [47, 118, 145, 146, 147, 148, 155], "ignor": [47, 54, 55, 56, 57, 58, 59, 60, 95, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 138, 139], "Not": [47, 54, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 138, 139], "convent": [47, 54, 55, 56, 57, 58, 59, 60, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 138, 139], "self": [47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 176], "kwarg": [47, 54, 92, 97, 98, 128, 136, 137, 143, 144], "n_sampl": [47, 94, 107, 108, 109, 110, 132, 133, 134], "n_featur": [47, 94, 107, 108, 109, 110, 132, 133, 134], "argument": [47, 48, 54, 92, 97, 98, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 136, 137, 143, 144, 172], "get_metadata_rout": [47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "metadata": [47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "rout": [47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "mechan": [47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "metadatarequest": [47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "encapsul": [47, 54, 55, 56, 57, 58, 59, 60, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "get_param": [47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 172], "deep": [47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 172], "bool": [47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 77, 78, 92, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 157, 159], "subobject": [47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "param": [47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "dendrogram": [47, 118, 119, 176], "exist": [47, 95, 107, 108, 109, 110, 115, 116, 121, 122, 126, 169], "otherwis": [47, 77, 78, 92, 95, 97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 111, 115, 116, 121, 122, 126, 128, 129, 130, 131, 133, 157, 159], "well": [47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 164, 175, 176], "latter": [47, 54, 55, 56, 57, 58, 59, 60, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148], "__": [47, 54, 55, 56, 57, 58, 59, 60, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 172], "instanc": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 132, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 172], "str": [48, 50, 51, 62, 63, 64, 65, 96, 107, 108, 109, 110, 112, 114, 115, 116, 118, 119, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 150, 177], "dist": [48, 107, 108, 109, 110], "j": [48, 56, 94, 122, 168, 176], "farthest": 48, "voor": 48, "hee": 48, "ij": 48, "upgma": 48, "forest": 48, "wpgma": 48, "centroid": 48, "c_t": 48, "_2": 48, "upgmc": 48, "median": [48, 123, 127], "math": 48, "wpgmc": 48, "entri": [48, 164], "newli": 48, "join": [48, 135], "unus": 48, "increment": 48, "quanliti": 49, "usmv": [49, 176, 180], "low": [49, 92, 134, 138], "come": [49, 50, 51, 52, 53, 107, 169], "yahoo": [49, 50, 51, 52, 53, 169], "public": [49, 50, 51, 52, 53, 164, 169], "adjust": [49, 50, 51, 52, 53, 131, 169], "after": [49, 50, 51, 52, 53, 94, 95, 123, 169, 172], "dividend": [49, 50, 51, 52, 53, 169], "multipli": [49, 50, 51, 52, 53, 109, 169], "adher": [49, 50, 51, 52, 53, 169], "research": [49, 50, 51, 52, 53, 106, 145, 146, 147, 148, 169], "crsp": [49, 50, 51, 52, 53, 169], "2264": 49, "df": [49, 50, 51, 52, 53], "n_observ": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 145, 146, 147, 148, 160, 161], "704": 49, "351": 49, "986": 49, "338": 49, "792": 49, "256": 49, "722": 49, "330": 49, "999": 49, "677": 49, "263": 49, "112": 49, "455": 49, "731": [49, 165], "430": [49, 51], "253": 49, "502": 49, "437": 49, "422": 49, "data_hom": [50, 51], "download_if_miss": [50, 51], "nan": 50, "5960": 50, "cach": [50, 51, 115, 169, 178], "folder": [50, 51, 169], "store": [50, 51, 107, 108, 109, 110, 167, 170, 171, 176, 180, 181], "skfolio_data": [50, 51, 169], "subfold": [50, 51], "rais": [50, 51, 107, 108, 109, 110, 115, 116, 121, 122, 126, 128, 129, 130, 131, 151, 152, 153], "oserror": [50, 51], "local": [50, 51, 169], "avail": [50, 51, 107, 108, 109, 110, 115, 116, 121, 122, 126, 167, 169, 170, 171, 174, 176, 178, 179, 181], "try": [50, 51], "site": [50, 51], "aal": [50, 51], "l": 50, "abf": 50, "aht": 50, "anto": 50, "vod": 50, "weir": 50, "wpp": 50, "wtb": 50, "535": 50, "354": 50, "205": 50, "926": 50, "590": 50, "313": 50, "562": 50, "115": 50, "240": 50, "512": 50, "249": 50, "382": 50, "907": 50, "540": 50, "209": 50, "185": 50, "729": 50, "118": 50, "483": 50, "462": 50, "381": 50, "972": 50, "553": 50, "289": 50, "950": 50, "124": 50, "458": 50, "337": 50, "572": 50, "829": 50, "222": 50, "716": 50, "725": 50, "475": 50, "405": 50, "578": 50, "852": 50, "224": 50, "548": 50, "711": 50, "685": 50, "285": 50, "476": 50, "498": 50, "254": 50, "392": 50, "885": 50, "1455": 51, "nasdaq": 51, "1362": 51, "aaoi": 51, "aaon": 51, "zvra": 51, "zyme": 51, "zyne": 51, "zyxi": 51, "648": 51, "933": 51, "995": 51, "922": 51, "247": 51, "303": 51, "965": 51, "460": 51, "913": 51, "336": 51, "103": 51, "495": 51, "700": 51, "869": 51, "316": 51, "681": 51, "967": 51, "400": 51, "780": 51, "809": 51, "811": 51, "550": 51, "825": 51, "8313": [52, 53], "332589": 52, "1250": 52, "65625": 52, "382813": 52, "890625": 52, "5000": 52, "334821": 52, "0000": 52, "75000": 52, "375000": 52, "3750": 52, "335938": 52, "9375": 52, "50000": 52, "371094": 52, "859375": 52, "2500": 52, "337054": 52, "8125": 52, "25000": 52, "355469": 52, "796875": 52, "1875": 52, "339286": 52, "31250": 52, "347656": 52, "875000": 52, "sp500": 53, "359": 53, "358": 53, "355": 53, "352": 53, "353": 53, "codependence_": [54, 55, 56, 57, 58, 59, 60, 170], "codepend": [54, 55, 56, 57, 58, 59, 60, 114, 118, 119, 123, 170, 176], "distance_": [54, 55, 56, 57, 58, 59, 60, 166, 170], "__init__": [54, 97, 98, 136, 137, 143, 144, 176], "explicit": [54, 97, 98, 107, 136, 137, 143, 144], "keyword": [54, 97, 98, 127, 136, 137, 143, 144, 172], "arg": [54, 97, 98, 136, 137, 143, 144], "abstract": [54, 93, 129], "power": [55, 57, 59, 60], "some": [55, 57, 59, 60, 100, 107, 108, 109, 110, 126, 142, 177], "wide": [55, 57, 59, 60, 172], "angular": [55, 57, 59, 60], "corr": [55, 57, 59, 60, 132, 156, 158], "basecovari": [55, 99, 100, 105, 111, 139, 176], "expon": [55, 57, 59, 60, 172], "covariance_estimator_": [55, 99, 100, 105, 111, 139], "diversifi": [55, 57, 59, 60, 71, 119, 123, 131], "l\u00f2pez": [55, 57, 59, 60, 99, 100], "journal": [55, 57, 59, 60, 106, 108, 118, 119, 123, 138, 145, 146, 147, 148, 157], "2016": [55, 57, 59, 60, 119, 123], "szeke": 56, "captur": 56, "g\u00e1bor": 56, "2005": [56, 111], "n_bins_method": 58, "nbinsmethod": 58, "freedman": [58, 150, 160], "normal": [58, 79, 103, 129, 130, 131, 168], "mutual": [58, 176], "relat": [58, 100, 178], "variat": [58, 164, 172], "h": [58, 106, 131], "margin": 58, "entropi": [58, 70, 73, 129, 130, 131], "joint": [58, 168], "bin": [58, 128, 150, 160, 161], "conting": 58, "knuth": [58, 150, 161], "featur": [58, 94, 101, 107, 108, 109, 110, 132, 133, 134, 138, 139, 140, 164, 175], "spearman": [60, 164], "enum": 61, "enumer": [62, 63, 64, 65, 94, 95, 124, 150], "value_at_risk": [62, 114, 118, 119, 129, 130, 131], "var": [62, 68, 73, 89, 129, 130, 131], "drawdown_at_risk": [62, 114, 118, 119, 129, 130, 131], "entropic_risk_measur": [62, 114, 118, 119, 129, 130, 131], "fourth_central_mo": [62, 114, 118, 119, 129, 130, 131], "fourth_lower_partial_mo": [62, 114, 118, 119, 129, 130, 131], "excess": [64, 129, 130, 131], "sortino_ratio": [64, 129, 130, 131, 164, 172, 177, 178], "mean_absolute_deviation_ratio": [64, 129, 130, 131], "first_lower_partial_moment_ratio": [64, 129, 130, 131], "value_at_risk_ratio": [64, 129, 130, 131], "entropic_risk_measure_ratio": [64, 129, 130, 131], "evar_ratio": [64, 129, 130, 131], "worst_realization_ratio": [64, 129, 130, 131], "drawdown_at_risk_ratio": [64, 129, 130, 131], "average_drawdown_ratio": [64, 129, 130, 131], "edar_ratio": [64, 129, 130, 131], "ulcer_index_ratio": [64, 129, 130, 131], "gini_mean_difference_ratio": [64, 114, 115, 118, 119, 122, 126, 129, 130, 131], "semi_vari": [65, 114, 115, 118, 119, 122, 126, 129, 130, 131, 164, 172, 176], "downsid": [65, 74, 76, 82, 84, 85, 115, 122, 126, 129, 130, 131, 176], "annualized_semi_vari": [65, 129, 130, 131], "standard_devi": [65, 115, 122, 126, 129, 130, 131], "semi_devi": [65, 115, 122, 126, 129, 130, 131, 176], "annualized_semi_devi": [65, 129, 130, 131], "mean_absolute_devi": [65, 114, 115, 118, 119, 122, 126, 129, 130, 131], "worst_real": [65, 114, 115, 118, 119, 122, 126, 129, 130, 131], "average_drawdown": [65, 114, 115, 118, 119, 122, 126, 129, 130, 131], "first_lower_partial_mo": [65, 114, 115, 118, 119, 122, 126, 129, 130, 131], "ulcer_index": [65, 114, 115, 118, 119, 122, 126, 129, 130, 131], "tail": [68, 76, 129, 130, 131, 164], "dar": [69, 70, 129, 130, 131], "chernoff": [70, 73, 129, 130, 131], "inequ": [70, 73, 115, 116, 121, 122, 126, 129, 130, 131], "herfindahl": [71, 131], "n_": [71, 131], "eff": [71, 131], "quantifi": [71, 131], "bank": [71, 131], "institut": [71, 131], "law": [71, 131], "nutshel": [71, 131], "lovett": [71, 131], "william": [71, 131], "anthoni": [71, 131], "1988": [71, 131], "theta": 72, "theat": 72, "exponenti": [72, 101, 102, 129, 130, 131, 164], "associ": [73, 99, 107, 108, 109, 110], "min_acceptable_return": [74, 76, 82, 84, 85, 115, 122, 126, 129, 130, 131], "accept": [74, 76, 82, 84, 85, 115, 122, 126, 128, 129, 130, 131], "distinguish": [74, 76, 82, 84, 85, 115, 122, 126, 129, 130, 131], "heavi": [76, 129, 130, 131], "extrem": [76, 106, 129, 130, 131, 164], "fat": [76, 129, 130, 131], "compound": [77, 78, 128, 129, 130, 131, 135, 139, 168, 177], "rescal": [77, 107, 108, 109, 110, 120, 128, 129, 130, 131], "1000": [77, 108, 128, 129, 130, 131, 145, 146], "uncompound": [77, 78], "seri": [78, 94, 95, 106, 129, 130, 131, 175], "gmd": [79, 83, 129, 130, 131], "realis": 79, "superior": [79, 129, 130, 131], "necessari": [79, 129, 130, 131, 132], "degre": [79, 129, 130, 131, 138, 145, 146, 147, 148], "stochast": [79, 129, 130, 131], "domin": [79, 128, 129, 130, 131, 134, 164, 178], "mad": [82, 129, 130, 131], "owa": 83, "score_func": 92, "greater_is_bett": 92, "modifi": [92, 128], "enhanc": [92, 99, 106, 175, 178], "factori": 92, "wrap": 92, "cross_val_scor": 92, "callabl": [92, 115, 116, 121, 122, 126], "signatur": [92, 172], "good": [92, 134], "sign": 92, "flip": 92, "outcom": 92, "rationmeasur": 92, "extrariskmeasur": [92, 114, 118, 119, 123, 127, 129, 130, 131], "addit": [92, 96, 122, 126, 127, 128, 132, 133, 134, 164, 166, 168, 175, 178], "scalar": 92, "implement": [93, 106, 109, 131, 132, 168, 172, 175, 176, 178], "get_path_id": [93, 94], "id": [93, 94, 129, 130, 131], "purged_s": [94, 95], "embargo_s": 94, "being": [94, 109, 172], "whose": [94, 107, 108, 109, 110, 132, 133, 134, 175], "overlap": [94, 175], "those": [94, 175], "immedi": [94, 96, 175], "exhibit": [94, 175], "serial": [94, 175], "arma": [94, 175], "least": [94, 129, 130, 131], "model_valid": 94, "index_train_test_": 94, "n_split": [94, 164], "machin": [94, 99, 100, 119, 123, 164], "l\u00f3pez": [94, 119, 123], "randn": [94, 95], "train_index": [94, 95], "test_index": [94, 95], "binary_train_test_set": 94, "identifi": 94, "n_test_path": 94, "reconstruct": 94, "plot_train_test_fold": 94, "locat": [94, 107, 108, 109, 110], "plot_train_test_index": 94, "recombined_path": 94, "group": [94, 95, 96, 115, 116, 121, 122, 126, 129, 130, 131, 138, 164, 176], "yield": [94, 95, 107, 123, 127, 168], "test_set_index": 94, "expend_train": 95, "reduce_test": 95, "logic": [95, 172], "thu": 95, "inappropri": 95, "timeseriessplit": 95, "suitabl": 95, "subsequ": 95, "past": 95, "last": [95, 101, 102, 103, 104, 106, 128, 130], "get_n_split": 95, "iter": [95, 96, 97, 99, 100, 101, 103, 106, 107, 108, 123, 127, 128, 140, 157, 172], "n_target": [95, 96, 120, 121, 122, 123, 127], "alwai": [95, 157, 172], "verbos": [96, 107, 115, 116, 121, 122, 123, 126, 127], "fit_param": [96, 132, 133, 134], "pre_dispatch": 96, "column_indic": 96, "collect": [96, 123, 127, 175, 176], "baseoptim": [96, 123, 127], "conjunct": 96, "g": [96, 107, 108, 109, 110, 127, 164], "groupkfold": 96, "stratifi": 96, "splitter": [96, 107], "job": [96, 107, 123, 127, 141], "unless": [96, 107, 123, 127, 141], "joblib": [96, 107, 123, 127, 141], "parallel_backend": [96, 107, 123, 127, 141], "context": [96, 107, 123, 127, 141], "processor": [96, 107, 123, 127, 141], "invok": 96, "dispatch": 96, "explos": 96, "memori": [96, 108], "consumpt": 96, "cpu": 96, "spawn": 96, "lightweight": 96, "fast": [96, 128, 141], "delai": 96, "demand": 96, "exact": 96, "higham": [97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 140, 157], "higham_max_iter": [97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 157], "left": [97, 99, 100, 101, 103, 106, 107, 108, 115, 116, 121, 122, 126, 145, 146, 147, 148, 149, 157, 164, 168, 178, 181], "unchang": [97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 132, 133, 134, 157], "fail": [97, 99, 100, 101, 103, 106, 107, 108, 115, 116, 121, 122, 126, 157], "cov_nearest": [97, 99, 100, 101, 103, 106, 108, 140], "nick": [97, 99, 100, 101, 103, 106, 108, 140, 157], "2002": [97, 99, 100, 101, 103, 106, 108, 140, 157], "eigenvalu": [97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 157], "clip": [97, 99, 100, 101, 103, 106, 108, 140, 157], "slow": [97, 99, 100, 101, 103, 106, 108, 157], "covariance_": [97, 99, 100, 101, 103, 106, 107, 108, 109, 110, 167], "goal": 99, "signal": [99, 109], "ill": [99, 168], "tradit": 99, "differenti": 99, "eigenvector": [99, 100], "classifi": 99, "mar\u010denko": 99, "pastur": 99, "constant": [99, 111], "element": [99, 100, 115, 116, 119, 121, 122, 123, 126, 127, 128, 132, 133, 134, 145, 146, 147, 148, 168], "quantit": [99, 100, 119, 123, 164], "financ": [99, 100, 119, 123, 157], "n_market": 100, "deton": 100, "matric": [100, 106, 108], "loud": 100, "tone": 100, "portion": 100, "subset": 100, "window_s": [101, 102, 103, 104, 106], "alpha": [101, 102, 107, 111, 164, 172], "window": [101, 102, 103, 104, 106, 129, 130, 131], "smooth": [101, 102], "ewm": 102, "mu_": [102, 104, 105, 111, 168, 171], "ddof": [103, 176], "unbias": [103, 111, 131], "risk_avers": [105, 116, 122, 176], "equilibrium": [105, 138, 164, 176], "_avers": 105, "sigma": [105, 145, 147, 148, 149, 168, 181], "psd_variant": 106, "co": 106, "movement": 106, "fluctuat": 106, "certain": [106, 176], "simultan": 106, "limit": [106, 126, 176], "tau": [106, 138], "count": [106, 128], "proport": [106, 138], "amplitud": 106, "exce": 106, "variant": 106, "publish": 106, "et": 106, "al": 106, "produc": [106, 162, 163], "2019": [106, 111, 119, 123, 131], "alter": 106, "denomin": [106, 109, 134], "ensur": [106, 126, 135, 175, 176], "javid": 106, "markowitz": [106, 164], "sargen": 106, "starer": 106, "modern": [106, 164], "social": 106, "scienc": 106, "network": [106, 118, 119], "pujara": 106, "deconstruct": 106, "flint": 106, "polakow": 106, "n_refin": 107, "tol": 107, "enet_tol": 107, "max_it": 107, "cd": 107, "assume_cent": [107, 108, 109, 110], "spars": 107, "penalti": 107, "read": [107, 108, 109, 110], "n_alpha": 107, "integ": [107, 123, 127, 132, 133, 134], "docstr": 107, "refin": 107, "toler": 107, "declar": 107, "dual": 107, "goe": [107, 176], "elast": 107, "descent": 107, "direct": [107, 164], "accuraci": [107, 115, 116, 121, 122, 126], "overal": 107, "lar": 107, "lasso": [107, 164], "coordin": 107, "underli": [107, 178], "graph": [107, 128], "elsewher": 107, "prefer": [107, 116, 176], "numer": [107, 109, 115, 116, 121, 122, 126, 157, 164], "dualiti": 107, "almost": [107, 108, 109, 110], "exactli": [107, 108, 109, 110], "location_": [107, 108, 109, 110], "precision_": [107, 108, 109, 110], "pseudo": [107, 108, 109, 110, 145, 146], "store_precis": [107, 108, 109, 110], "alpha_": [107, 111], "_test_scor": 107, "likelihood": [107, 108, 109, 110], "th": 107, "n_iter_": 107, "done": [107, 172], "One": [107, 123, 175], "challeng": 107, "face": [107, 164], "miss": [107, 135], "optimum": 107, "onc": [107, 128], "found": 107, "again": [107, 127], "error_norm": [107, 108, 109, 110], "comp_cov": [107, 108, 109, 110], "frobeniu": [107, 108, 109, 110], "spectral": [107, 108, 109, 110], "type": [107, 108, 109, 110, 128, 150], "tr": [107, 108, 109, 110], "whether": [107, 108, 109, 110, 159], "sens": [107, 108, 109, 110], "graphicallasso": 107, "notimplementederror": 107, "support": [107, 116, 123, 132, 133, 134, 176, 177], "yet": 107, "get_precis": [107, 108, 109, 110], "getter": [107, 108, 109, 110], "precis": [107, 108, 109, 110], "current": [107, 108, 109, 110, 129, 130, 131, 134, 172], "mahalanobi": [107, 108, 109, 110], "drawn": [107, 108, 109, 110, 125], "gaussian": [107, 108, 109, 110], "set_score_request": [107, 108, 109, 110], "request": [107, 108, 109, 110, 178], "relev": [107, 108, 109, 110], "enable_metadata_rout": [107, 108, 109, 110], "meta": [107, 108, 109, 110, 176], "alia": [107, 108, 109, 110], "metadata_rout": [107, 108, 109, 110], "retain": [107, 108, 109, 110, 132, 133, 134, 172], "insid": [107, 108, 109, 110, 123, 168], "block_siz": [108, 145, 146], "ledoit": [108, 164], "wolf": [108, 164], "particular": 108, "o": [108, 109, 128], "m": [108, 128, 153, 154, 159], "describ": [108, 138, 172], "block": [108, 145, 146], "pure": 108, "shrinkage_": [108, 109], "shrunk": [108, 109, 110], "regularis": [108, 109], "cov": [108, 109, 110, 147, 156, 157, 158, 168, 176], "ident": [108, 109, 110, 126, 135, 168], "trace": [108, 109, 110], "volum": 108, "issu": 108, "februari": 108, "2004": [108, 145, 146], "page": 108, "365": 108, "oracl": [109, 164], "propos": 109, "formul": [109, 115, 178], "eq": 109, "articl": 109, "state": 109, "oper": [109, 132, 133, 134, 145, 146, 147, 148], "mmse": 109, "chen": 109, "wiesel": 109, "eldar": 109, "c": [109, 126, 155, 176, 178], "hero": 109, "ieee": 109, "5016": 109, "5029": 109, "2010": [109, 135, 139, 168], "vol_weighted_target": 111, "shrunkmumethod": 111, "james_stein": [111, 112], "1955": 111, "shrink": 111, "bar": 111, "There": [111, 168], "grand": 111, "bay": [111, 112], "bodnar": [111, 112], "okhrin": [111, 112], "parolya": [111, 112], "bayes_stein": [111, 112], "bodnar_okhrin": [111, 112], "mu_target_": 111, "beta_": 111, "attilio": [111, 135, 139], "meucci": [111, 135, 139, 168], "philipp": [111, 118, 119], "jorion": 111, "1986": 111, "baseprior": [114, 115, 116, 118, 119, 120, 121, 122, 126, 138, 140, 145, 146, 147, 148], "basedist": [114, 118, 119, 123], "minium": [114, 115, 116, 118, 119, 121, 122, 126], "sx5e": [114, 115, 116, 118, 119, 121, 122, 126, 138], "copi": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131], "distance_estimator_": [114, 118, 119, 123], "1d": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127], "charact": [114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127], "covariance_uncertainty_set_estim": [115, 122, 181], "risk_free_r": [115, 116, 121, 122, 126, 129, 130, 131, 138], "evar_beta": [115, 122, 126, 129, 130, 131], "cdar_beta": [115, 122, 126, 129, 130, 131], "edar_beta": [115, 122, 126, 129, 130, 131], "solver_param": [115, 116, 121, 122, 126], "scale_object": [115, 116, 121, 122, 126], "scale_constraint": [115, 116, 121, 122, 126], "save_problem": [115, 116, 121, 122, 126], "add_object": [115, 116, 121, 122, 126], "add_constraint": [115, 116, 121, 122, 126], "overwrite_expected_return": [115, 116, 122, 126], "_": [115, 168], "_risk": 115, "dynam": 115, "lookup": 115, "share": 115, "_cvx_cach": 115, "duplic": 115, "turnov": [115, 121, 122, 126, 164, 176], "basemuuncertaintyset": [115, 122], "basecovarianceuncertaintyset": [115, 122], "n_constraint": [115, 116, 121, 122, 126], "match": [115, 116, 121, 122, 126, 132, 133, 134, 138], "With": [115, 116, 121, 122, 126, 135, 138, 164, 176], "referenc": [115, 116, 121, 122, 126, 138], "tlt": [115, 116, 121, 122, 126, 138, 164], "equiti": [115, 116, 121, 122, 126, 138, 164], "bond": [115, 116, 121, 122, 126, 138, 164, 168], "europ": [115, 116, 121, 122, 126, 138, 164], "n_group": [115, 116, 121, 122, 126, 138], "right": [115, 116, 121, 122, 126, 129, 130, 131, 145, 146, 147, 148, 149, 181], "free": [115, 116, 121, 122, 126, 129, 130, 131, 138], "interest": [115, 116, 121, 122, 126], "rate": [115, 116, 121, 122, 126, 129, 130, 131, 138], "cp": [115, 116, 121, 122, 126], "cvxpy": [115, 116, 121, 122, 126, 164], "cvpxy": [115, 116, 121, 122, 126], "overwrit": [115, 116, 122, 126], "written": [115, 116, 121, 122, 126], "rust": [115, 116, 121, 122, 126], "eco": [115, 116, 121, 122, 126], "sc": [115, 116, 121, 122, 126], "releas": [115, 116, 121, 122, 126, 168, 173], "www": [115, 116, 121, 122, 126], "org": [115, 116, 121, 122, 126], "html": [115, 116, 121, 122, 126], "tol_gap_ab": [115, 116, 121, 122, 126], "tol_gap_rel": [115, 116, 121, 122, 126], "problem_": [115, 116, 121, 122, 126], "warn": [115, 116, 121, 122, 126], "n_optim": [115, 116, 117, 120, 121, 122, 125, 126], "problem_values_": [115, 116, 121, 122, 126], "mu_uncertainty_set_estimator_": [115, 122], "covariance_uncertainty_set_estimator_": [115, 122], "permit": 116, "driven": 116, "guarante": 116, "tractabl": 116, "n_factor": [116, 126, 140, 141, 145, 146, 147, 148], "2017": [118, 134, 168], "review": [118, 119], "decad": [118, 119], "gautier": [118, 119, 164], "marti": [118, 119, 164], "frank": [118, 119], "nielsen": [118, 119], "miko\u0142aj": [118, 119], "bi\u0144kowski": [118, 119], "donnat": [118, 119], "ssrn": [119, 123], "electron": [119, 123], "cambridg": [119, 123], "univers": [119, 123, 168, 179], "press": [119, 123, 168], "deriv": [120, 168], "max_turnov": [121, 122], "special": 121, "max_mean_absolute_devi": 122, "max_first_lower_partial_mo": 122, "max_standard_devi": 122, "max_semi_vari": 122, "max_semi_devi": 122, "max_worst_r": 122, "max_evar": 122, "max_max_drawdown": 122, "max_average_drawdown": 122, "max_edar": 122, "max_ulcer_index": 122, "max_gini_mean_differ": 122, "begin": [122, 126, 155, 176], "align": [122, 126, 155, 176], "min_": [122, 126, 176], "risk_": [122, 126, 176], "text": [122, 126, 145, 147, 149, 155, 176, 181], "le": [122, 176], "_risk_": [122, 176], "quad": [122, 176], "foral": [122, 176], "ne": [122, 176], "max_": [122, 155, 168, 176], "r_": [122, 124, 148, 176], "ad": [122, 126, 132, 133, 134, 140, 164, 172, 175, 177], "quantil": [123, 127, 128, 175, 176, 177], "quantile_measur": [123, 127, 176], "baseestim": [123, 141], "expos": 123, "basecrossvalid": [123, 127], "basecombinatorialcv": [123, 127], "combinatorialcv": [123, 127], "inner_estimators_": 123, "outer_estimator_": 123, "dirichlet": [125, 163, 164], "solv": [126, 176, 181], "auxiliari": [126, 176], "barrier": [126, 176], "tupl": [127, 158], "prefit": 127, "skip": 127, "named_estimators_": 127, "constructor": [127, 172], "variou": 127, "named_estim": 127, "bunch": 127, "parameter_nam": 127, "new_valu": 127, "item": 128, "empti": [128, 130], "shallow": 128, "occurr": 128, "intersect": 128, "sy": 128, "maxsiz": 128, "valueerror": [128, 151, 152, 153], "insert": [128, 132, 133, 134], "min_measur": 128, "non_denominated_sort": [128, 177], "first_front_onli": 128, "sort": [128, 130, 132, 133, 134], "complex": [128, 176], "mn": 128, "front": [128, 134, 177], "log_scal": [128, 129, 130, 131], "idx": [128, 129, 130, 131], "logarithm": [128, 129, 130, 131, 135, 139], "rebas": [128, 129, 130, 131], "slice": [128, 129, 130, 131], "show_front": [128, 177], "3d": 128, "hover": 128, "highlight": 128, "pop": 128, "indexerror": 128, "q": [128, 134, 175, 177], "revers": [128, 132, 133, 134], "IN": 128, "place": 128, "ascend": 128, "maintain": 128, "descend": 128, "flag": 128, "sort_measur": 128, "format": [128, 129, 130, 131, 132, 133, 134], "round": [128, 129, 130, 131], "unit": [128, 129, 130, 131], "fitness_measur": [129, 130, 131, 134, 178], "value_at_risk_beta": [129, 130, 131], "entropic_risk_measure_theta": [129, 130, 131], "entropic_risk_measure_beta": [129, 130, 131], "drawdown_at_risk_beta": [129, 130, 131], "manipul": [129, 130, 131, 177], "rule": [129, 130, 131, 160, 161, 168], "At": [129, 130, 131], "_factor": [129, 130, 131], "_varianc": [129, 130, 131], "_deviat": [129, 130, 131], "lopsided": [129, 130, 131], "symmetr": [129, 130, 131, 153, 157, 159], "_ratio": [129, 130, 131], "slot": [129, 130, 131, 178], "cumulative_return": [129, 130, 131, 178], "cumulative_returns_df": [129, 130, 131, 178], "strictli": [129, 130, 131], "wors": [129, 130, 131], "get_measur": [129, 130, 131], "measures_df": [129, 130, 131], "plot_return": [129, 130, 131], "plot_rolling_measur": [129, 130, 131, 178], "ct": [129, 130, 131], "returns_df": [129, 130, 131, 178], "rolling_measur": [129, 130, 131, 178], "check_observations_ord": 130, "initi": [130, 132, 145, 146, 157, 179], "chronolog": 130, "baseportfolio": [130, 131, 178], "mutli": 130, "x0": [131, 132, 133, 134], "x1": [131, 132, 133, 134], "wi": 131, "2h": 131, "ndrrai": 131, "effective_number_asset": 131, "expected_returns_from_asset": 131, "assets_expected_return": 131, "get_weight": [131, 178], "ab": 131, "nonzero_assets_index": 131, "sric": 131, "criterion": 131, "dirk": 131, "paulsen": 131, "variance_from_asset": 131, "assets_covari": 131, "sequenti": 132, "suboptim": [132, 168], "either": [132, 172], "shortcom": [132, 164], "keep": [132, 133, 135], "to_keep_": [132, 133, 134], "boolean": [132, 133, 134], "fit_transform": [132, 133, 134, 179], "n_output": [132, 133, 134], "unsupervis": [132, 133, 134], "x_new": [132, 133, 134], "n_features_new": [132, 133, 134], "get_feature_names_out": [132, 133, 134], "input_featur": [132, 133, 134], "mask": [132, 133, 134], "feature_names_out": [132, 133, 134], "get_support": [132, 133, 134], "rather": [132, 133, 134], "iff": [132, 133, 134], "retent": [132, 133, 134], "inverse_transform": [132, 133, 134], "n_selected_featur": [132, 133, 134], "x_r": [132, 133, 134], "n_original_featur": [132, 133, 134], "set_output": [132, 133, 134], "sphx_glr_auto_examples_miscellaneous_plot_set_output": [132, 133, 134], "configur": [132, 133, 134], "polar": [132, 133, 134], "min_n_asset": 134, "preselect": 134, "rank": 134, "until": [134, 173], "reach": 134, "insuffici": 134, "potenti": 134, "evolutionari": 134, "qu": 134, "zhou": 134, "log_return": 135, "nan_threshold": 135, "ln": [135, 168], "biggl": [135, 168], "biggr": [135, 168], "aggreg": [135, 168], "On": [135, 160, 164], "hand": 135, "percentag": 135, "pitfal": [135, 139], "garp": [135, 139, 168], "profession": [135, 139, 168], "view": [138, 164, 176, 180], "view_confid": 138, "bayesian": [138, 164, 180], "analyst": [138, 176, 180], "n_view": 138, "asset_i": 138, "asset_j": 138, "frequenc": [138, 168], "00015": 138, "0002": [138, 164, 178], "0004": [138, 176, 180], "european": 138, "equilibriummu": [138, 171, 176], "put": 138, "literatur": 138, "diagon": [138, 140, 145, 146, 147, 148], "omega": 138, "idzorek": 138, "groups_": 138, "views_": 138, "picking_matrix_": 138, "pick": 138, "incom": 138, "fischer": 138, "robert": [138, 168], "1991": 138, "forecast": 138, "2007": [138, 164], "basemu": 139, "empiricalmu": [139, 171], "project": [139, 168], "mu_estimator_": 139, "residual_vari": 140, "max_iter": 140, "loadingmatrixestim": 140, "residu": 140, "slower": [140, 141], "factor_prior_estimator_": 140, "regress": 141, "regressor": 141, "overhead": 141, "intercepts_": 141, "multi_output_regressor_": 141, "multioutputregressor": 141, "multioutput": 141, "dimens": 142, "n_bootstrap_sampl": [145, 146], "seed": [145, 146], "bootstrap": [145, 146, 164], "circular": [145, 146, 164], "u_": [145, 146, 147, 148, 149, 181], "vec": [145, 147, 149, 181], "succeq": [145, 147, 149, 181], "chi": [145, 146, 147, 148], "2_": [145, 146, 147, 148], "_asset": [145, 146, 147, 148], "freedom": [145, 146, 147, 148], "stationari": [145, 146], "forc": [145, 146, 148], "politi": [145, 146], "white": [145, 146], "uncertainty_set_": [145, 146, 147, 148, 181], "uncertaintyset": [145, 146, 147, 148, 181], "mathemat": [145, 146, 147, 148], "sch\u00f6ttle": [145, 146, 147, 148], "werner": [145, 146, 147, 148], "automat": [145, 146, 169], "length": [145, 146], "correct": [145, 146], "patton": [145, 146], "empiricalcovarianceuncertaintyset": [145, 181], "wishart": 147, "sim": [147, 148], "solut": 147, "notat": 147, "i_": 147, "k_": 147, "nn": 147, "otim": 147, "denot": [147, 168], "commut": [147, 154], "kroneck": 147, "assumpt": [148, 168], "qualnam": 150, "linkage_matrix": 155, "tibshirani": 155, "dispers": 155, "null": 155, "bigl": 155, "bigr": 155, "d_": 155, "densiti": [155, 160], "back": 157, "spd": 157, "faster": 157, "ima": 157, "hermitian": 159, "real": 159, "verifi": 159, "histogram": [160, 161], "diaconi": 160, "1981": 160, "simplex": [162, 163], "randomli": 162, "portfolio optim": 164, "scikit-learn": 164, "librari": 164, "built": 164, "offer": 164, "unifi": 164, "interfac": 164, "fine": 164, "tune": [164, 173], "claus": 164, "bsd": 164, "licens": 164, "pypi": [164, 174], "pip": [164, 174], "1952": 164, "mvo": 164, "receiv": 164, "consider": 164, "attent": 164, "unfortun": 164, "sensit": 164, "poor": 164, "demiguel": 164, "allevi": 164, "fact": 164, "framework": [164, 173], "graphic": 164, "hyper": 164, "snippet": 164, "design": [164, 176], "quickli": 164, "detonecovari": [164, 167], "ewmu": [164, 171, 172], "fund": 164, "japan": 164, "prior_estimator__mu_estimator__alpha": [164, 172], "mmp": 164, "get_summari": 164, "thank": 164, "contributor": 164, "behind": 164, "resourc": 164, "inspir": 164, "pyportfolioopt": 164, "riskfolio": 164, "lib": 164, "micropredict": 164, "statsmodel": 164, "rsome": 164, "ai": 164, "scientif": 164, "appreci": 164, "bibtex": 164, "misc": 164, "author": 164, "hugo": 164, "delatt": 164, "carlo": [164, 168], "nicolini": 164, "url": 164, "github": [164, 169], "complement": 166, "ewcovari": 167, "oa": 167, "graphicallassocv": 167, "most": [168, 172], "methodologi": 168, "lin": 168, "properli": 168, "easi": 168, "similar": [168, 172], "sometim": 168, "interchang": 168, "uncommon": 168, "wit": 168, "sigma_": 168, "incorrect": 168, "invari": 168, "behav": 168, "nor": 168, "secondli": 168, "pose": 168, "matur": 168, "parametr": 168, "characterist": 168, "mathbb": 168, "pmb": 168, "circ": 168, "exp": 168, "diag": 168, "hadamard": 168, "wise": 168, "could": 168, "convers": 168, "frequent": [168, 178], "reform": 168, "meantim": 168, "own": [168, 172, 175], "quant": 168, "nugget": 168, "practic": [168, 172, 178], "oxford": 168, "richard": 168, "michaud": 168, "panna": 168, "miskolczi": 168, "le\u00f3n": 168, "alejandro": 168, "reveiz": 168, "cookbook": 168, "nativ": 169, "larger": 169, "repo": 169, "directori": 169, "load_nasdaq_dataset": 169, "home": 169, "environ": 169, "spearmandist": [170, 176], "covariancedist": [170, 176], "distancecorrel": [170, 176], "mutualinform": [170, 176], "\u00ecn": 172, "learnt": 172, "candid": 172, "scheme": 172, "core": 172, "favor": 172, "main": 172, "benefit": 172, "influenc": 172, "addition": 172, "principl": 172, "rv": 172, "consecut": 172, "mani": 172, "gamma": 172, "randint": 172, "finer": 172, "param_dist": 172, "rd_search": 172, "write": 172, "def": [172, 176], "custom_scor": 172, "dedic": 172, "syntax": 172, "part": 172, "optimization__risk_measur": 172, "activ": 173, "plan": 173, "mid": 173, "2024": 173, "pin": 173, "break": 173, "tailor": 175, "integr": 175, "combinatorialpurgecv": 175, "intend": [176, 178], "commonli": 176, "rerun": [176, 180], "0003": [176, 180], "0006": [176, 180], "hous": 176, "mycustomcovari": 176, "my_param": 176, "super": 176, "_validate_data": 176, "_set_covari": 176, "mitig": 176, "ge0": 176, "portfolio_train": 176, "portfolio_test": 176, "inherit": [177, 178], "rand_weight": 177, "datetim": 178, "dt": 178, "other_portfolio": 178, "minu": 178, "r_p": 178, "prev": 178, "perfectli": 178, "replic": 178, "drift": 178, "regard": 178, "topic": 178, "004": 178, "pd": 178, "0010": 178, "my_portfolio": 178, "04203502": 178, "04203503": 178, "selectnondomin": 179, "new_x": 179, "pipe": 179, "mean_risk": 179, "sklean": 180, "bootstrapcovarianceuncertaintyset": 181}, "objects": {"": [[0, 0, 0, "module-7", "skfolio"]], "skfolio.cluster": [[47, 1, 1, "", "HierarchicalClustering"], [48, 1, 1, "", "LinkageMethod"]], "skfolio.cluster.HierarchicalClustering": [[47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "plot_dendrogram"], [47, 2, 1, "", "set_params"]], "skfolio.datasets": [[49, 3, 1, "", "load_factors_dataset"], [50, 3, 1, "", "load_ftse100_dataset"], [51, 3, 1, "", "load_nasdaq_dataset"], [52, 3, 1, "", "load_sp500_dataset"], [53, 3, 1, "", "load_sp500_index"]], "skfolio.distance": [[54, 1, 1, "", "BaseDistance"], [55, 1, 1, "", "CovarianceDistance"], [56, 1, 1, "", "DistanceCorrelation"], [57, 1, 1, "", "KendallDistance"], [58, 1, 1, "", "MutualInformation"], [59, 1, 1, "", "PearsonDistance"], [60, 1, 1, "", "SpearmanDistance"]], "skfolio.distance.BaseDistance": [[54, 2, 1, "", "fit"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "set_params"]], "skfolio.distance.CovarianceDistance": [[55, 2, 1, "", "fit"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "set_params"]], "skfolio.distance.DistanceCorrelation": [[56, 2, 1, "", "fit"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "set_params"]], "skfolio.distance.KendallDistance": [[57, 2, 1, "", "fit"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "set_params"]], "skfolio.distance.MutualInformation": [[58, 2, 1, "", "fit"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "set_params"]], "skfolio.distance.PearsonDistance": [[59, 2, 1, "", "fit"], [59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_params"], [59, 2, 1, "", "set_params"]], "skfolio.distance.SpearmanDistance": [[60, 2, 1, "", "fit"], [60, 2, 1, "", "get_metadata_routing"], [60, 2, 1, "", "get_params"], [60, 2, 1, "", "set_params"]], "skfolio": [[0, 0, 0, "-", "measures"], [0, 0, 0, "-", "population"], [0, 0, 0, "-", "portfolio"]], "skfolio.measures": [[61, 1, 1, "", "BaseMeasure"], [62, 1, 1, "", "ExtraRiskMeasure"], [63, 1, 1, "", "PerfMeasure"], [64, 1, 1, "", "RatioMeasure"], [65, 1, 1, "", "RiskMeasure"], [66, 3, 1, "", "average_drawdown"], [67, 3, 1, "", "cdar"], [68, 3, 1, "", "cvar"], [69, 3, 1, "", "drawdown_at_risk"], [70, 3, 1, "", "edar"], [71, 3, 1, "", "effective_number_assets"], [72, 3, 1, "", "entropic_risk_measure"], [73, 3, 1, "", "evar"], [74, 3, 1, "", "first_lower_partial_moment"], [75, 3, 1, "", "fourth_central_moment"], [76, 3, 1, "", "fourth_lower_partial_moment"], [77, 3, 1, "", "get_cumulative_returns"], [78, 3, 1, "", "get_drawdowns"], [79, 3, 1, "", "gini_mean_difference"], [80, 3, 1, "", "max_drawdown"], [81, 3, 1, "", "mean"], [82, 3, 1, "", "mean_absolute_deviation"], [83, 3, 1, "", "owa_gmd_weights"], [84, 3, 1, "", "semi_deviation"], [85, 3, 1, "", "semi_variance"], [86, 3, 1, "", "standard_deviation"], [87, 3, 1, "", "third_central_moment"], [88, 3, 1, "", "ulcer_index"], [89, 3, 1, "", "value_at_risk"], [90, 3, 1, "", "variance"], [91, 3, 1, "", "worst_realization"]], "skfolio.metrics": [[92, 3, 1, "", "make_scorer"]], "skfolio.model_selection": [[93, 1, 1, "", "BaseCombinatorialCV"], [94, 1, 1, "", "CombinatorialPurgedCV"], [95, 1, 1, "", "WalkForward"], [96, 3, 1, "", "cross_val_predict"]], "skfolio.model_selection.BaseCombinatorialCV": [[93, 2, 1, "", "get_path_ids"]], "skfolio.model_selection.CombinatorialPurgedCV": [[94, 4, 1, "", "binary_train_test_sets"], [94, 2, 1, "", "get_path_ids"], [94, 4, 1, "", "n_splits"], [94, 4, 1, "", "n_test_paths"], [94, 2, 1, "", "plot_train_test_folds"], [94, 2, 1, "", "plot_train_test_index"], [94, 4, 1, "", "recombined_paths"], [94, 2, 1, "", "split"], [94, 4, 1, "", "test_set_index"]], "skfolio.model_selection.WalkForward": [[95, 2, 1, "", "get_metadata_routing"], [95, 2, 1, "", "get_n_splits"], [95, 2, 1, "", "split"]], "skfolio.moments": [[97, 1, 1, "", "BaseCovariance"], [98, 1, 1, "", "BaseMu"], [99, 1, 1, "", "DenoiseCovariance"], [100, 1, 1, "", "DetoneCovariance"], [101, 1, 1, "", "EWCovariance"], [102, 1, 1, "", "EWMu"], [103, 1, 1, "", "EmpiricalCovariance"], [104, 1, 1, "", "EmpiricalMu"], [105, 1, 1, "", "EquilibriumMu"], [106, 1, 1, "", "GerberCovariance"], [107, 1, 1, "", "GraphicalLassoCV"], [108, 1, 1, "", "LedoitWolf"], [109, 1, 1, "", "OAS"], [110, 1, 1, "", "ShrunkCovariance"], [111, 1, 1, "", "ShrunkMu"], [112, 1, 1, "", "ShrunkMuMethods"]], "skfolio.moments.BaseCovariance": [[97, 2, 1, "", "get_metadata_routing"], [97, 2, 1, "", "get_params"], [97, 2, 1, "", "set_params"]], "skfolio.moments.BaseMu": [[98, 2, 1, "", "get_metadata_routing"], [98, 2, 1, "", "get_params"], [98, 2, 1, "", "set_params"]], "skfolio.moments.DenoiseCovariance": [[99, 2, 1, "", "fit"], [99, 2, 1, "", "get_metadata_routing"], [99, 2, 1, "", "get_params"], [99, 2, 1, "", "set_params"]], "skfolio.moments.DetoneCovariance": [[100, 2, 1, "", "fit"], [100, 2, 1, "", "get_metadata_routing"], [100, 2, 1, "", "get_params"], [100, 2, 1, "", "set_params"]], "skfolio.moments.EWCovariance": [[101, 2, 1, "", "fit"], [101, 2, 1, "", "get_metadata_routing"], [101, 2, 1, "", "get_params"], [101, 2, 1, "", "set_params"]], "skfolio.moments.EWMu": [[102, 2, 1, "", "fit"], [102, 2, 1, "", "get_metadata_routing"], [102, 2, 1, "", "get_params"], [102, 2, 1, "", "set_params"]], "skfolio.moments.EmpiricalCovariance": [[103, 2, 1, "", "fit"], [103, 2, 1, "", "get_metadata_routing"], [103, 2, 1, "", "get_params"], [103, 2, 1, "", "set_params"]], "skfolio.moments.EmpiricalMu": [[104, 2, 1, "", "fit"], [104, 2, 1, "", "get_metadata_routing"], [104, 2, 1, "", "get_params"], [104, 2, 1, "", "set_params"]], "skfolio.moments.EquilibriumMu": [[105, 2, 1, "", "fit"], [105, 2, 1, "", "get_metadata_routing"], [105, 2, 1, "", "get_params"], [105, 2, 1, "", "set_params"]], "skfolio.moments.GerberCovariance": [[106, 2, 1, "", "fit"], [106, 2, 1, "", "get_metadata_routing"], [106, 2, 1, "", "get_params"], [106, 2, 1, "", "set_params"]], "skfolio.moments.GraphicalLassoCV": [[107, 2, 1, "", "error_norm"], [107, 2, 1, "", "fit"], [107, 2, 1, "", "get_metadata_routing"], [107, 2, 1, "", "get_params"], [107, 2, 1, "", "get_precision"], [107, 2, 1, "", "mahalanobis"], [107, 2, 1, "", "score"], [107, 2, 1, "", "set_params"], [107, 2, 1, "", "set_score_request"]], "skfolio.moments.LedoitWolf": [[108, 2, 1, "", "error_norm"], [108, 2, 1, "", "fit"], [108, 2, 1, "", "get_metadata_routing"], [108, 2, 1, "", "get_params"], [108, 2, 1, "", "get_precision"], [108, 2, 1, "", "mahalanobis"], [108, 2, 1, "", "score"], [108, 2, 1, "", "set_params"], [108, 2, 1, "", "set_score_request"]], "skfolio.moments.OAS": [[109, 2, 1, "", "error_norm"], [109, 2, 1, "", "fit"], [109, 2, 1, "", "get_metadata_routing"], [109, 2, 1, "", "get_params"], [109, 2, 1, "", "get_precision"], [109, 2, 1, "", "mahalanobis"], [109, 2, 1, "", "score"], [109, 2, 1, "", "set_params"], [109, 2, 1, "", "set_score_request"]], "skfolio.moments.ShrunkCovariance": [[110, 2, 1, "", "error_norm"], [110, 2, 1, "", "fit"], [110, 2, 1, "", "get_metadata_routing"], [110, 2, 1, "", "get_params"], [110, 2, 1, "", "get_precision"], [110, 2, 1, "", "mahalanobis"], [110, 2, 1, "", "score"], [110, 2, 1, "", "set_params"], [110, 2, 1, "", "set_score_request"]], "skfolio.moments.ShrunkMu": [[111, 2, 1, "", "fit"], [111, 2, 1, "", "get_metadata_routing"], [111, 2, 1, "", "get_params"], [111, 2, 1, "", "set_params"]], "skfolio.optimization": [[113, 1, 1, "", "BaseComposition"], [114, 1, 1, "", "BaseHierarchicalOptimization"], [115, 1, 1, "", "ConvexOptimization"], [116, 1, 1, "", "DistributionallyRobustCVaR"], [117, 1, 1, "", "EqualWeighted"], [118, 1, 1, "", "HierarchicalEqualRiskContribution"], [119, 1, 1, "", "HierarchicalRiskParity"], [120, 1, 1, "", "InverseVolatility"], [121, 1, 1, "", "MaximumDiversification"], [122, 1, 1, "", "MeanRisk"], [123, 1, 1, "", "NestedClustersOptimization"], [124, 1, 1, "", "ObjectiveFunction"], [125, 1, 1, "", "Random"], [126, 1, 1, "", "RiskBudgeting"], [127, 1, 1, "", "StackingOptimization"], [0, 0, 0, "-", "cluster"], [0, 0, 0, "-", "convex"], [0, 0, 0, "-", "ensemble"], [0, 0, 0, "-", "naive"]], "skfolio.optimization.BaseComposition": [[113, 2, 1, "", "get_metadata_routing"], [113, 2, 1, "", "get_params"], [113, 2, 1, "", "set_params"]], "skfolio.optimization.BaseHierarchicalOptimization": [[114, 2, 1, "", "fit_predict"], [114, 2, 1, "", "get_metadata_routing"], [114, 2, 1, "", "get_params"], [114, 2, 1, "", "predict"], [114, 2, 1, "", "score"], [114, 2, 1, "", "set_params"]], "skfolio.optimization.ConvexOptimization": [[115, 2, 1, "", "fit_predict"], [115, 2, 1, "", "get_metadata_routing"], [115, 2, 1, "", "get_params"], [115, 2, 1, "", "predict"], [115, 2, 1, "", "score"], [115, 2, 1, "", "set_params"]], "skfolio.optimization.DistributionallyRobustCVaR": [[116, 2, 1, "", "fit"], [116, 2, 1, "", "fit_predict"], [116, 2, 1, "", "get_metadata_routing"], [116, 2, 1, "", "get_params"], [116, 2, 1, "", "predict"], [116, 2, 1, "", "score"], [116, 2, 1, "", "set_params"]], "skfolio.optimization.EqualWeighted": [[117, 2, 1, "", "fit"], [117, 2, 1, "", "fit_predict"], [117, 2, 1, "", "get_metadata_routing"], [117, 2, 1, "", "get_params"], [117, 2, 1, "", "predict"], [117, 2, 1, "", "score"], [117, 2, 1, "", "set_params"]], "skfolio.optimization.HierarchicalEqualRiskContribution": [[118, 2, 1, "", "fit"], [118, 2, 1, "", "fit_predict"], [118, 2, 1, "", "get_metadata_routing"], [118, 2, 1, "", "get_params"], [118, 2, 1, "", "predict"], [118, 2, 1, "", "score"], [118, 2, 1, "", "set_params"]], "skfolio.optimization.HierarchicalRiskParity": [[119, 2, 1, "", "fit"], [119, 2, 1, "", "fit_predict"], [119, 2, 1, "", "get_metadata_routing"], [119, 2, 1, "", "get_params"], [119, 2, 1, "", "predict"], [119, 2, 1, "", "score"], [119, 2, 1, "", "set_params"]], "skfolio.optimization.InverseVolatility": [[120, 2, 1, "", "fit"], [120, 2, 1, "", "fit_predict"], [120, 2, 1, "", "get_metadata_routing"], [120, 2, 1, "", "get_params"], [120, 2, 1, "", "predict"], [120, 2, 1, "", "score"], [120, 2, 1, "", "set_params"]], "skfolio.optimization.MaximumDiversification": [[121, 2, 1, "", "fit"], [121, 2, 1, "", "fit_predict"], [121, 2, 1, "", "get_metadata_routing"], [121, 2, 1, "", "get_params"], [121, 2, 1, "", "predict"], [121, 2, 1, "", "score"], [121, 2, 1, "", "set_params"]], "skfolio.optimization.MeanRisk": [[122, 2, 1, "", "fit"], [122, 2, 1, "", "fit_predict"], [122, 2, 1, "", "get_metadata_routing"], [122, 2, 1, "", "get_params"], [122, 2, 1, "", "predict"], [122, 2, 1, "", "score"], [122, 2, 1, "", "set_params"]], "skfolio.optimization.NestedClustersOptimization": [[123, 2, 1, "", "fit"], [123, 2, 1, "", "fit_predict"], [123, 2, 1, "", "get_metadata_routing"], [123, 2, 1, "", "get_params"], [123, 2, 1, "", "predict"], [123, 2, 1, "", "score"], [123, 2, 1, "", "set_params"]], "skfolio.optimization.Random": [[125, 2, 1, "", "fit"], [125, 2, 1, "", "fit_predict"], [125, 2, 1, "", "get_metadata_routing"], [125, 2, 1, "", "get_params"], [125, 2, 1, "", "predict"], [125, 2, 1, "", "score"], [125, 2, 1, "", "set_params"]], "skfolio.optimization.RiskBudgeting": [[126, 2, 1, "", "fit"], [126, 2, 1, "", "fit_predict"], [126, 2, 1, "", "get_metadata_routing"], [126, 2, 1, "", "get_params"], [126, 2, 1, "", "predict"], [126, 2, 1, "", "score"], [126, 2, 1, "", "set_params"]], "skfolio.optimization.StackingOptimization": [[127, 2, 1, "", "fit"], [127, 2, 1, "", "fit_predict"], [127, 2, 1, "", "get_metadata_routing"], [127, 2, 1, "", "get_params"], [127, 4, 1, "", "named_estimators"], [127, 2, 1, "", "predict"], [127, 2, 1, "", "score"], [127, 2, 1, "", "set_params"]], "skfolio.population": [[128, 1, 1, "", "Population"]], "skfolio.population.Population": [[128, 2, 1, "", "append"], [128, 2, 1, "", "clear"], [128, 2, 1, "", "composition"], [128, 2, 1, "", "copy"], [128, 2, 1, "", "count"], [128, 2, 1, "", "extend"], [128, 2, 1, "", "filter"], [128, 2, 1, "", "index"], [128, 2, 1, "", "insert"], [128, 2, 1, "", "max_measure"], [128, 2, 1, "", "measures"], [128, 2, 1, "", "measures_mean"], [128, 2, 1, "", "measures_std"], [128, 2, 1, "", "min_measure"], [128, 2, 1, "", "non_denominated_sort"], [128, 2, 1, "", "plot_composition"], [128, 2, 1, "", "plot_cumulative_returns"], [128, 2, 1, "", "plot_distribution"], [128, 2, 1, "", "plot_measures"], [128, 2, 1, "", "pop"], [128, 2, 1, "", "quantile"], [128, 2, 1, "", "remove"], [128, 2, 1, "", "reverse"], [128, 2, 1, "", "set_portfolio_params"], [128, 2, 1, "", "sort"], [128, 2, 1, "", "sort_measure"], [128, 2, 1, "", "summary"]], "skfolio.portfolio": [[129, 1, 1, "", "BasePortfolio"], [130, 1, 1, "", "MultiPeriodPortfolio"], [131, 1, 1, "", "Portfolio"]], "skfolio.portfolio.BasePortfolio": [[129, 4, 1, "", "annualized_factor"], [129, 2, 1, "", "clear"], [129, 4, 1, "", "composition"], [129, 2, 1, "", "copy"], [129, 5, 1, "", "cumulative_returns"], [129, 4, 1, "", "cumulative_returns_df"], [129, 2, 1, "", "dominates"], [129, 5, 1, "", "drawdowns"], [129, 5, 1, "", "fitness"], [129, 4, 1, "", "fitness_measures"], [129, 2, 1, "", "get_measure"], [129, 4, 1, "", "measures_df"], [129, 4, 1, "", "n_observations"], [129, 2, 1, "", "plot_composition"], [129, 2, 1, "", "plot_cumulative_returns"], [129, 2, 1, "", "plot_returns"], [129, 2, 1, "", "plot_rolling_measure"], [129, 4, 1, "", "returns_df"], [129, 2, 1, "", "rolling_measure"], [129, 2, 1, "", "summary"]], "skfolio.portfolio.MultiPeriodPortfolio": [[130, 4, 1, "", "annualized_factor"], [130, 2, 1, "", "append"], [130, 4, 1, "", "assets"], [130, 2, 1, "", "clear"], [130, 4, 1, "", "composition"], [130, 2, 1, "", "copy"], [130, 5, 1, "", "cumulative_returns"], [130, 4, 1, "", "cumulative_returns_df"], [130, 2, 1, "", "dominates"], [130, 5, 1, "", "drawdowns"], [130, 5, 1, "", "fitness"], [130, 4, 1, "", "fitness_measures"], [130, 2, 1, "", "get_measure"], [130, 4, 1, "", "measures_df"], [130, 4, 1, "", "n_observations"], [130, 2, 1, "", "plot_composition"], [130, 2, 1, "", "plot_cumulative_returns"], [130, 2, 1, "", "plot_returns"], [130, 2, 1, "", "plot_rolling_measure"], [130, 4, 1, "", "portfolios"], [130, 4, 1, "", "returns_df"], [130, 2, 1, "", "rolling_measure"], [130, 2, 1, "", "summary"]], "skfolio.portfolio.Portfolio": [[131, 4, 1, "", "annualized_factor"], [131, 2, 1, "", "clear"], [131, 4, 1, "", "composition"], [131, 2, 1, "", "contribution"], [131, 2, 1, "", "copy"], [131, 5, 1, "", "cumulative_returns"], [131, 4, 1, "", "cumulative_returns_df"], [131, 4, 1, "", "diversification"], [131, 2, 1, "", "dominates"], [131, 5, 1, "", "drawdowns"], [131, 4, 1, "", "effective_number_assets"], [131, 2, 1, "", "expected_returns_from_assets"], [131, 5, 1, "", "fitness"], [131, 4, 1, "", "fitness_measures"], [131, 2, 1, "", "get_measure"], [131, 2, 1, "", "get_weight"], [131, 4, 1, "", "measures_df"], [131, 4, 1, "", "n_observations"], [131, 5, 1, "", "nonzero_assets"], [131, 5, 1, "", "nonzero_assets_index"], [131, 2, 1, "", "plot_composition"], [131, 2, 1, "", "plot_contribution"], [131, 2, 1, "", "plot_cumulative_returns"], [131, 2, 1, "", "plot_returns"], [131, 2, 1, "", "plot_rolling_measure"], [131, 4, 1, "", "returns_df"], [131, 2, 1, "", "rolling_measure"], [131, 4, 1, "", "sric"], [131, 2, 1, "", "summary"], [131, 2, 1, "", "variance_from_assets"]], "skfolio.pre_selection": [[132, 1, 1, "", "DropCorrelated"], [133, 1, 1, "", "SelectKExtremes"], [134, 1, 1, "", "SelectNonDominated"]], "skfolio.pre_selection.DropCorrelated": [[132, 2, 1, "", "fit"], [132, 2, 1, "", "fit_transform"], [132, 2, 1, "", "get_feature_names_out"], [132, 2, 1, "", "get_metadata_routing"], [132, 2, 1, "", "get_params"], [132, 2, 1, "", "get_support"], [132, 2, 1, "", "inverse_transform"], [132, 2, 1, "", "set_output"], [132, 2, 1, "", "set_params"], [132, 2, 1, "", "transform"]], "skfolio.pre_selection.SelectKExtremes": [[133, 2, 1, "", "fit"], [133, 2, 1, "", "fit_transform"], [133, 2, 1, "", "get_feature_names_out"], [133, 2, 1, "", "get_metadata_routing"], [133, 2, 1, "", "get_params"], [133, 2, 1, "", "get_support"], [133, 2, 1, "", "inverse_transform"], [133, 2, 1, "", "set_output"], [133, 2, 1, "", "set_params"], [133, 2, 1, "", "transform"]], "skfolio.pre_selection.SelectNonDominated": [[134, 2, 1, "", "fit"], [134, 2, 1, "", "fit_transform"], [134, 2, 1, "", "get_feature_names_out"], [134, 2, 1, "", "get_metadata_routing"], [134, 2, 1, "", "get_params"], [134, 2, 1, "", "get_support"], [134, 2, 1, "", "inverse_transform"], [134, 2, 1, "", "set_output"], [134, 2, 1, "", "set_params"], [134, 2, 1, "", "transform"]], "skfolio.preprocessing": [[135, 3, 1, "", "prices_to_returns"]], "skfolio.prior": [[136, 1, 1, "", "BaseLoadingMatrix"], [137, 1, 1, "", "BasePrior"], [138, 1, 1, "", "BlackLitterman"], [139, 1, 1, "", "EmpiricalPrior"], [140, 1, 1, "", "FactorModel"], [141, 1, 1, "", "LoadingMatrixRegression"], [142, 1, 1, "", "PriorModel"]], "skfolio.prior.BaseLoadingMatrix": [[136, 2, 1, "", "get_metadata_routing"], [136, 2, 1, "", "get_params"], [136, 2, 1, "", "set_params"]], "skfolio.prior.BasePrior": [[137, 2, 1, "", "get_metadata_routing"], [137, 2, 1, "", "get_params"], [137, 2, 1, "", "set_params"]], "skfolio.prior.BlackLitterman": [[138, 2, 1, "", "fit"], [138, 2, 1, "", "get_metadata_routing"], [138, 2, 1, "", "get_params"], [138, 2, 1, "", "set_params"]], "skfolio.prior.EmpiricalPrior": [[139, 2, 1, "", "fit"], [139, 2, 1, "", "get_metadata_routing"], [139, 2, 1, "", "get_params"], [139, 2, 1, "", "set_params"]], "skfolio.prior.FactorModel": [[140, 2, 1, "", "fit"], [140, 2, 1, "", "get_metadata_routing"], [140, 2, 1, "", "get_params"], [140, 2, 1, "", "set_params"]], "skfolio.prior.LoadingMatrixRegression": [[141, 2, 1, "", "fit"], [141, 2, 1, "", "get_metadata_routing"], [141, 2, 1, "", "get_params"], [141, 2, 1, "", "set_params"]], "skfolio.uncertainty_set": [[143, 1, 1, "", "BaseCovarianceUncertaintySet"], [144, 1, 1, "", "BaseMuUncertaintySet"], [145, 1, 1, "", "BootstrapCovarianceUncertaintySet"], [146, 1, 1, "", "BootstrapMuUncertaintySet"], [147, 1, 1, "", "EmpiricalCovarianceUncertaintySet"], [148, 1, 1, "", "EmpiricalMuUncertaintySet"], [149, 1, 1, "", "UncertaintySet"]], "skfolio.uncertainty_set.BaseCovarianceUncertaintySet": [[143, 2, 1, "", "get_metadata_routing"], [143, 2, 1, "", "get_params"], [143, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.BaseMuUncertaintySet": [[144, 2, 1, "", "get_metadata_routing"], [144, 2, 1, "", "get_params"], [144, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet": [[145, 2, 1, "", "fit"], [145, 2, 1, "", "get_metadata_routing"], [145, 2, 1, "", "get_params"], [145, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.BootstrapMuUncertaintySet": [[146, 2, 1, "", "fit"], [146, 2, 1, "", "get_metadata_routing"], [146, 2, 1, "", "get_params"], [146, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet": [[147, 2, 1, "", "fit"], [147, 2, 1, "", "get_metadata_routing"], [147, 2, 1, "", "get_params"], [147, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.EmpiricalMuUncertaintySet": [[148, 2, 1, "", "fit"], [148, 2, 1, "", "get_metadata_routing"], [148, 2, 1, "", "get_params"], [148, 2, 1, "", "set_params"]], "skfolio.utils.stats": [[150, 3, 1, "", "NBinsMethod"], [151, 3, 1, "", "assert_is_distance"], [152, 3, 1, "", "assert_is_square"], [153, 3, 1, "", "assert_is_symmetric"], [154, 3, 1, "", "commutation_matrix"], [155, 3, 1, "", "compute_optimal_n_clusters"], [156, 3, 1, "", "corr_to_cov"], [157, 3, 1, "", "cov_nearest"], [158, 3, 1, "", "cov_to_corr"], [159, 3, 1, "", "is_cholesky_dec"], [160, 3, 1, "", "n_bins_freedman"], [161, 3, 1, "", "n_bins_knuth"], [162, 3, 1, "", "rand_weights"], [163, 3, 1, "", "rand_weights_dirichlet"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": 0, "refer": 0, "skfolio": [0, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 168], "measur": [0, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91], "base": [0, 178], "class": 0, "function": 0, "portfolio": [0, 12, 13, 129, 130, 131, 168, 178], "popul": [0, 128, 177], "optim": [0, 10, 32, 35, 36, 45, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 164, 168, 172, 176], "naiv": [0, 176], "estim": [0, 29, 30, 32, 166, 167, 170, 171, 172, 176, 180, 181], "convex": 0, "enum": 0, "cluster": [0, 28, 32, 45, 47, 48, 164, 166, 176], "ensembl": [0, 35, 45], "prior": [0, 3, 29, 136, 137, 138, 139, 140, 141, 142, 176, 180], "model": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 164, 175, 180], "dataclass": 0, "load": [0, 164], "matrix": 0, "factor": [0, 5, 6, 164, 180], "moment": [0, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112], "mu": 0, "covari": [0, 20, 164, 167], "distanc": [0, 29, 30, 32, 54, 55, 56, 57, 58, 59, 60, 170], "uncertainty_set": [0, 143, 144, 145, 146, 147, 148, 149], "uncertainti": [0, 15, 164, 181], "set": [0, 15, 164, 181], "pre_select": [0, 132, 133, 134], "pre": [0, 38, 45, 164, 179], "select": [0, 38, 40, 45, 164, 175, 179], "transform": [0, 179], "model_select": [0, 93, 94, 95, 96], "metric": [0, 92, 172], "dataset": [0, 49, 50, 51, 52, 53, 164, 169], "preprocess": [0, 135], "util": [0, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "stat": [0, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "mean": [1, 10, 45, 81, 176], "risk": [1, 17, 18, 19, 20, 29, 30, 45, 164, 176], "track": 2, "error": 2, "data": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 42, 45, 168], "predict": [2, 3, 4, 5, 6, 7, 8, 9, 14, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 164, 175], "empir": [3, 4, 5, 180], "benchmark": [3, 36], "black": [4, 6, 164, 180], "litterman": [4, 6, 164, 180], "analyst": [4, 6], "view": [4, 6], "analysi": [5, 7, 8, 9, 10, 18, 19, 20, 23, 26, 31, 33, 36], "maximum": [7, 22, 23, 45, 164, 176], "sharp": 7, "ratio": [7, 164], "conclus": [7, 8, 33, 36], "minimum": [8, 164], "cvar": [8, 19, 25, 26, 29, 45, 68, 164, 176], "effici": [9, 14, 15], "frontier": [9, 14, 15], "varianc": [10, 18, 90, 164], "cdar": [10, 30, 67], "surfac": 10, "pareto": 10, "weight": [11, 164], "constraint": [11, 164], "budget": [11, 17, 19, 45, 176], "lower": 11, "upper": 11, "bound": 11, "short": 11, "long": 11, "posit": 11, "group": 11, "linear": [11, 43, 168], "left": 11, "right": 11, "inequ": 11, "transact": [12, 164], "cost": [12, 164], "multi": [12, 13, 178], "period": [12, 13, 178], "manag": 13, "fee": 13, "l1": 14, "l2": [14, 164], "regular": 14, "hyper": [14, 15, 172], "paramet": [14, 15, 31, 33, 36, 40, 164, 172], "tune": [14, 15, 31, 33, 36, 40, 172], "comput": [16, 21, 24, 27, 34, 37, 41, 44, 46, 165], "time": [16, 21, 24, 27, 34, 37, 41, 44, 46, 165], "pariti": [18, 20, 29, 164, 176], "contribut": [18, 19, 29, 30, 176], "shrinkag": 20, "diversif": [22, 23, 45, 176], "distribution": [25, 26, 45, 176], "robust": [25, 26, 45, 176], "hierarch": [28, 29, 30, 45, 176], "nco": [28, 33, 45], "dendrogram": [29, 30, 32], "linkag": [29, 30, 32], "method": [29, 30, 32, 178], "composit": [29, 30, 32, 172], "summari": 29, "equal": [30, 176], "hrp": 31, "v": 31, "herc": 31, "combinatori": [31, 33, 36, 39, 164, 175], "purg": [31, 33, 36, 39, 164, 175], "cross": [31, 33, 36, 39, 164, 175], "valid": [31, 33, 36, 39, 164, 175], "distribut": [31, 33, 36, 39], "nest": [32, 164, 176], "cv": 33, "stack": [36, 176], "drop": 39, "highli": 39, "correl": 39, "asset": 39, "pipelin": [39, 40, 164], "best": 40, "perform": 40, "prepar": [42, 45, 168], "invest": 43, "horizon": 43, "price": 43, "return": [43, 164, 168, 171], "exampl": [45, 168], "hierarchicalclust": 47, "linkagemethod": 48, "load_factors_dataset": 49, "load_ftse100_dataset": 50, "load_nasdaq_dataset": 51, "load_sp500_dataset": 52, "load_sp500_index": 53, "basedist": 54, "covariancedist": 55, "distancecorrel": 56, "kendalldist": 57, "mutualinform": 58, "pearsondist": 59, "spearmandist": 60, "basemeasur": 61, "extrariskmeasur": 62, "perfmeasur": 63, "ratiomeasur": 64, "riskmeasur": 65, "average_drawdown": 66, "drawdown_at_risk": 69, "edar": 70, "effective_number_asset": 71, "entropic_risk_measur": 72, "evar": 73, "first_lower_partial_mo": 74, "fourth_central_mo": 75, "fourth_lower_partial_mo": 76, "get_cumulative_return": 77, "get_drawdown": 78, "gini_mean_differ": 79, "max_drawdown": 80, "mean_absolute_devi": 82, "owa_gmd_weight": 83, "semi_devi": 84, "semi_vari": 85, "standard_devi": 86, "third_central_mo": 87, "ulcer_index": 88, "value_at_risk": 89, "worst_real": 91, "make_scor": 92, "basecombinatorialcv": 93, "combinatorialpurgedcv": 94, "walkforward": 95, "cross_val_predict": 96, "basecovari": 97, "basemu": 98, "denoisecovari": 99, "detonecovari": 100, "ewcovari": 101, "ewmu": 102, "empiricalcovari": 103, "empiricalmu": 104, "equilibriummu": 105, "gerbercovari": 106, "graphicallassocv": 107, "ledoitwolf": 108, "oa": 109, "shrunkcovari": 110, "shrunkmu": 111, "shrunkmumethod": 112, "basecomposit": 113, "basehierarchicaloptim": 114, "convexoptim": 115, "distributionallyrobustcvar": 116, "equalweight": 117, "hierarchicalequalriskcontribut": 118, "hierarchicalriskpar": 119, "inversevolatil": 120, "maximumdiversif": 121, "meanrisk": 122, "nestedclustersoptim": 123, "objectivefunct": 124, "random": [125, 164, 172], "riskbudget": 126, "stackingoptim": 127, "baseportfolio": 129, "multiperiodportfolio": 130, "dropcorrel": 132, "selectkextrem": 133, "selectnondomin": 134, "prices_to_return": 135, "baseloadingmatrix": 136, "baseprior": 137, "blacklitterman": 138, "empiricalprior": 139, "factormodel": 140, "loadingmatrixregress": 141, "priormodel": 142, "basecovarianceuncertaintyset": 143, "basemuuncertaintyset": 144, "bootstrapcovarianceuncertaintyset": 145, "bootstrapmuuncertaintyset": 146, "empiricalcovarianceuncertaintyset": 147, "empiricalmuuncertaintyset": 148, "uncertaintyset": 149, "nbinsmethod": 150, "assert_is_dist": 151, "assert_is_squar": 152, "assert_is_symmetr": 153, "commutation_matrix": 154, "compute_optimal_n_clust": 155, "corr_to_cov": 156, "cov_nearest": 157, "cov_to_corr": 158, "is_cholesky_dec": 159, "n_bins_freedman": 160, "n_bins_knuth": 161, "rand_weight": 162, "rand_weights_dirichlet": 163, "instal": [164, 174], "kei": 164, "concept": 164, "avail": 164, "quickstart": 164, "import": 164, "train": 164, "test": 164, "split": 164, "fit": 164, "sortino": 164, "denois": 164, "shrunk": 164, "expect": [164, 171], "gerber": 164, "parallel": [164, 172], "search": [164, 172], "norm": 164, "grid": [164, 172], "embed": 164, "deton": 164, "k": 164, "fold": 164, "recognit": 164, "citat": 164, "logarithm": 168, "pitfal": 168, "The": 168, "correct": 168, "approach": 168, "stock": 168, "In": 168, "exhaust": 172, "tip": 172, "specifi": 172, "an": 172, "object": 172, "space": 172, "user": 173, "guid": 173, "alloc": 176, "combin": [176, 180], "custom": 176, "worst": 176, "case": 176, "go": 176, "further": 176, "attribut": 178, "multipl": 180}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "skfolio.measures: Measures": [[0, "module-skfolio.measures"]], "Base Classe": [[0, "base-classe"], [0, "id2"]], "Classes": [[0, "classes"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "id6"], [0, "id7"], [0, "id8"], [0, "id9"], [0, "id11"], [0, "id13"], [0, "id16"], [0, "id17"], [0, "id19"], [0, "id20"], [0, "id22"]], "Functions": [[0, "functions"], [0, "id23"], [0, "id24"], [0, "id25"], [0, "id26"], [0, "id27"]], "skfolio.portfolio: Portfolio": [[0, "module-skfolio.portfolio"]], "skfolio.population: Population": [[0, "module-skfolio.population"]], "skfolio.optimization.naive: Naive Optimization Estimators": [[0, "module-skfolio.optimization.naive"]], "skfolio.optimization.convex: Convex Optimization Estimators": [[0, "module-skfolio.optimization.convex"]], "Enum": [[0, "enum"]], "skfolio.optimization.cluster: Clustering Optimization Estimators": [[0, "module-skfolio.optimization.cluster"]], "skfolio.optimization.ensemble: Ensemble Optimization Estimators": [[0, "module-skfolio.optimization.ensemble"]], "skfolio.prior: Prior Estimators": [[0, "module-skfolio"]], "Model Dataclass": [[0, "model-dataclass"], [0, "id18"]], "Base Class": [[0, "base-class"], [0, "id10"], [0, "id12"], [0, "id15"]], "Loading Matrix Classes for Factor Models": [[0, "loading-matrix-classes-for-factor-models"]], "skfolio.moments.mu: Mu Estimators": [[0, "module-0"]], "skfolio.moments.covariance: Covariance Estimators": [[0, "module-1"]], "skfolio.distance: Distance Estimators": [[0, "module-2"]], "skfolio.cluster: Cluster Estimators": [[0, "module-3"]], "skfolio.uncertainty_set: Uncertainty set Estimators": [[0, "module-4"]], "Base Classes": [[0, "base-classes"], [0, "id21"]], "skfolio.pre_selection: Pre-selection Transformers": [[0, "module-5"]], "skfolio.model_selection: Model Selection": [[0, "module-6"]], "skfolio.metrics: Metrics": [[0, "module-7"]], "skfolio.datasets: Datasets": [[0, "skfolio-datasets-datasets"]], "skfolio.preprocessing: Preprocessing": [[0, "skfolio-preprocessing-preprocessing"]], "skfolio.utils.stats: Stats": [[0, "skfolio-utils-stats-stats"]], "Mean-Risk": [[1, "mean-risk"], [45, "mean-risk"]], "Tracking Error": [[2, "tracking-error"]], "Data": [[2, "data"], [3, "data"], [4, "data"], [5, "data"], [6, "data"], [7, "data"], [8, "data"], [9, "data"], [10, "data"], [11, "data"], [12, "data"], [13, "data"], [14, "data"], [15, "data"], [18, "data"], [19, "data"], [20, "data"], [23, "data"], [26, "data"], [29, "data"], [30, "data"], [31, "data"], [32, "data"], [33, "data"], [36, "data"], [39, "data"], [40, "data"]], "Model": [[2, "model"], [3, "model"], [7, "model"], [8, "model"], [9, "model"], [10, "model"], [11, "model"], [12, "model"], [13, "model"], [18, "model"], [19, "model"], [20, "model"], [23, "model"], [26, "model"], [29, "model"], [30, "model"], [31, "model"], [32, "model"], [33, "model"], [39, "model"], [40, "model"], [43, "model"]], "Prediction": [[2, "prediction"], [3, "prediction"], [4, "prediction"], [5, "prediction"], [6, "prediction"], [7, "prediction"], [8, "prediction"], [9, "prediction"], [14, "prediction"], [18, "prediction"], [19, "prediction"], [20, "prediction"], [23, "prediction"], [26, "prediction"], [29, "prediction"], [30, "prediction"], [31, "prediction"], [32, "prediction"], [33, "prediction"], [36, "prediction"], [39, "prediction"], [40, "prediction"]], "Empirical Prior": [[3, "empirical-prior"], [180, "empirical-prior"]], "Benchmark": [[3, "benchmark"], [36, "benchmark"]], "Black & Litterman": [[4, "black-litterman"], [180, "black-litterman"]], "Analyst views": [[4, "analyst-views"], [6, "analyst-views"]], "Black & Litterman Model": [[4, "black-litterman-model"], [164, "black-litterman-model"]], "Empirical Model": [[4, "empirical-model"], [5, "empirical-model"]], "Factor Model": [[5, "factor-model"], [5, "id1"], [164, "factor-model"], [180, "factor-model"]], "Factor Analysis": [[5, "factor-analysis"]], "Black & Litterman Factor Model": [[6, "black-litterman-factor-model"], [6, "id1"], [164, "black-litterman-factor-model"]], "Maximum Sharpe Ratio": [[7, "maximum-sharpe-ratio"]], "Analysis": [[7, "analysis"], [8, "analysis"], [9, "analysis"], [10, "analysis"], [18, "analysis"], [19, "analysis"], [20, "analysis"], [23, "analysis"], [26, "analysis"], [31, "analysis"], [33, "analysis"], [36, "analysis"]], "Conclusion": [[7, "conclusion"], [8, "conclusion"], [33, "conclusion"], [36, "conclusion"]], "Minimum CVaR": [[8, "minimum-cvar"]], "Efficient Frontier": [[9, "efficient-frontier"], [14, "efficient-frontier"], [15, "efficient-frontier"]], "Mean-Variance-CDaR Surface": [[10, "mean-variance-cdar-surface"]], "Pareto Optimal Surface": [[10, "pareto-optimal-surface"]], "Weight Constraints": [[11, "weight-constraints"]], "Budget": [[11, "budget"]], "Lower and Upper Bounds on Weights": [[11, "lower-and-upper-bounds-on-weights"]], "Short and Long Position Constraints": [[11, "short-and-long-position-constraints"]], "Group and Linear Constraints": [[11, "group-and-linear-constraints"]], "Left and Right Inequalities": [[11, "left-and-right-inequalities"]], "Transaction Costs": [[12, "transaction-costs"]], "Transaction Cost": [[12, "transaction-cost"]], "Multi-period portfolio": [[12, "multi-period-portfolio"], [13, "multi-period-portfolio"]], "Management Fees": [[13, "management-fees"], [13, "id1"]], "L1 and L2 Regularization": [[14, "l1-and-l2-regularization"]], "Hyper-parameter Tuning": [[14, "hyper-parameter-tuning"]], "Uncertainty Set": [[15, "uncertainty-set"]], "Hyper-Parameter Tuning": [[15, "hyper-parameter-tuning"]], "Computation times": [[16, "computation-times"], [21, "computation-times"], [24, "computation-times"], [27, "computation-times"], [34, "computation-times"], [37, "computation-times"], [41, "computation-times"], [44, "computation-times"], [46, "computation-times"], [165, "computation-times"]], "Risk Budgeting": [[17, "risk-budgeting"], [45, "risk-budgeting"], [176, "risk-budgeting"]], "Risk Parity - Variance": [[18, "risk-parity-variance"]], "Risk Contribution Analysis": [[18, "risk-contribution-analysis"], [19, "risk-contribution-analysis"]], "Risk Budgeting - CVaR": [[19, "risk-budgeting-cvar"]], "Risk Budget": [[19, "risk-budget"]], "Risk Parity - Covariance shrinkage": [[20, "risk-parity-covariance-shrinkage"]], "Maximum Diversification": [[22, "maximum-diversification"], [23, "maximum-diversification"], [45, "maximum-diversification"], [176, "maximum-diversification"]], "Diversification Analysis": [[23, "diversification-analysis"]], "Distributionally Robust CVaR": [[25, "distributionally-robust-cvar"], [26, "distributionally-robust-cvar"], [45, "distributionally-robust-cvar"], [176, "distributionally-robust-cvar"]], "Hierarchical Clustering and NCO": [[28, "hierarchical-clustering-and-nco"], [45, "hierarchical-clustering-and-nco"]], "Hierarchical Risk Parity - CVaR": [[29, "hierarchical-risk-parity-cvar"]], "Risk Contribution": [[29, "risk-contribution"], [30, "risk-contribution"]], "Dendrogram": [[29, "dendrogram"], [30, "dendrogram"], [32, "dendrogram"]], "Linkage Methods": [[29, "linkage-methods"], [30, "linkage-methods"], [32, "linkage-methods"]], "Distance Estimator": [[29, "distance-estimator"], [30, "distance-estimator"], [32, "distance-estimator"], [170, "distance-estimator"]], "Prior Estimator": [[29, "prior-estimator"], [176, "prior-estimator"], [180, "prior-estimator"]], "Composition": [[29, "composition"], [30, "composition"], [32, "composition"]], "Summary": [[29, "summary"]], "Hierarchical Equal Risk Contribution - CDaR": [[30, "hierarchical-equal-risk-contribution-cdar"]], "HRP vs HERC": [[31, "hrp-vs-herc"]], "Parameter Tuning": [[31, "parameter-tuning"], [33, "parameter-tuning"], [36, "parameter-tuning"], [40, "parameter-tuning"]], "Combinatorial Purged Cross-Validation": [[31, "combinatorial-purged-cross-validation"], [33, "combinatorial-purged-cross-validation"], [36, "combinatorial-purged-cross-validation"], [39, "combinatorial-purged-cross-validation"], [164, "combinatorial-purged-cross-validation"], [175, "combinatorial-purged-cross-validation"]], "Distribution": [[31, "distribution"], [33, "distribution"], [36, "distribution"], [39, "distribution"]], "Nested Clusters Optimization": [[32, "nested-clusters-optimization"], [176, "nested-clusters-optimization"]], "Clustering Estimator": [[32, "clustering-estimator"]], "NCO - Combinatorial Purged CV": [[33, "nco-combinatorial-purged-cv"]], "Ensemble Optimizations": [[35, "ensemble-optimizations"], [45, "ensemble-optimizations"]], "Stacking Optimization": [[36, "stacking-optimization"], [176, "stacking-optimization"]], "Stacking Model": [[36, "stacking-model"]], "Pre-selection": [[38, "pre-selection"], [45, "pre-selection"]], "Drop Highly Correlated Assets": [[39, "drop-highly-correlated-assets"]], "Pipeline": [[39, "pipeline"], [40, "pipeline"]], "Select Best Performers": [[40, "select-best-performers"]], "Data Preparation": [[42, "data-preparation"], [45, "data-preparation"], [168, "data-preparation"]], "Investment Horizon": [[43, "investment-horizon"]], "Prices": [[43, "prices"]], "Linear Returns": [[43, "linear-returns"]], "Examples": [[45, "examples"]], "skfolio.cluster.HierarchicalClustering": [[47, "skfolio-cluster-hierarchicalclustering"]], "skfolio.cluster.LinkageMethod": [[48, "skfolio-cluster-linkagemethod"]], "skfolio.datasets.load_factors_dataset": [[49, "skfolio-datasets-load-factors-dataset"]], "skfolio.datasets.load_ftse100_dataset": [[50, "skfolio-datasets-load-ftse100-dataset"]], "skfolio.datasets.load_nasdaq_dataset": [[51, "skfolio-datasets-load-nasdaq-dataset"]], "skfolio.datasets.load_sp500_dataset": [[52, "skfolio-datasets-load-sp500-dataset"]], "skfolio.datasets.load_sp500_index": [[53, "skfolio-datasets-load-sp500-index"]], "skfolio.distance.BaseDistance": [[54, "skfolio-distance-basedistance"]], "skfolio.distance.CovarianceDistance": [[55, "skfolio-distance-covariancedistance"]], "skfolio.distance.DistanceCorrelation": [[56, "skfolio-distance-distancecorrelation"]], "skfolio.distance.KendallDistance": [[57, "skfolio-distance-kendalldistance"]], "skfolio.distance.MutualInformation": [[58, "skfolio-distance-mutualinformation"]], "skfolio.distance.PearsonDistance": [[59, "skfolio-distance-pearsondistance"]], "skfolio.distance.SpearmanDistance": [[60, "skfolio-distance-spearmandistance"]], "skfolio.measures.BaseMeasure": [[61, "skfolio-measures-basemeasure"]], "skfolio.measures.ExtraRiskMeasure": [[62, "skfolio-measures-extrariskmeasure"]], "skfolio.measures.PerfMeasure": [[63, "skfolio-measures-perfmeasure"]], "skfolio.measures.RatioMeasure": [[64, "skfolio-measures-ratiomeasure"]], "skfolio.measures.RiskMeasure": [[65, "skfolio-measures-riskmeasure"]], "skfolio.measures.average_drawdown": [[66, "skfolio-measures-average-drawdown"]], "skfolio.measures.cdar": [[67, "skfolio-measures-cdar"]], "skfolio.measures.cvar": [[68, "skfolio-measures-cvar"]], "skfolio.measures.drawdown_at_risk": [[69, "skfolio-measures-drawdown-at-risk"]], "skfolio.measures.edar": [[70, "skfolio-measures-edar"]], "skfolio.measures.effective_number_assets": [[71, "skfolio-measures-effective-number-assets"]], "skfolio.measures.entropic_risk_measure": [[72, "skfolio-measures-entropic-risk-measure"]], "skfolio.measures.evar": [[73, "skfolio-measures-evar"]], "skfolio.measures.first_lower_partial_moment": [[74, "skfolio-measures-first-lower-partial-moment"]], "skfolio.measures.fourth_central_moment": [[75, "skfolio-measures-fourth-central-moment"]], "skfolio.measures.fourth_lower_partial_moment": [[76, "skfolio-measures-fourth-lower-partial-moment"]], "skfolio.measures.get_cumulative_returns": [[77, "skfolio-measures-get-cumulative-returns"]], "skfolio.measures.get_drawdowns": [[78, "skfolio-measures-get-drawdowns"]], "skfolio.measures.gini_mean_difference": [[79, "skfolio-measures-gini-mean-difference"]], "skfolio.measures.max_drawdown": [[80, "skfolio-measures-max-drawdown"]], "skfolio.measures.mean": [[81, "skfolio-measures-mean"]], "skfolio.measures.mean_absolute_deviation": [[82, "skfolio-measures-mean-absolute-deviation"]], "skfolio.measures.owa_gmd_weights": [[83, "skfolio-measures-owa-gmd-weights"]], "skfolio.measures.semi_deviation": [[84, "skfolio-measures-semi-deviation"]], "skfolio.measures.semi_variance": [[85, "skfolio-measures-semi-variance"]], "skfolio.measures.standard_deviation": [[86, "skfolio-measures-standard-deviation"]], "skfolio.measures.third_central_moment": [[87, "skfolio-measures-third-central-moment"]], "skfolio.measures.ulcer_index": [[88, "skfolio-measures-ulcer-index"]], "skfolio.measures.value_at_risk": [[89, "skfolio-measures-value-at-risk"]], "skfolio.measures.variance": [[90, "skfolio-measures-variance"]], "skfolio.measures.worst_realization": [[91, "skfolio-measures-worst-realization"]], "skfolio.metrics.make_scorer": [[92, "skfolio-metrics-make-scorer"]], "skfolio.model_selection.BaseCombinatorialCV": [[93, "skfolio-model-selection-basecombinatorialcv"]], "skfolio.model_selection.CombinatorialPurgedCV": [[94, "skfolio-model-selection-combinatorialpurgedcv"]], "skfolio.model_selection.WalkForward": [[95, "skfolio-model-selection-walkforward"]], "skfolio.model_selection.cross_val_predict": [[96, "skfolio-model-selection-cross-val-predict"]], "skfolio.moments.BaseCovariance": [[97, "skfolio-moments-basecovariance"]], "skfolio.moments.BaseMu": [[98, "skfolio-moments-basemu"]], "skfolio.moments.DenoiseCovariance": [[99, "skfolio-moments-denoisecovariance"]], "skfolio.moments.DetoneCovariance": [[100, "skfolio-moments-detonecovariance"]], "skfolio.moments.EWCovariance": [[101, "skfolio-moments-ewcovariance"]], "skfolio.moments.EWMu": [[102, "skfolio-moments-ewmu"]], "skfolio.moments.EmpiricalCovariance": [[103, "skfolio-moments-empiricalcovariance"]], "skfolio.moments.EmpiricalMu": [[104, "skfolio-moments-empiricalmu"]], "skfolio.moments.EquilibriumMu": [[105, "skfolio-moments-equilibriummu"]], "skfolio.moments.GerberCovariance": [[106, "skfolio-moments-gerbercovariance"]], "skfolio.moments.GraphicalLassoCV": [[107, "skfolio-moments-graphicallassocv"]], "skfolio.moments.LedoitWolf": [[108, "skfolio-moments-ledoitwolf"]], "skfolio.moments.OAS": [[109, "skfolio-moments-oas"]], "skfolio.moments.ShrunkCovariance": [[110, "skfolio-moments-shrunkcovariance"]], "skfolio.moments.ShrunkMu": [[111, "skfolio-moments-shrunkmu"]], "skfolio.moments.ShrunkMuMethods": [[112, "skfolio-moments-shrunkmumethods"]], "skfolio.optimization.BaseComposition": [[113, "skfolio-optimization-basecomposition"]], "skfolio.optimization.BaseHierarchicalOptimization": [[114, "skfolio-optimization-basehierarchicaloptimization"]], "skfolio.optimization.ConvexOptimization": [[115, "skfolio-optimization-convexoptimization"]], "skfolio.optimization.DistributionallyRobustCVaR": [[116, "skfolio-optimization-distributionallyrobustcvar"]], "skfolio.optimization.EqualWeighted": [[117, "skfolio-optimization-equalweighted"]], "skfolio.optimization.HierarchicalEqualRiskContribution": [[118, "skfolio-optimization-hierarchicalequalriskcontribution"]], "skfolio.optimization.HierarchicalRiskParity": [[119, "skfolio-optimization-hierarchicalriskparity"]], "skfolio.optimization.InverseVolatility": [[120, "skfolio-optimization-inversevolatility"]], "skfolio.optimization.MaximumDiversification": [[121, "skfolio-optimization-maximumdiversification"]], "skfolio.optimization.MeanRisk": [[122, "skfolio-optimization-meanrisk"]], "skfolio.optimization.NestedClustersOptimization": [[123, "skfolio-optimization-nestedclustersoptimization"]], "skfolio.optimization.ObjectiveFunction": [[124, "skfolio-optimization-objectivefunction"]], "skfolio.optimization.Random": [[125, "skfolio-optimization-random"]], "skfolio.optimization.RiskBudgeting": [[126, "skfolio-optimization-riskbudgeting"]], "skfolio.optimization.StackingOptimization": [[127, "skfolio-optimization-stackingoptimization"]], "skfolio.population.Population": [[128, "skfolio-population-population"]], "skfolio.portfolio.BasePortfolio": [[129, "skfolio-portfolio-baseportfolio"]], "skfolio.portfolio.MultiPeriodPortfolio": [[130, "skfolio-portfolio-multiperiodportfolio"]], "skfolio.portfolio.Portfolio": [[131, "skfolio-portfolio-portfolio"]], "skfolio.pre_selection.DropCorrelated": [[132, "skfolio-pre-selection-dropcorrelated"]], "skfolio.pre_selection.SelectKExtremes": [[133, "skfolio-pre-selection-selectkextremes"]], "skfolio.pre_selection.SelectNonDominated": [[134, "skfolio-pre-selection-selectnondominated"]], "skfolio.preprocessing.prices_to_returns": [[135, "skfolio-preprocessing-prices-to-returns"]], "skfolio.prior.BaseLoadingMatrix": [[136, "skfolio-prior-baseloadingmatrix"]], "skfolio.prior.BasePrior": [[137, "skfolio-prior-baseprior"]], "skfolio.prior.BlackLitterman": [[138, "skfolio-prior-blacklitterman"]], "skfolio.prior.EmpiricalPrior": [[139, "skfolio-prior-empiricalprior"]], "skfolio.prior.FactorModel": [[140, "skfolio-prior-factormodel"]], "skfolio.prior.LoadingMatrixRegression": [[141, "skfolio-prior-loadingmatrixregression"]], "skfolio.prior.PriorModel": [[142, "skfolio-prior-priormodel"]], "skfolio.uncertainty_set.BaseCovarianceUncertaintySet": [[143, "skfolio-uncertainty-set-basecovarianceuncertaintyset"]], "skfolio.uncertainty_set.BaseMuUncertaintySet": [[144, "skfolio-uncertainty-set-basemuuncertaintyset"]], "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet": [[145, "skfolio-uncertainty-set-bootstrapcovarianceuncertaintyset"]], "skfolio.uncertainty_set.BootstrapMuUncertaintySet": [[146, "skfolio-uncertainty-set-bootstrapmuuncertaintyset"]], "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet": [[147, "skfolio-uncertainty-set-empiricalcovarianceuncertaintyset"]], "skfolio.uncertainty_set.EmpiricalMuUncertaintySet": [[148, "skfolio-uncertainty-set-empiricalmuuncertaintyset"]], "skfolio.uncertainty_set.UncertaintySet": [[149, "skfolio-uncertainty-set-uncertaintyset"]], "skfolio.utils.stats.NBinsMethod": [[150, "skfolio-utils-stats-nbinsmethod"]], "skfolio.utils.stats.assert_is_distance": [[151, "skfolio-utils-stats-assert-is-distance"]], "skfolio.utils.stats.assert_is_square": [[152, "skfolio-utils-stats-assert-is-square"]], "skfolio.utils.stats.assert_is_symmetric": [[153, "skfolio-utils-stats-assert-is-symmetric"]], "skfolio.utils.stats.commutation_matrix": [[154, "skfolio-utils-stats-commutation-matrix"]], "skfolio.utils.stats.compute_optimal_n_clusters": [[155, "skfolio-utils-stats-compute-optimal-n-clusters"]], "skfolio.utils.stats.corr_to_cov": [[156, "skfolio-utils-stats-corr-to-cov"]], "skfolio.utils.stats.cov_nearest": [[157, "skfolio-utils-stats-cov-nearest"]], "skfolio.utils.stats.cov_to_corr": [[158, "skfolio-utils-stats-cov-to-corr"]], "skfolio.utils.stats.is_cholesky_dec": [[159, "skfolio-utils-stats-is-cholesky-dec"]], "skfolio.utils.stats.n_bins_freedman": [[160, "skfolio-utils-stats-n-bins-freedman"]], "skfolio.utils.stats.n_bins_knuth": [[161, "skfolio-utils-stats-n-bins-knuth"]], "skfolio.utils.stats.rand_weights": [[162, "skfolio-utils-stats-rand-weights"]], "skfolio.utils.stats.rand_weights_dirichlet": [[163, "skfolio-utils-stats-rand-weights-dirichlet"]], "skfolio": [[164, "skfolio"]], "Installation": [[164, "installation"], [174, "installation"]], "Key Concepts": [[164, "key-concepts"]], "Available models": [[164, "available-models"]], "Quickstart": [[164, "quickstart"]], "Imports": [[164, "imports"]], "Load Dataset": [[164, "load-dataset"]], "Train/Test split": [[164, "train-test-split"]], "Minimum Variance": [[164, "minimum-variance"]], "Fit on training set": [[164, "fit-on-training-set"]], "Predict on test set": [[164, "predict-on-test-set"]], "Maximum Sortino Ratio": [[164, "maximum-sortino-ratio"]], "Denoised Covariance & Shrunk Expected Returns": [[164, "denoised-covariance-shrunk-expected-returns"]], "Uncertainty Set on Expected Returns": [[164, "uncertainty-set-on-expected-returns"]], "Weight Constraints & Transaction Costs": [[164, "weight-constraints-transaction-costs"]], "Risk Parity on CVaR": [[164, "risk-parity-on-cvar"]], "Risk Parity & Gerber Covariance": [[164, "risk-parity-gerber-covariance"]], "Nested Cluster Optimization with cross-validation and parallelization": [[164, "nested-cluster-optimization-with-cross-validation-and-parallelization"]], "Randomized Search of the L2 Norm": [[164, "randomized-search-of-the-l2-norm"]], "Grid Search on embedded parameters": [[164, "grid-search-on-embedded-parameters"]], "Factor Model & Covariance Detoning": [[164, "factor-model-covariance-detoning"]], "Pre-Selection Pipeline": [[164, "pre-selection-pipeline"]], "K-fold Cross-Validation": [[164, "k-fold-cross-validation"]], "Recognition": [[164, "recognition"]], "Citation": [[164, "citation"]], "Clustering Estimators": [[166, "clustering-estimators"]], "Covariance Estimator": [[167, "covariance-estimator"]], "Linear return": [[168, "linear-return"]], "Logarithmic return": [[168, "logarithmic-return"]], "Pitfall in Portfolio Optimization": [[168, "pitfall-in-portfolio-optimization"]], "The correct approach": [[168, "the-correct-approach"]], "Example for stocks": [[168, "example-for-stocks"]], "In skfolio": [[168, "in-skfolio"]], "Datasets": [[169, "datasets"]], "Expected Return Estimator": [[171, "expected-return-estimator"]], "Hyper-Parameters Tuning": [[172, "hyper-parameters-tuning"]], "Exhaustive Grid Search": [[172, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[172, "randomized-parameter-optimization"]], "Tips for Parameter Search": [[172, "tips-for-parameter-search"]], "Specifying an Objective Metric": [[172, "specifying-an-objective-metric"]], "Composite Estimators and Parameter Spaces": [[172, "composite-estimators-and-parameter-spaces"]], "Parallelism": [[172, "parallelism"]], "User Guide": [[173, "user-guide"]], "Model Selection": [[175, "model-selection"]], "Cross-Validation Prediction": [[175, "cross-validation-prediction"]], "Optimization": [[176, "optimization"]], "Naive Allocation": [[176, "naive-allocation"]], "Mean-Risk Optimization": [[176, "mean-risk-optimization"]], "Combining Prior Estimators": [[176, "combining-prior-estimators"]], "Custom Estimator": [[176, "custom-estimator"]], "Worst-Case Optimization": [[176, "worst-case-optimization"]], "Going Further": [[176, "going-further"]], "Hierarchical Risk Parity": [[176, "hierarchical-risk-parity"]], "Hierarchical Equal Risk Contribution": [[176, "hierarchical-equal-risk-contribution"]], "Population": [[177, "population"]], "Portfolio": [[178, "portfolio"], [178, "id2"]], "Base Portfolio": [[178, "base-portfolio"]], "Attributes and Methods": [[178, "attributes-and-methods"], [178, "id3"]], "Multi Period Portfolio": [[178, "multi-period-portfolio"]], "Pre-Selection Transformers": [[179, "pre-selection-transformers"]], "Combining Multiple Prior Estimators": [[180, "combining-multiple-prior-estimators"]], "Uncertainty Set Estimator": [[181, "uncertainty-set-estimator"]]}, "indexentries": {"module": [[0, "module-0"], [0, "module-1"], [0, "module-2"], [0, "module-3"], [0, "module-4"], [0, "module-5"], [0, "module-6"], [0, "module-7"], [0, "module-skfolio"], [0, "module-skfolio.measures"], [0, "module-skfolio.optimization.cluster"], [0, "module-skfolio.optimization.convex"], [0, "module-skfolio.optimization.ensemble"], [0, "module-skfolio.optimization.naive"], [0, "module-skfolio.population"], [0, "module-skfolio.portfolio"]], "skfolio": [[0, "module-0"], [0, "module-1"], [0, "module-2"], [0, "module-3"], [0, "module-4"], [0, "module-5"], [0, "module-6"], [0, "module-7"], [0, "module-skfolio"]], "skfolio.measures": [[0, "module-skfolio.measures"]], "skfolio.optimization.cluster": [[0, "module-skfolio.optimization.cluster"]], "skfolio.optimization.convex": [[0, "module-skfolio.optimization.convex"]], "skfolio.optimization.ensemble": [[0, "module-skfolio.optimization.ensemble"]], "skfolio.optimization.naive": [[0, "module-skfolio.optimization.naive"]], "skfolio.population": [[0, "module-skfolio.population"]], "skfolio.portfolio": [[0, "module-skfolio.portfolio"]], "hierarchicalclustering (class in skfolio.cluster)": [[47, "skfolio.cluster.HierarchicalClustering"]], "fit() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.fit"]], "fit_predict() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.fit_predict"]], "get_metadata_routing() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.get_metadata_routing"]], "get_params() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.get_params"]], "plot_dendrogram() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.plot_dendrogram"]], "set_params() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.set_params"]], "linkagemethod (class in skfolio.cluster)": [[48, "skfolio.cluster.LinkageMethod"]], "load_factors_dataset() (in module skfolio.datasets)": [[49, "skfolio.datasets.load_factors_dataset"]], "load_ftse100_dataset() (in module skfolio.datasets)": [[50, "skfolio.datasets.load_ftse100_dataset"]], "load_nasdaq_dataset() (in module skfolio.datasets)": [[51, "skfolio.datasets.load_nasdaq_dataset"]], "load_sp500_dataset() (in module skfolio.datasets)": [[52, "skfolio.datasets.load_sp500_dataset"]], "load_sp500_index() (in module skfolio.datasets)": [[53, "skfolio.datasets.load_sp500_index"]], "basedistance (class in skfolio.distance)": [[54, "skfolio.distance.BaseDistance"]], "fit() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.fit"]], "get_metadata_routing() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.get_metadata_routing"]], "get_params() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.get_params"]], "set_params() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.set_params"]], "covariancedistance (class in skfolio.distance)": [[55, "skfolio.distance.CovarianceDistance"]], "fit() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.fit"]], "get_metadata_routing() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.get_metadata_routing"]], "get_params() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.get_params"]], "set_params() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.set_params"]], "distancecorrelation (class in skfolio.distance)": [[56, "skfolio.distance.DistanceCorrelation"]], "fit() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.fit"]], "get_metadata_routing() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.get_metadata_routing"]], "get_params() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.get_params"]], "set_params() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.set_params"]], "kendalldistance (class in skfolio.distance)": [[57, "skfolio.distance.KendallDistance"]], "fit() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.fit"]], "get_metadata_routing() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.get_metadata_routing"]], "get_params() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.get_params"]], "set_params() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.set_params"]], "mutualinformation (class in skfolio.distance)": [[58, "skfolio.distance.MutualInformation"]], "fit() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.fit"]], "get_metadata_routing() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.get_metadata_routing"]], "get_params() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.get_params"]], "set_params() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.set_params"]], "pearsondistance (class in skfolio.distance)": [[59, "skfolio.distance.PearsonDistance"]], "fit() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.fit"]], "get_metadata_routing() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.get_metadata_routing"]], "get_params() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.get_params"]], "set_params() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.set_params"]], "spearmandistance (class in skfolio.distance)": [[60, "skfolio.distance.SpearmanDistance"]], "fit() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.fit"]], "get_metadata_routing() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.get_metadata_routing"]], "get_params() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.get_params"]], "set_params() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.set_params"]], "basemeasure (class in skfolio.measures)": [[61, "skfolio.measures.BaseMeasure"]], "extrariskmeasure (class in skfolio.measures)": [[62, "skfolio.measures.ExtraRiskMeasure"]], "perfmeasure (class in skfolio.measures)": [[63, "skfolio.measures.PerfMeasure"]], "ratiomeasure (class in skfolio.measures)": [[64, "skfolio.measures.RatioMeasure"]], "riskmeasure (class in skfolio.measures)": [[65, "skfolio.measures.RiskMeasure"]], "average_drawdown() (in module skfolio.measures)": [[66, "skfolio.measures.average_drawdown"]], "cdar() (in module skfolio.measures)": [[67, "skfolio.measures.cdar"]], "cvar() (in module skfolio.measures)": [[68, "skfolio.measures.cvar"]], "drawdown_at_risk() (in module skfolio.measures)": [[69, "skfolio.measures.drawdown_at_risk"]], "edar() (in module skfolio.measures)": [[70, "skfolio.measures.edar"]], "effective_number_assets() (in module skfolio.measures)": [[71, "skfolio.measures.effective_number_assets"]], "entropic_risk_measure() (in module skfolio.measures)": [[72, "skfolio.measures.entropic_risk_measure"]], "evar() (in module skfolio.measures)": [[73, "skfolio.measures.evar"]], "first_lower_partial_moment() (in module skfolio.measures)": [[74, "skfolio.measures.first_lower_partial_moment"]], "fourth_central_moment() (in module skfolio.measures)": [[75, "skfolio.measures.fourth_central_moment"]], "fourth_lower_partial_moment() (in module skfolio.measures)": [[76, "skfolio.measures.fourth_lower_partial_moment"]], "get_cumulative_returns() (in module skfolio.measures)": [[77, "skfolio.measures.get_cumulative_returns"]], "get_drawdowns() (in module skfolio.measures)": [[78, "skfolio.measures.get_drawdowns"]], "gini_mean_difference() (in module skfolio.measures)": [[79, "skfolio.measures.gini_mean_difference"]], "max_drawdown() (in module skfolio.measures)": [[80, "skfolio.measures.max_drawdown"]], "mean() (in module skfolio.measures)": [[81, "skfolio.measures.mean"]], "mean_absolute_deviation() (in module skfolio.measures)": [[82, "skfolio.measures.mean_absolute_deviation"]], "owa_gmd_weights() (in module skfolio.measures)": [[83, "skfolio.measures.owa_gmd_weights"]], "semi_deviation() (in module skfolio.measures)": [[84, "skfolio.measures.semi_deviation"]], "semi_variance() (in module skfolio.measures)": [[85, "skfolio.measures.semi_variance"]], "standard_deviation() (in module skfolio.measures)": [[86, "skfolio.measures.standard_deviation"]], "third_central_moment() (in module skfolio.measures)": [[87, "skfolio.measures.third_central_moment"]], "ulcer_index() (in module skfolio.measures)": [[88, "skfolio.measures.ulcer_index"]], "value_at_risk() (in module skfolio.measures)": [[89, "skfolio.measures.value_at_risk"]], "variance() (in module skfolio.measures)": [[90, "skfolio.measures.variance"]], "worst_realization() (in module skfolio.measures)": [[91, "skfolio.measures.worst_realization"]], "make_scorer() (in module skfolio.metrics)": [[92, "skfolio.metrics.make_scorer"]], "basecombinatorialcv (class in skfolio.model_selection)": [[93, "skfolio.model_selection.BaseCombinatorialCV"]], "get_path_ids() (skfolio.model_selection.basecombinatorialcv method)": [[93, "skfolio.model_selection.BaseCombinatorialCV.get_path_ids"]], "combinatorialpurgedcv (class in skfolio.model_selection)": [[94, "skfolio.model_selection.CombinatorialPurgedCV"]], "binary_train_test_sets (skfolio.model_selection.combinatorialpurgedcv property)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.binary_train_test_sets"]], "get_path_ids() (skfolio.model_selection.combinatorialpurgedcv method)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.get_path_ids"]], "n_splits (skfolio.model_selection.combinatorialpurgedcv property)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.n_splits"]], "n_test_paths (skfolio.model_selection.combinatorialpurgedcv property)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.n_test_paths"]], "plot_train_test_folds() (skfolio.model_selection.combinatorialpurgedcv method)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.plot_train_test_folds"]], "plot_train_test_index() (skfolio.model_selection.combinatorialpurgedcv method)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.plot_train_test_index"]], "recombined_paths (skfolio.model_selection.combinatorialpurgedcv property)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.recombined_paths"]], "split() (skfolio.model_selection.combinatorialpurgedcv method)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.split"]], "test_set_index (skfolio.model_selection.combinatorialpurgedcv property)": [[94, "skfolio.model_selection.CombinatorialPurgedCV.test_set_index"]], "walkforward (class in skfolio.model_selection)": [[95, "skfolio.model_selection.WalkForward"]], "get_metadata_routing() (skfolio.model_selection.walkforward method)": [[95, "skfolio.model_selection.WalkForward.get_metadata_routing"]], "get_n_splits() (skfolio.model_selection.walkforward method)": [[95, "skfolio.model_selection.WalkForward.get_n_splits"]], "split() (skfolio.model_selection.walkforward method)": [[95, "skfolio.model_selection.WalkForward.split"]], "cross_val_predict() (in module skfolio.model_selection)": [[96, "skfolio.model_selection.cross_val_predict"]], "basecovariance (class in skfolio.moments)": [[97, "skfolio.moments.BaseCovariance"]], "get_metadata_routing() (skfolio.moments.basecovariance method)": [[97, "skfolio.moments.BaseCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.basecovariance method)": [[97, "skfolio.moments.BaseCovariance.get_params"]], "set_params() (skfolio.moments.basecovariance method)": [[97, "skfolio.moments.BaseCovariance.set_params"]], "basemu (class in skfolio.moments)": [[98, "skfolio.moments.BaseMu"]], "get_metadata_routing() (skfolio.moments.basemu method)": [[98, "skfolio.moments.BaseMu.get_metadata_routing"]], "get_params() (skfolio.moments.basemu method)": [[98, "skfolio.moments.BaseMu.get_params"]], "set_params() (skfolio.moments.basemu method)": [[98, "skfolio.moments.BaseMu.set_params"]], "denoisecovariance (class in skfolio.moments)": [[99, "skfolio.moments.DenoiseCovariance"]], "fit() (skfolio.moments.denoisecovariance method)": [[99, "skfolio.moments.DenoiseCovariance.fit"]], "get_metadata_routing() (skfolio.moments.denoisecovariance method)": [[99, "skfolio.moments.DenoiseCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.denoisecovariance method)": [[99, "skfolio.moments.DenoiseCovariance.get_params"]], "set_params() (skfolio.moments.denoisecovariance method)": [[99, "skfolio.moments.DenoiseCovariance.set_params"]], "detonecovariance (class in skfolio.moments)": [[100, "skfolio.moments.DetoneCovariance"]], "fit() (skfolio.moments.detonecovariance method)": [[100, "skfolio.moments.DetoneCovariance.fit"]], "get_metadata_routing() (skfolio.moments.detonecovariance method)": [[100, "skfolio.moments.DetoneCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.detonecovariance method)": [[100, "skfolio.moments.DetoneCovariance.get_params"]], "set_params() (skfolio.moments.detonecovariance method)": [[100, "skfolio.moments.DetoneCovariance.set_params"]], "ewcovariance (class in skfolio.moments)": [[101, "skfolio.moments.EWCovariance"]], "fit() (skfolio.moments.ewcovariance method)": [[101, "skfolio.moments.EWCovariance.fit"]], "get_metadata_routing() (skfolio.moments.ewcovariance method)": [[101, "skfolio.moments.EWCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.ewcovariance method)": [[101, "skfolio.moments.EWCovariance.get_params"]], "set_params() (skfolio.moments.ewcovariance method)": [[101, "skfolio.moments.EWCovariance.set_params"]], "ewmu (class in skfolio.moments)": [[102, "skfolio.moments.EWMu"]], "fit() (skfolio.moments.ewmu method)": [[102, "skfolio.moments.EWMu.fit"]], "get_metadata_routing() (skfolio.moments.ewmu method)": [[102, "skfolio.moments.EWMu.get_metadata_routing"]], "get_params() (skfolio.moments.ewmu method)": [[102, "skfolio.moments.EWMu.get_params"]], "set_params() (skfolio.moments.ewmu method)": [[102, "skfolio.moments.EWMu.set_params"]], "empiricalcovariance (class in skfolio.moments)": [[103, "skfolio.moments.EmpiricalCovariance"]], "fit() (skfolio.moments.empiricalcovariance method)": [[103, "skfolio.moments.EmpiricalCovariance.fit"]], "get_metadata_routing() (skfolio.moments.empiricalcovariance method)": [[103, "skfolio.moments.EmpiricalCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.empiricalcovariance method)": [[103, "skfolio.moments.EmpiricalCovariance.get_params"]], "set_params() (skfolio.moments.empiricalcovariance method)": [[103, "skfolio.moments.EmpiricalCovariance.set_params"]], "empiricalmu (class in skfolio.moments)": [[104, "skfolio.moments.EmpiricalMu"]], "fit() (skfolio.moments.empiricalmu method)": [[104, "skfolio.moments.EmpiricalMu.fit"]], "get_metadata_routing() (skfolio.moments.empiricalmu method)": [[104, "skfolio.moments.EmpiricalMu.get_metadata_routing"]], "get_params() (skfolio.moments.empiricalmu method)": [[104, "skfolio.moments.EmpiricalMu.get_params"]], "set_params() (skfolio.moments.empiricalmu method)": [[104, "skfolio.moments.EmpiricalMu.set_params"]], "equilibriummu (class in skfolio.moments)": [[105, "skfolio.moments.EquilibriumMu"]], "fit() (skfolio.moments.equilibriummu method)": [[105, "skfolio.moments.EquilibriumMu.fit"]], "get_metadata_routing() (skfolio.moments.equilibriummu method)": [[105, "skfolio.moments.EquilibriumMu.get_metadata_routing"]], "get_params() (skfolio.moments.equilibriummu method)": [[105, "skfolio.moments.EquilibriumMu.get_params"]], "set_params() (skfolio.moments.equilibriummu method)": [[105, "skfolio.moments.EquilibriumMu.set_params"]], "gerbercovariance (class in skfolio.moments)": [[106, "skfolio.moments.GerberCovariance"]], "fit() (skfolio.moments.gerbercovariance method)": [[106, "skfolio.moments.GerberCovariance.fit"]], "get_metadata_routing() (skfolio.moments.gerbercovariance method)": [[106, "skfolio.moments.GerberCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.gerbercovariance method)": [[106, "skfolio.moments.GerberCovariance.get_params"]], "set_params() (skfolio.moments.gerbercovariance method)": [[106, "skfolio.moments.GerberCovariance.set_params"]], "graphicallassocv (class in skfolio.moments)": [[107, "skfolio.moments.GraphicalLassoCV"]], "error_norm() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.error_norm"]], "fit() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.fit"]], "get_metadata_routing() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.get_metadata_routing"]], "get_params() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.get_params"]], "get_precision() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.get_precision"]], "mahalanobis() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.mahalanobis"]], "score() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.score"]], "set_params() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.set_params"]], "set_score_request() (skfolio.moments.graphicallassocv method)": [[107, "skfolio.moments.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in skfolio.moments)": [[108, "skfolio.moments.LedoitWolf"]], "error_norm() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.error_norm"]], "fit() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.fit"]], "get_metadata_routing() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.get_metadata_routing"]], "get_params() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.get_params"]], "get_precision() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.get_precision"]], "mahalanobis() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.mahalanobis"]], "score() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.score"]], "set_params() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.set_params"]], "set_score_request() (skfolio.moments.ledoitwolf method)": [[108, "skfolio.moments.LedoitWolf.set_score_request"]], "oas (class in skfolio.moments)": [[109, "skfolio.moments.OAS"]], "error_norm() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.error_norm"]], "fit() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.fit"]], "get_metadata_routing() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.get_metadata_routing"]], "get_params() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.get_params"]], "get_precision() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.get_precision"]], "mahalanobis() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.mahalanobis"]], "score() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.score"]], "set_params() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.set_params"]], "set_score_request() (skfolio.moments.oas method)": [[109, "skfolio.moments.OAS.set_score_request"]], "shrunkcovariance (class in skfolio.moments)": [[110, "skfolio.moments.ShrunkCovariance"]], "error_norm() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.error_norm"]], "fit() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.fit"]], "get_metadata_routing() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.get_params"]], "get_precision() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.get_precision"]], "mahalanobis() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.mahalanobis"]], "score() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.score"]], "set_params() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.set_params"]], "set_score_request() (skfolio.moments.shrunkcovariance method)": [[110, "skfolio.moments.ShrunkCovariance.set_score_request"]], "shrunkmu (class in skfolio.moments)": [[111, "skfolio.moments.ShrunkMu"]], "fit() (skfolio.moments.shrunkmu method)": [[111, "skfolio.moments.ShrunkMu.fit"]], "get_metadata_routing() (skfolio.moments.shrunkmu method)": [[111, "skfolio.moments.ShrunkMu.get_metadata_routing"]], "get_params() (skfolio.moments.shrunkmu method)": [[111, "skfolio.moments.ShrunkMu.get_params"]], "set_params() (skfolio.moments.shrunkmu method)": [[111, "skfolio.moments.ShrunkMu.set_params"]], "shrunkmumethods (class in skfolio.moments)": [[112, "skfolio.moments.ShrunkMuMethods"]], "basecomposition (class in skfolio.optimization)": [[113, "skfolio.optimization.BaseComposition"]], "get_metadata_routing() (skfolio.optimization.basecomposition method)": [[113, "skfolio.optimization.BaseComposition.get_metadata_routing"]], "get_params() (skfolio.optimization.basecomposition method)": [[113, "skfolio.optimization.BaseComposition.get_params"]], "set_params() (skfolio.optimization.basecomposition method)": [[113, "skfolio.optimization.BaseComposition.set_params"]], "basehierarchicaloptimization (class in skfolio.optimization)": [[114, "skfolio.optimization.BaseHierarchicalOptimization"]], "fit_predict() (skfolio.optimization.basehierarchicaloptimization method)": [[114, "skfolio.optimization.BaseHierarchicalOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.basehierarchicaloptimization method)": [[114, "skfolio.optimization.BaseHierarchicalOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.basehierarchicaloptimization method)": [[114, "skfolio.optimization.BaseHierarchicalOptimization.get_params"]], "predict() (skfolio.optimization.basehierarchicaloptimization method)": [[114, "skfolio.optimization.BaseHierarchicalOptimization.predict"]], "score() (skfolio.optimization.basehierarchicaloptimization method)": [[114, "skfolio.optimization.BaseHierarchicalOptimization.score"]], "set_params() (skfolio.optimization.basehierarchicaloptimization method)": [[114, "skfolio.optimization.BaseHierarchicalOptimization.set_params"]], "convexoptimization (class in skfolio.optimization)": [[115, "skfolio.optimization.ConvexOptimization"]], "fit_predict() (skfolio.optimization.convexoptimization method)": [[115, "skfolio.optimization.ConvexOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.convexoptimization method)": [[115, "skfolio.optimization.ConvexOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.convexoptimization method)": [[115, "skfolio.optimization.ConvexOptimization.get_params"]], "predict() (skfolio.optimization.convexoptimization method)": [[115, "skfolio.optimization.ConvexOptimization.predict"]], "score() (skfolio.optimization.convexoptimization method)": [[115, "skfolio.optimization.ConvexOptimization.score"]], "set_params() (skfolio.optimization.convexoptimization method)": [[115, "skfolio.optimization.ConvexOptimization.set_params"]], "distributionallyrobustcvar (class in skfolio.optimization)": [[116, "skfolio.optimization.DistributionallyRobustCVaR"]], "fit() (skfolio.optimization.distributionallyrobustcvar method)": [[116, "skfolio.optimization.DistributionallyRobustCVaR.fit"]], "fit_predict() (skfolio.optimization.distributionallyrobustcvar method)": [[116, "skfolio.optimization.DistributionallyRobustCVaR.fit_predict"]], "get_metadata_routing() (skfolio.optimization.distributionallyrobustcvar method)": [[116, "skfolio.optimization.DistributionallyRobustCVaR.get_metadata_routing"]], "get_params() (skfolio.optimization.distributionallyrobustcvar method)": [[116, "skfolio.optimization.DistributionallyRobustCVaR.get_params"]], "predict() (skfolio.optimization.distributionallyrobustcvar method)": [[116, "skfolio.optimization.DistributionallyRobustCVaR.predict"]], "score() (skfolio.optimization.distributionallyrobustcvar method)": [[116, "skfolio.optimization.DistributionallyRobustCVaR.score"]], "set_params() (skfolio.optimization.distributionallyrobustcvar method)": [[116, "skfolio.optimization.DistributionallyRobustCVaR.set_params"]], "equalweighted (class in skfolio.optimization)": [[117, "skfolio.optimization.EqualWeighted"]], "fit() (skfolio.optimization.equalweighted method)": [[117, "skfolio.optimization.EqualWeighted.fit"]], "fit_predict() (skfolio.optimization.equalweighted method)": [[117, "skfolio.optimization.EqualWeighted.fit_predict"]], "get_metadata_routing() (skfolio.optimization.equalweighted method)": [[117, "skfolio.optimization.EqualWeighted.get_metadata_routing"]], "get_params() (skfolio.optimization.equalweighted method)": [[117, "skfolio.optimization.EqualWeighted.get_params"]], "predict() (skfolio.optimization.equalweighted method)": [[117, "skfolio.optimization.EqualWeighted.predict"]], "score() (skfolio.optimization.equalweighted method)": [[117, "skfolio.optimization.EqualWeighted.score"]], "set_params() (skfolio.optimization.equalweighted method)": [[117, "skfolio.optimization.EqualWeighted.set_params"]], "hierarchicalequalriskcontribution (class in skfolio.optimization)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution"]], "fit() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution.fit"]], "fit_predict() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution.fit_predict"]], "get_metadata_routing() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution.get_metadata_routing"]], "get_params() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution.get_params"]], "predict() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution.predict"]], "score() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution.score"]], "set_params() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[118, "skfolio.optimization.HierarchicalEqualRiskContribution.set_params"]], "hierarchicalriskparity (class in skfolio.optimization)": [[119, "skfolio.optimization.HierarchicalRiskParity"]], "fit() (skfolio.optimization.hierarchicalriskparity method)": [[119, "skfolio.optimization.HierarchicalRiskParity.fit"]], "fit_predict() (skfolio.optimization.hierarchicalriskparity method)": [[119, "skfolio.optimization.HierarchicalRiskParity.fit_predict"]], "get_metadata_routing() (skfolio.optimization.hierarchicalriskparity method)": [[119, "skfolio.optimization.HierarchicalRiskParity.get_metadata_routing"]], "get_params() (skfolio.optimization.hierarchicalriskparity method)": [[119, "skfolio.optimization.HierarchicalRiskParity.get_params"]], "predict() (skfolio.optimization.hierarchicalriskparity method)": [[119, "skfolio.optimization.HierarchicalRiskParity.predict"]], "score() (skfolio.optimization.hierarchicalriskparity method)": [[119, "skfolio.optimization.HierarchicalRiskParity.score"]], "set_params() (skfolio.optimization.hierarchicalriskparity method)": [[119, "skfolio.optimization.HierarchicalRiskParity.set_params"]], "inversevolatility (class in skfolio.optimization)": [[120, "skfolio.optimization.InverseVolatility"]], "fit() (skfolio.optimization.inversevolatility method)": [[120, "skfolio.optimization.InverseVolatility.fit"]], "fit_predict() (skfolio.optimization.inversevolatility method)": [[120, "skfolio.optimization.InverseVolatility.fit_predict"]], "get_metadata_routing() (skfolio.optimization.inversevolatility method)": [[120, "skfolio.optimization.InverseVolatility.get_metadata_routing"]], "get_params() (skfolio.optimization.inversevolatility method)": [[120, "skfolio.optimization.InverseVolatility.get_params"]], "predict() (skfolio.optimization.inversevolatility method)": [[120, "skfolio.optimization.InverseVolatility.predict"]], "score() (skfolio.optimization.inversevolatility method)": [[120, "skfolio.optimization.InverseVolatility.score"]], "set_params() (skfolio.optimization.inversevolatility method)": [[120, "skfolio.optimization.InverseVolatility.set_params"]], "maximumdiversification (class in skfolio.optimization)": [[121, "skfolio.optimization.MaximumDiversification"]], "fit() (skfolio.optimization.maximumdiversification method)": [[121, "skfolio.optimization.MaximumDiversification.fit"]], "fit_predict() (skfolio.optimization.maximumdiversification method)": [[121, "skfolio.optimization.MaximumDiversification.fit_predict"]], "get_metadata_routing() (skfolio.optimization.maximumdiversification method)": [[121, "skfolio.optimization.MaximumDiversification.get_metadata_routing"]], "get_params() (skfolio.optimization.maximumdiversification method)": [[121, "skfolio.optimization.MaximumDiversification.get_params"]], "predict() (skfolio.optimization.maximumdiversification method)": [[121, "skfolio.optimization.MaximumDiversification.predict"]], "score() (skfolio.optimization.maximumdiversification method)": [[121, "skfolio.optimization.MaximumDiversification.score"]], "set_params() (skfolio.optimization.maximumdiversification method)": [[121, "skfolio.optimization.MaximumDiversification.set_params"]], "meanrisk (class in skfolio.optimization)": [[122, "skfolio.optimization.MeanRisk"]], "fit() (skfolio.optimization.meanrisk method)": [[122, "skfolio.optimization.MeanRisk.fit"]], "fit_predict() (skfolio.optimization.meanrisk method)": [[122, "skfolio.optimization.MeanRisk.fit_predict"]], "get_metadata_routing() (skfolio.optimization.meanrisk method)": [[122, "skfolio.optimization.MeanRisk.get_metadata_routing"]], "get_params() (skfolio.optimization.meanrisk method)": [[122, "skfolio.optimization.MeanRisk.get_params"]], "predict() (skfolio.optimization.meanrisk method)": [[122, "skfolio.optimization.MeanRisk.predict"]], "score() (skfolio.optimization.meanrisk method)": [[122, "skfolio.optimization.MeanRisk.score"]], "set_params() (skfolio.optimization.meanrisk method)": [[122, "skfolio.optimization.MeanRisk.set_params"]], "nestedclustersoptimization (class in skfolio.optimization)": [[123, "skfolio.optimization.NestedClustersOptimization"]], "fit() (skfolio.optimization.nestedclustersoptimization method)": [[123, "skfolio.optimization.NestedClustersOptimization.fit"]], "fit_predict() (skfolio.optimization.nestedclustersoptimization method)": [[123, "skfolio.optimization.NestedClustersOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.nestedclustersoptimization method)": [[123, "skfolio.optimization.NestedClustersOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.nestedclustersoptimization method)": [[123, "skfolio.optimization.NestedClustersOptimization.get_params"]], "predict() (skfolio.optimization.nestedclustersoptimization method)": [[123, "skfolio.optimization.NestedClustersOptimization.predict"]], "score() (skfolio.optimization.nestedclustersoptimization method)": [[123, "skfolio.optimization.NestedClustersOptimization.score"]], "set_params() (skfolio.optimization.nestedclustersoptimization method)": [[123, "skfolio.optimization.NestedClustersOptimization.set_params"]], "objectivefunction (class in skfolio.optimization)": [[124, "skfolio.optimization.ObjectiveFunction"]], "random (class in skfolio.optimization)": [[125, "skfolio.optimization.Random"]], "fit() (skfolio.optimization.random method)": [[125, "skfolio.optimization.Random.fit"]], "fit_predict() (skfolio.optimization.random method)": [[125, "skfolio.optimization.Random.fit_predict"]], "get_metadata_routing() (skfolio.optimization.random method)": [[125, "skfolio.optimization.Random.get_metadata_routing"]], "get_params() (skfolio.optimization.random method)": [[125, "skfolio.optimization.Random.get_params"]], "predict() (skfolio.optimization.random method)": [[125, "skfolio.optimization.Random.predict"]], "score() (skfolio.optimization.random method)": [[125, "skfolio.optimization.Random.score"]], "set_params() (skfolio.optimization.random method)": [[125, "skfolio.optimization.Random.set_params"]], "riskbudgeting (class in skfolio.optimization)": [[126, "skfolio.optimization.RiskBudgeting"]], "fit() (skfolio.optimization.riskbudgeting method)": [[126, "skfolio.optimization.RiskBudgeting.fit"]], "fit_predict() (skfolio.optimization.riskbudgeting method)": [[126, "skfolio.optimization.RiskBudgeting.fit_predict"]], "get_metadata_routing() (skfolio.optimization.riskbudgeting method)": [[126, "skfolio.optimization.RiskBudgeting.get_metadata_routing"]], "get_params() (skfolio.optimization.riskbudgeting method)": [[126, "skfolio.optimization.RiskBudgeting.get_params"]], "predict() (skfolio.optimization.riskbudgeting method)": [[126, "skfolio.optimization.RiskBudgeting.predict"]], "score() (skfolio.optimization.riskbudgeting method)": [[126, "skfolio.optimization.RiskBudgeting.score"]], "set_params() (skfolio.optimization.riskbudgeting method)": [[126, "skfolio.optimization.RiskBudgeting.set_params"]], "stackingoptimization (class in skfolio.optimization)": [[127, "skfolio.optimization.StackingOptimization"]], "fit() (skfolio.optimization.stackingoptimization method)": [[127, "skfolio.optimization.StackingOptimization.fit"]], "fit_predict() (skfolio.optimization.stackingoptimization method)": [[127, "skfolio.optimization.StackingOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.stackingoptimization method)": [[127, "skfolio.optimization.StackingOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.stackingoptimization method)": [[127, "skfolio.optimization.StackingOptimization.get_params"]], "named_estimators (skfolio.optimization.stackingoptimization property)": [[127, "skfolio.optimization.StackingOptimization.named_estimators"]], "predict() (skfolio.optimization.stackingoptimization method)": [[127, "skfolio.optimization.StackingOptimization.predict"]], "score() (skfolio.optimization.stackingoptimization method)": [[127, "skfolio.optimization.StackingOptimization.score"]], "set_params() (skfolio.optimization.stackingoptimization method)": [[127, "skfolio.optimization.StackingOptimization.set_params"]], "population (class in skfolio.population)": [[128, "skfolio.population.Population"]], "append() (skfolio.population.population method)": [[128, "skfolio.population.Population.append"]], "clear() (skfolio.population.population method)": [[128, "skfolio.population.Population.clear"]], "composition() (skfolio.population.population method)": [[128, "skfolio.population.Population.composition"]], "copy() (skfolio.population.population method)": [[128, "skfolio.population.Population.copy"]], "count() (skfolio.population.population method)": [[128, "skfolio.population.Population.count"]], "extend() (skfolio.population.population method)": [[128, "skfolio.population.Population.extend"]], "filter() (skfolio.population.population method)": [[128, "skfolio.population.Population.filter"]], "index() (skfolio.population.population method)": [[128, "skfolio.population.Population.index"]], "insert() (skfolio.population.population method)": [[128, "skfolio.population.Population.insert"]], "max_measure() (skfolio.population.population method)": [[128, "skfolio.population.Population.max_measure"]], "measures() (skfolio.population.population method)": [[128, "skfolio.population.Population.measures"]], "measures_mean() (skfolio.population.population method)": [[128, "skfolio.population.Population.measures_mean"]], "measures_std() (skfolio.population.population method)": [[128, "skfolio.population.Population.measures_std"]], "min_measure() (skfolio.population.population method)": [[128, "skfolio.population.Population.min_measure"]], "non_denominated_sort() (skfolio.population.population method)": [[128, "skfolio.population.Population.non_denominated_sort"]], "plot_composition() (skfolio.population.population method)": [[128, "skfolio.population.Population.plot_composition"]], "plot_cumulative_returns() (skfolio.population.population method)": [[128, "skfolio.population.Population.plot_cumulative_returns"]], "plot_distribution() (skfolio.population.population method)": [[128, "skfolio.population.Population.plot_distribution"]], "plot_measures() (skfolio.population.population method)": [[128, "skfolio.population.Population.plot_measures"]], "pop() (skfolio.population.population method)": [[128, "skfolio.population.Population.pop"]], "quantile() (skfolio.population.population method)": [[128, "skfolio.population.Population.quantile"]], "remove() (skfolio.population.population method)": [[128, "skfolio.population.Population.remove"]], "reverse() (skfolio.population.population method)": [[128, "skfolio.population.Population.reverse"]], "set_portfolio_params() (skfolio.population.population method)": [[128, "skfolio.population.Population.set_portfolio_params"]], "sort() (skfolio.population.population method)": [[128, "skfolio.population.Population.sort"]], "sort_measure() (skfolio.population.population method)": [[128, "skfolio.population.Population.sort_measure"]], "summary() (skfolio.population.population method)": [[128, "skfolio.population.Population.summary"]], "baseportfolio (class in skfolio.portfolio)": [[129, "skfolio.portfolio.BasePortfolio"]], "annualized_factor (skfolio.portfolio.baseportfolio property)": [[129, "skfolio.portfolio.BasePortfolio.annualized_factor"]], "clear() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.clear"]], "composition (skfolio.portfolio.baseportfolio property)": [[129, "skfolio.portfolio.BasePortfolio.composition"]], "copy() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.copy"]], "cumulative_returns (skfolio.portfolio.baseportfolio attribute)": [[129, "skfolio.portfolio.BasePortfolio.cumulative_returns"]], "cumulative_returns_df (skfolio.portfolio.baseportfolio property)": [[129, "skfolio.portfolio.BasePortfolio.cumulative_returns_df"]], "dominates() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.dominates"]], "drawdowns (skfolio.portfolio.baseportfolio attribute)": [[129, "skfolio.portfolio.BasePortfolio.drawdowns"]], "fitness (skfolio.portfolio.baseportfolio attribute)": [[129, "skfolio.portfolio.BasePortfolio.fitness"]], "fitness_measures (skfolio.portfolio.baseportfolio property)": [[129, "skfolio.portfolio.BasePortfolio.fitness_measures"]], "get_measure() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.get_measure"]], "measures_df (skfolio.portfolio.baseportfolio property)": [[129, "skfolio.portfolio.BasePortfolio.measures_df"]], "n_observations (skfolio.portfolio.baseportfolio property)": [[129, "skfolio.portfolio.BasePortfolio.n_observations"]], "plot_composition() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.plot_composition"]], "plot_cumulative_returns() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.plot_cumulative_returns"]], "plot_returns() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.plot_returns"]], "plot_rolling_measure() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.plot_rolling_measure"]], "returns_df (skfolio.portfolio.baseportfolio property)": [[129, "skfolio.portfolio.BasePortfolio.returns_df"]], "rolling_measure() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.rolling_measure"]], "summary() (skfolio.portfolio.baseportfolio method)": [[129, "skfolio.portfolio.BasePortfolio.summary"]], "multiperiodportfolio (class in skfolio.portfolio)": [[130, "skfolio.portfolio.MultiPeriodPortfolio"]], "annualized_factor (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.annualized_factor"]], "append() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.append"]], "assets (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.assets"]], "clear() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.clear"]], "composition (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.composition"]], "copy() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.copy"]], "cumulative_returns (skfolio.portfolio.multiperiodportfolio attribute)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.cumulative_returns"]], "cumulative_returns_df (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.cumulative_returns_df"]], "dominates() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.dominates"]], "drawdowns (skfolio.portfolio.multiperiodportfolio attribute)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.drawdowns"]], "fitness (skfolio.portfolio.multiperiodportfolio attribute)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.fitness"]], "fitness_measures (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.fitness_measures"]], "get_measure() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.get_measure"]], "measures_df (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.measures_df"]], "n_observations (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.n_observations"]], "plot_composition() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.plot_composition"]], "plot_cumulative_returns() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.plot_cumulative_returns"]], "plot_returns() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.plot_returns"]], "plot_rolling_measure() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.plot_rolling_measure"]], "portfolios (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.portfolios"]], "returns_df (skfolio.portfolio.multiperiodportfolio property)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.returns_df"]], "rolling_measure() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.rolling_measure"]], "summary() (skfolio.portfolio.multiperiodportfolio method)": [[130, "skfolio.portfolio.MultiPeriodPortfolio.summary"]], "portfolio (class in skfolio.portfolio)": [[131, "skfolio.portfolio.Portfolio"]], "annualized_factor (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.annualized_factor"]], "clear() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.clear"]], "composition (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.composition"]], "contribution() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.contribution"]], "copy() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.copy"]], "cumulative_returns (skfolio.portfolio.portfolio attribute)": [[131, "skfolio.portfolio.Portfolio.cumulative_returns"]], "cumulative_returns_df (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.cumulative_returns_df"]], "diversification (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.diversification"]], "dominates() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.dominates"]], "drawdowns (skfolio.portfolio.portfolio attribute)": [[131, "skfolio.portfolio.Portfolio.drawdowns"]], "effective_number_assets (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.effective_number_assets"]], "expected_returns_from_assets() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.expected_returns_from_assets"]], "fitness (skfolio.portfolio.portfolio attribute)": [[131, "skfolio.portfolio.Portfolio.fitness"]], "fitness_measures (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.fitness_measures"]], "get_measure() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.get_measure"]], "get_weight() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.get_weight"]], "measures_df (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.measures_df"]], "n_observations (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.n_observations"]], "nonzero_assets (skfolio.portfolio.portfolio attribute)": [[131, "skfolio.portfolio.Portfolio.nonzero_assets"]], "nonzero_assets_index (skfolio.portfolio.portfolio attribute)": [[131, "skfolio.portfolio.Portfolio.nonzero_assets_index"]], "plot_composition() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.plot_composition"]], "plot_contribution() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.plot_contribution"]], "plot_cumulative_returns() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.plot_cumulative_returns"]], "plot_returns() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.plot_returns"]], "plot_rolling_measure() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.plot_rolling_measure"]], "returns_df (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.returns_df"]], "rolling_measure() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.rolling_measure"]], "sric (skfolio.portfolio.portfolio property)": [[131, "skfolio.portfolio.Portfolio.sric"]], "summary() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.summary"]], "variance_from_assets() (skfolio.portfolio.portfolio method)": [[131, "skfolio.portfolio.Portfolio.variance_from_assets"]], "dropcorrelated (class in skfolio.pre_selection)": [[132, "skfolio.pre_selection.DropCorrelated"]], "fit() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.fit"]], "fit_transform() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.fit_transform"]], "get_feature_names_out() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.get_feature_names_out"]], "get_metadata_routing() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.get_metadata_routing"]], "get_params() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.get_params"]], "get_support() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.get_support"]], "inverse_transform() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.inverse_transform"]], "set_output() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.set_output"]], "set_params() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.set_params"]], "transform() (skfolio.pre_selection.dropcorrelated method)": [[132, "skfolio.pre_selection.DropCorrelated.transform"]], "selectkextremes (class in skfolio.pre_selection)": [[133, "skfolio.pre_selection.SelectKExtremes"]], "fit() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.fit"]], "fit_transform() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.fit_transform"]], "get_feature_names_out() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.get_feature_names_out"]], "get_metadata_routing() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.get_metadata_routing"]], "get_params() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.get_params"]], "get_support() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.get_support"]], "inverse_transform() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.inverse_transform"]], "set_output() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.set_output"]], "set_params() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.set_params"]], "transform() (skfolio.pre_selection.selectkextremes method)": [[133, "skfolio.pre_selection.SelectKExtremes.transform"]], "selectnondominated (class in skfolio.pre_selection)": [[134, "skfolio.pre_selection.SelectNonDominated"]], "fit() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.fit"]], "fit_transform() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.fit_transform"]], "get_feature_names_out() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.get_feature_names_out"]], "get_metadata_routing() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.get_metadata_routing"]], "get_params() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.get_params"]], "get_support() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.get_support"]], "inverse_transform() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.inverse_transform"]], "set_output() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.set_output"]], "set_params() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.set_params"]], "transform() (skfolio.pre_selection.selectnondominated method)": [[134, "skfolio.pre_selection.SelectNonDominated.transform"]], "prices_to_returns() (in module skfolio.preprocessing)": [[135, "skfolio.preprocessing.prices_to_returns"]], "baseloadingmatrix (class in skfolio.prior)": [[136, "skfolio.prior.BaseLoadingMatrix"]], "get_metadata_routing() (skfolio.prior.baseloadingmatrix method)": [[136, "skfolio.prior.BaseLoadingMatrix.get_metadata_routing"]], "get_params() (skfolio.prior.baseloadingmatrix method)": [[136, "skfolio.prior.BaseLoadingMatrix.get_params"]], "set_params() (skfolio.prior.baseloadingmatrix method)": [[136, "skfolio.prior.BaseLoadingMatrix.set_params"]], "baseprior (class in skfolio.prior)": [[137, "skfolio.prior.BasePrior"]], "get_metadata_routing() (skfolio.prior.baseprior method)": [[137, "skfolio.prior.BasePrior.get_metadata_routing"]], "get_params() (skfolio.prior.baseprior method)": [[137, "skfolio.prior.BasePrior.get_params"]], "set_params() (skfolio.prior.baseprior method)": [[137, "skfolio.prior.BasePrior.set_params"]], "blacklitterman (class in skfolio.prior)": [[138, "skfolio.prior.BlackLitterman"]], "fit() (skfolio.prior.blacklitterman method)": [[138, "skfolio.prior.BlackLitterman.fit"]], "get_metadata_routing() (skfolio.prior.blacklitterman method)": [[138, "skfolio.prior.BlackLitterman.get_metadata_routing"]], "get_params() (skfolio.prior.blacklitterman method)": [[138, "skfolio.prior.BlackLitterman.get_params"]], "set_params() (skfolio.prior.blacklitterman method)": [[138, "skfolio.prior.BlackLitterman.set_params"]], "empiricalprior (class in skfolio.prior)": [[139, "skfolio.prior.EmpiricalPrior"]], "fit() (skfolio.prior.empiricalprior method)": [[139, "skfolio.prior.EmpiricalPrior.fit"]], "get_metadata_routing() (skfolio.prior.empiricalprior method)": [[139, "skfolio.prior.EmpiricalPrior.get_metadata_routing"]], "get_params() (skfolio.prior.empiricalprior method)": [[139, "skfolio.prior.EmpiricalPrior.get_params"]], "set_params() (skfolio.prior.empiricalprior method)": [[139, "skfolio.prior.EmpiricalPrior.set_params"]], "factormodel (class in skfolio.prior)": [[140, "skfolio.prior.FactorModel"]], "fit() (skfolio.prior.factormodel method)": [[140, "skfolio.prior.FactorModel.fit"]], "get_metadata_routing() (skfolio.prior.factormodel method)": [[140, "skfolio.prior.FactorModel.get_metadata_routing"]], "get_params() (skfolio.prior.factormodel method)": [[140, "skfolio.prior.FactorModel.get_params"]], "set_params() (skfolio.prior.factormodel method)": [[140, "skfolio.prior.FactorModel.set_params"]], "loadingmatrixregression (class in skfolio.prior)": [[141, "skfolio.prior.LoadingMatrixRegression"]], "fit() (skfolio.prior.loadingmatrixregression method)": [[141, "skfolio.prior.LoadingMatrixRegression.fit"]], "get_metadata_routing() (skfolio.prior.loadingmatrixregression method)": [[141, "skfolio.prior.LoadingMatrixRegression.get_metadata_routing"]], "get_params() (skfolio.prior.loadingmatrixregression method)": [[141, "skfolio.prior.LoadingMatrixRegression.get_params"]], "set_params() (skfolio.prior.loadingmatrixregression method)": [[141, "skfolio.prior.LoadingMatrixRegression.set_params"]], "priormodel (class in skfolio.prior)": [[142, "skfolio.prior.PriorModel"]], "basecovarianceuncertaintyset (class in skfolio.uncertainty_set)": [[143, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet"]], "get_metadata_routing() (skfolio.uncertainty_set.basecovarianceuncertaintyset method)": [[143, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.basecovarianceuncertaintyset method)": [[143, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.basecovarianceuncertaintyset method)": [[143, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet.set_params"]], "basemuuncertaintyset (class in skfolio.uncertainty_set)": [[144, "skfolio.uncertainty_set.BaseMuUncertaintySet"]], "get_metadata_routing() (skfolio.uncertainty_set.basemuuncertaintyset method)": [[144, "skfolio.uncertainty_set.BaseMuUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.basemuuncertaintyset method)": [[144, "skfolio.uncertainty_set.BaseMuUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.basemuuncertaintyset method)": [[144, "skfolio.uncertainty_set.BaseMuUncertaintySet.set_params"]], "bootstrapcovarianceuncertaintyset (class in skfolio.uncertainty_set)": [[145, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet"]], "fit() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.set_params"]], "bootstrapmuuncertaintyset (class in skfolio.uncertainty_set)": [[146, "skfolio.uncertainty_set.BootstrapMuUncertaintySet"]], "fit() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[146, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[146, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[146, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[146, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.set_params"]], "empiricalcovarianceuncertaintyset (class in skfolio.uncertainty_set)": [[147, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet"]], "fit() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.set_params"]], "empiricalmuuncertaintyset (class in skfolio.uncertainty_set)": [[148, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet"]], "fit() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[148, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[148, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[148, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[148, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.set_params"]], "uncertaintyset (class in skfolio.uncertainty_set)": [[149, "skfolio.uncertainty_set.UncertaintySet"]], "nbinsmethod() (in module skfolio.utils.stats)": [[150, "skfolio.utils.stats.NBinsMethod"]], "assert_is_distance() (in module skfolio.utils.stats)": [[151, "skfolio.utils.stats.assert_is_distance"]], "assert_is_square() (in module skfolio.utils.stats)": [[152, "skfolio.utils.stats.assert_is_square"]], "assert_is_symmetric() (in module skfolio.utils.stats)": [[153, "skfolio.utils.stats.assert_is_symmetric"]], "commutation_matrix() (in module skfolio.utils.stats)": [[154, "skfolio.utils.stats.commutation_matrix"]], "compute_optimal_n_clusters() (in module skfolio.utils.stats)": [[155, "skfolio.utils.stats.compute_optimal_n_clusters"]], "corr_to_cov() (in module skfolio.utils.stats)": [[156, "skfolio.utils.stats.corr_to_cov"]], "cov_nearest() (in module skfolio.utils.stats)": [[157, "skfolio.utils.stats.cov_nearest"]], "cov_to_corr() (in module skfolio.utils.stats)": [[158, "skfolio.utils.stats.cov_to_corr"]], "is_cholesky_dec() (in module skfolio.utils.stats)": [[159, "skfolio.utils.stats.is_cholesky_dec"]], "n_bins_freedman() (in module skfolio.utils.stats)": [[160, "skfolio.utils.stats.n_bins_freedman"]], "n_bins_knuth() (in module skfolio.utils.stats)": [[161, "skfolio.utils.stats.n_bins_knuth"]], "rand_weights() (in module skfolio.utils.stats)": [[162, "skfolio.utils.stats.rand_weights"]], "rand_weights_dirichlet() (in module skfolio.utils.stats)": [[163, "skfolio.utils.stats.rand_weights_dirichlet"]]}})