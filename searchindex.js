Search.setIndex({"docnames": ["api", "auto_examples/1_mean_risk/index", "auto_examples/1_mean_risk/plot_10_tracking_error", "auto_examples/1_mean_risk/plot_11_empirical_prior", "auto_examples/1_mean_risk/plot_12_black_and_litterman", "auto_examples/1_mean_risk/plot_13_factor_model", "auto_examples/1_mean_risk/plot_14_black_litterman_factor_model", "auto_examples/1_mean_risk/plot_1_maximum_sharpe_ratio", "auto_examples/1_mean_risk/plot_2_minimum_CVaR", "auto_examples/1_mean_risk/plot_3_efficient_frontier", "auto_examples/1_mean_risk/plot_4_mean_variance_cdar", "auto_examples/1_mean_risk/plot_5_weight_constraints", "auto_examples/1_mean_risk/plot_6_transaction_costs", "auto_examples/1_mean_risk/plot_7_management_fees", "auto_examples/1_mean_risk/plot_8_regularization", "auto_examples/1_mean_risk/plot_9_uncertainty_set", "auto_examples/1_mean_risk/sg_execution_times", "auto_examples/2_risk_budgeting/index", "auto_examples/2_risk_budgeting/plot_1_risk_parity_variance", "auto_examples/2_risk_budgeting/plot_2_risk_busgeting_CVaR", "auto_examples/2_risk_budgeting/plot_3_risk_parity_ledoit_wolf", "auto_examples/2_risk_budgeting/sg_execution_times", "auto_examples/3_maxiumum_diversification/index", "auto_examples/3_maxiumum_diversification/plot_1_maximum_divesification", "auto_examples/3_maxiumum_diversification/sg_execution_times", "auto_examples/4_distributioally_robust_cvar/index", "auto_examples/4_distributioally_robust_cvar/plot_1_distributionally_robust_cvar", "auto_examples/4_distributioally_robust_cvar/sg_execution_times", "auto_examples/5_clustering/index", "auto_examples/5_clustering/plot_1_hrp_cvar", "auto_examples/5_clustering/plot_2_herc_cdar", "auto_examples/5_clustering/plot_3_hrp_vs_herc", "auto_examples/5_clustering/plot_4_nco", "auto_examples/5_clustering/plot_5_nco_grid_search", "auto_examples/5_clustering/sg_execution_times", "auto_examples/6_ensemble/index", "auto_examples/6_ensemble/plot_1_stacking", "auto_examples/6_ensemble/sg_execution_times", "auto_examples/7_pre_selection/index", "auto_examples/7_pre_selection/plot_1_drop_correlated", "auto_examples/7_pre_selection/plot_2_select_best_performers", "auto_examples/7_pre_selection/sg_execution_times", "auto_examples/8_data_preparation/index", "auto_examples/8_data_preparation/plot_1_investment_horizon", "auto_examples/8_data_preparation/sg_execution_times", "auto_examples/index", "auto_examples/sg_execution_times", "generated/skfolio.cluster.HierarchicalClustering", "generated/skfolio.cluster.LinkageMethod", "generated/skfolio.datasets.load_factors_dataset", "generated/skfolio.datasets.load_ftse100_dataset", "generated/skfolio.datasets.load_nasdaq_dataset", "generated/skfolio.datasets.load_sp500_dataset", "generated/skfolio.datasets.load_sp500_index", "generated/skfolio.distance.BaseDistance", "generated/skfolio.distance.CovarianceDistance", "generated/skfolio.distance.DistanceCorrelation", "generated/skfolio.distance.KendallDistance", "generated/skfolio.distance.MutualInformation", "generated/skfolio.distance.PearsonDistance", "generated/skfolio.distance.SpearmanDistance", "generated/skfolio.measures.BaseMeasure", "generated/skfolio.measures.ExtraRiskMeasure", "generated/skfolio.measures.PerfMeasure", "generated/skfolio.measures.RatioMeasure", "generated/skfolio.measures.RiskMeasure", "generated/skfolio.measures.average_drawdown", "generated/skfolio.measures.cdar", "generated/skfolio.measures.cvar", "generated/skfolio.measures.drawdown_at_risk", "generated/skfolio.measures.edar", "generated/skfolio.measures.entropic_risk_measure", "generated/skfolio.measures.evar", "generated/skfolio.measures.first_lower_partial_moment", "generated/skfolio.measures.fourth_central_moment", "generated/skfolio.measures.fourth_lower_partial_moment", "generated/skfolio.measures.get_cumulative_returns", "generated/skfolio.measures.get_drawdowns", "generated/skfolio.measures.gini_mean_difference", "generated/skfolio.measures.max_drawdown", "generated/skfolio.measures.mean", "generated/skfolio.measures.mean_absolute_deviation", "generated/skfolio.measures.owa_gmd_weights", "generated/skfolio.measures.semi_deviation", "generated/skfolio.measures.semi_variance", "generated/skfolio.measures.standard_deviation", "generated/skfolio.measures.third_central_moment", "generated/skfolio.measures.ulcer_index", "generated/skfolio.measures.value_at_risk", "generated/skfolio.measures.variance", "generated/skfolio.measures.worst_realization", "generated/skfolio.metrics.make_scorer", "generated/skfolio.model_selection.BaseCombinatorialCV", "generated/skfolio.model_selection.CombinatorialPurgedCV", "generated/skfolio.model_selection.WalkForward", "generated/skfolio.model_selection.cross_val_predict", "generated/skfolio.moments.BaseCovariance", "generated/skfolio.moments.BaseMu", "generated/skfolio.moments.DenoiseCovariance", "generated/skfolio.moments.DetoneCovariance", "generated/skfolio.moments.EWCovariance", "generated/skfolio.moments.EWMu", "generated/skfolio.moments.EmpiricalCovariance", "generated/skfolio.moments.EmpiricalMu", "generated/skfolio.moments.EquilibriumMu", "generated/skfolio.moments.GerberCovariance", "generated/skfolio.moments.GraphicalLassoCV", "generated/skfolio.moments.LedoitWolf", "generated/skfolio.moments.OAS", "generated/skfolio.moments.ShrunkCovariance", "generated/skfolio.moments.ShrunkMu", "generated/skfolio.moments.ShrunkMuMethods", "generated/skfolio.optimization.BaseComposition", "generated/skfolio.optimization.BaseHierarchicalOptimization", "generated/skfolio.optimization.ConvexOptimization", "generated/skfolio.optimization.DistributionallyRobustCVaR", "generated/skfolio.optimization.EqualWeighted", "generated/skfolio.optimization.HierarchicalEqualRiskContribution", "generated/skfolio.optimization.HierarchicalRiskParity", "generated/skfolio.optimization.InverseVolatility", "generated/skfolio.optimization.MaximumDiversification", "generated/skfolio.optimization.MeanRisk", "generated/skfolio.optimization.NestedClustersOptimization", "generated/skfolio.optimization.ObjectiveFunction", "generated/skfolio.optimization.Random", "generated/skfolio.optimization.RiskBudgeting", "generated/skfolio.optimization.StackingOptimization", "generated/skfolio.population.Population", "generated/skfolio.portfolio.BasePortfolio", "generated/skfolio.portfolio.MultiPeriodPortfolio", "generated/skfolio.portfolio.Portfolio", "generated/skfolio.pre_selection.DropCorrelated", "generated/skfolio.pre_selection.SelectKExtremes", "generated/skfolio.pre_selection.SelectNonDominated", "generated/skfolio.preprocessing.prices_to_returns", "generated/skfolio.prior.BaseLoadingMatrix", "generated/skfolio.prior.BasePrior", "generated/skfolio.prior.BlackLitterman", "generated/skfolio.prior.EmpiricalPrior", "generated/skfolio.prior.FactorModel", "generated/skfolio.prior.LoadingMatrixRegression", "generated/skfolio.prior.PriorModel", "generated/skfolio.uncertainty_set.BaseCovarianceUncertaintySet", "generated/skfolio.uncertainty_set.BaseMuUncertaintySet", "generated/skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet", "generated/skfolio.uncertainty_set.BootstrapMuUncertaintySet", "generated/skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet", "generated/skfolio.uncertainty_set.EmpiricalMuUncertaintySet", "generated/skfolio.uncertainty_set.UncertaintySet", "generated/skfolio.utils.stats.NBinsMethod", "generated/skfolio.utils.stats.assert_is_distance", "generated/skfolio.utils.stats.assert_is_square", "generated/skfolio.utils.stats.assert_is_symmetric", "generated/skfolio.utils.stats.commutation_matrix", "generated/skfolio.utils.stats.compute_optimal_n_clusters", "generated/skfolio.utils.stats.corr_to_cov", "generated/skfolio.utils.stats.cov_nearest", "generated/skfolio.utils.stats.cov_to_corr", "generated/skfolio.utils.stats.is_cholesky_dec", "generated/skfolio.utils.stats.n_bins_freedman", "generated/skfolio.utils.stats.n_bins_knuth", "generated/skfolio.utils.stats.rand_weights", "generated/skfolio.utils.stats.rand_weights_dirichlet", "index", "sg_execution_times", "user_guide/cluster", "user_guide/covariance", "user_guide/data_preparation", "user_guide/datasets", "user_guide/distance", "user_guide/expected_returns", "user_guide/hyper_parameters_tuning", "user_guide/index", "user_guide/install", "user_guide/model_selection", "user_guide/optimization", "user_guide/population", "user_guide/portfolio", "user_guide/pre_selection", "user_guide/prior", "user_guide/uncertainty_set"], "filenames": ["api.rst", "auto_examples/1_mean_risk/index.rst", "auto_examples/1_mean_risk/plot_10_tracking_error.rst", "auto_examples/1_mean_risk/plot_11_empirical_prior.rst", "auto_examples/1_mean_risk/plot_12_black_and_litterman.rst", "auto_examples/1_mean_risk/plot_13_factor_model.rst", "auto_examples/1_mean_risk/plot_14_black_litterman_factor_model.rst", "auto_examples/1_mean_risk/plot_1_maximum_sharpe_ratio.rst", "auto_examples/1_mean_risk/plot_2_minimum_CVaR.rst", "auto_examples/1_mean_risk/plot_3_efficient_frontier.rst", "auto_examples/1_mean_risk/plot_4_mean_variance_cdar.rst", "auto_examples/1_mean_risk/plot_5_weight_constraints.rst", "auto_examples/1_mean_risk/plot_6_transaction_costs.rst", "auto_examples/1_mean_risk/plot_7_management_fees.rst", "auto_examples/1_mean_risk/plot_8_regularization.rst", "auto_examples/1_mean_risk/plot_9_uncertainty_set.rst", "auto_examples/1_mean_risk/sg_execution_times.rst", "auto_examples/2_risk_budgeting/index.rst", "auto_examples/2_risk_budgeting/plot_1_risk_parity_variance.rst", "auto_examples/2_risk_budgeting/plot_2_risk_busgeting_CVaR.rst", "auto_examples/2_risk_budgeting/plot_3_risk_parity_ledoit_wolf.rst", "auto_examples/2_risk_budgeting/sg_execution_times.rst", "auto_examples/3_maxiumum_diversification/index.rst", "auto_examples/3_maxiumum_diversification/plot_1_maximum_divesification.rst", "auto_examples/3_maxiumum_diversification/sg_execution_times.rst", "auto_examples/4_distributioally_robust_cvar/index.rst", "auto_examples/4_distributioally_robust_cvar/plot_1_distributionally_robust_cvar.rst", "auto_examples/4_distributioally_robust_cvar/sg_execution_times.rst", "auto_examples/5_clustering/index.rst", "auto_examples/5_clustering/plot_1_hrp_cvar.rst", "auto_examples/5_clustering/plot_2_herc_cdar.rst", "auto_examples/5_clustering/plot_3_hrp_vs_herc.rst", "auto_examples/5_clustering/plot_4_nco.rst", "auto_examples/5_clustering/plot_5_nco_grid_search.rst", "auto_examples/5_clustering/sg_execution_times.rst", "auto_examples/6_ensemble/index.rst", "auto_examples/6_ensemble/plot_1_stacking.rst", "auto_examples/6_ensemble/sg_execution_times.rst", "auto_examples/7_pre_selection/index.rst", "auto_examples/7_pre_selection/plot_1_drop_correlated.rst", "auto_examples/7_pre_selection/plot_2_select_best_performers.rst", "auto_examples/7_pre_selection/sg_execution_times.rst", "auto_examples/8_data_preparation/index.rst", "auto_examples/8_data_preparation/plot_1_investment_horizon.rst", "auto_examples/8_data_preparation/sg_execution_times.rst", "auto_examples/index.rst", "auto_examples/sg_execution_times.rst", "generated/skfolio.cluster.HierarchicalClustering.rst", "generated/skfolio.cluster.LinkageMethod.rst", "generated/skfolio.datasets.load_factors_dataset.rst", "generated/skfolio.datasets.load_ftse100_dataset.rst", "generated/skfolio.datasets.load_nasdaq_dataset.rst", "generated/skfolio.datasets.load_sp500_dataset.rst", "generated/skfolio.datasets.load_sp500_index.rst", "generated/skfolio.distance.BaseDistance.rst", "generated/skfolio.distance.CovarianceDistance.rst", "generated/skfolio.distance.DistanceCorrelation.rst", "generated/skfolio.distance.KendallDistance.rst", "generated/skfolio.distance.MutualInformation.rst", "generated/skfolio.distance.PearsonDistance.rst", "generated/skfolio.distance.SpearmanDistance.rst", "generated/skfolio.measures.BaseMeasure.rst", "generated/skfolio.measures.ExtraRiskMeasure.rst", "generated/skfolio.measures.PerfMeasure.rst", "generated/skfolio.measures.RatioMeasure.rst", "generated/skfolio.measures.RiskMeasure.rst", "generated/skfolio.measures.average_drawdown.rst", "generated/skfolio.measures.cdar.rst", "generated/skfolio.measures.cvar.rst", "generated/skfolio.measures.drawdown_at_risk.rst", "generated/skfolio.measures.edar.rst", "generated/skfolio.measures.entropic_risk_measure.rst", "generated/skfolio.measures.evar.rst", "generated/skfolio.measures.first_lower_partial_moment.rst", "generated/skfolio.measures.fourth_central_moment.rst", "generated/skfolio.measures.fourth_lower_partial_moment.rst", "generated/skfolio.measures.get_cumulative_returns.rst", "generated/skfolio.measures.get_drawdowns.rst", "generated/skfolio.measures.gini_mean_difference.rst", "generated/skfolio.measures.max_drawdown.rst", "generated/skfolio.measures.mean.rst", "generated/skfolio.measures.mean_absolute_deviation.rst", "generated/skfolio.measures.owa_gmd_weights.rst", "generated/skfolio.measures.semi_deviation.rst", "generated/skfolio.measures.semi_variance.rst", "generated/skfolio.measures.standard_deviation.rst", "generated/skfolio.measures.third_central_moment.rst", "generated/skfolio.measures.ulcer_index.rst", "generated/skfolio.measures.value_at_risk.rst", "generated/skfolio.measures.variance.rst", "generated/skfolio.measures.worst_realization.rst", "generated/skfolio.metrics.make_scorer.rst", "generated/skfolio.model_selection.BaseCombinatorialCV.rst", "generated/skfolio.model_selection.CombinatorialPurgedCV.rst", "generated/skfolio.model_selection.WalkForward.rst", "generated/skfolio.model_selection.cross_val_predict.rst", "generated/skfolio.moments.BaseCovariance.rst", "generated/skfolio.moments.BaseMu.rst", "generated/skfolio.moments.DenoiseCovariance.rst", "generated/skfolio.moments.DetoneCovariance.rst", "generated/skfolio.moments.EWCovariance.rst", "generated/skfolio.moments.EWMu.rst", "generated/skfolio.moments.EmpiricalCovariance.rst", "generated/skfolio.moments.EmpiricalMu.rst", "generated/skfolio.moments.EquilibriumMu.rst", "generated/skfolio.moments.GerberCovariance.rst", "generated/skfolio.moments.GraphicalLassoCV.rst", "generated/skfolio.moments.LedoitWolf.rst", "generated/skfolio.moments.OAS.rst", "generated/skfolio.moments.ShrunkCovariance.rst", "generated/skfolio.moments.ShrunkMu.rst", "generated/skfolio.moments.ShrunkMuMethods.rst", "generated/skfolio.optimization.BaseComposition.rst", "generated/skfolio.optimization.BaseHierarchicalOptimization.rst", "generated/skfolio.optimization.ConvexOptimization.rst", "generated/skfolio.optimization.DistributionallyRobustCVaR.rst", "generated/skfolio.optimization.EqualWeighted.rst", "generated/skfolio.optimization.HierarchicalEqualRiskContribution.rst", "generated/skfolio.optimization.HierarchicalRiskParity.rst", "generated/skfolio.optimization.InverseVolatility.rst", "generated/skfolio.optimization.MaximumDiversification.rst", "generated/skfolio.optimization.MeanRisk.rst", "generated/skfolio.optimization.NestedClustersOptimization.rst", "generated/skfolio.optimization.ObjectiveFunction.rst", "generated/skfolio.optimization.Random.rst", "generated/skfolio.optimization.RiskBudgeting.rst", "generated/skfolio.optimization.StackingOptimization.rst", "generated/skfolio.population.Population.rst", "generated/skfolio.portfolio.BasePortfolio.rst", "generated/skfolio.portfolio.MultiPeriodPortfolio.rst", "generated/skfolio.portfolio.Portfolio.rst", "generated/skfolio.pre_selection.DropCorrelated.rst", "generated/skfolio.pre_selection.SelectKExtremes.rst", "generated/skfolio.pre_selection.SelectNonDominated.rst", "generated/skfolio.preprocessing.prices_to_returns.rst", "generated/skfolio.prior.BaseLoadingMatrix.rst", "generated/skfolio.prior.BasePrior.rst", "generated/skfolio.prior.BlackLitterman.rst", "generated/skfolio.prior.EmpiricalPrior.rst", "generated/skfolio.prior.FactorModel.rst", "generated/skfolio.prior.LoadingMatrixRegression.rst", "generated/skfolio.prior.PriorModel.rst", "generated/skfolio.uncertainty_set.BaseCovarianceUncertaintySet.rst", "generated/skfolio.uncertainty_set.BaseMuUncertaintySet.rst", "generated/skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.rst", "generated/skfolio.uncertainty_set.BootstrapMuUncertaintySet.rst", "generated/skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.rst", "generated/skfolio.uncertainty_set.EmpiricalMuUncertaintySet.rst", "generated/skfolio.uncertainty_set.UncertaintySet.rst", "generated/skfolio.utils.stats.NBinsMethod.rst", "generated/skfolio.utils.stats.assert_is_distance.rst", "generated/skfolio.utils.stats.assert_is_square.rst", "generated/skfolio.utils.stats.assert_is_symmetric.rst", "generated/skfolio.utils.stats.commutation_matrix.rst", "generated/skfolio.utils.stats.compute_optimal_n_clusters.rst", "generated/skfolio.utils.stats.corr_to_cov.rst", "generated/skfolio.utils.stats.cov_nearest.rst", "generated/skfolio.utils.stats.cov_to_corr.rst", "generated/skfolio.utils.stats.is_cholesky_dec.rst", "generated/skfolio.utils.stats.n_bins_freedman.rst", "generated/skfolio.utils.stats.n_bins_knuth.rst", "generated/skfolio.utils.stats.rand_weights.rst", "generated/skfolio.utils.stats.rand_weights_dirichlet.rst", "index.rst", "sg_execution_times.rst", "user_guide/cluster.rst", "user_guide/covariance.rst", "user_guide/data_preparation.rst", "user_guide/datasets.rst", "user_guide/distance.rst", "user_guide/expected_returns.rst", "user_guide/hyper_parameters_tuning.rst", "user_guide/index.rst", "user_guide/install.rst", "user_guide/model_selection.rst", "user_guide/optimization.rst", "user_guide/population.rst", "user_guide/portfolio.rst", "user_guide/pre_selection.rst", "user_guide/prior.rst", "user_guide/uncertainty_set.rst"], "titles": ["API Reference", "Mean-Risk", "Tracking Error", "Empirical Prior", "Black &amp; Litterman", "Factor Model", "Black &amp; Litterman Factor Model", "Maximum Sharpe Ratio", "Minimum CVaR", "Efficient Frontier", "Mean-Variance-CDaR Surface", "Weight Constraints", "Transaction Costs", "Management Fees", "L1 and L2 Regularization", "Uncertainty Set", "Computation times", "Risk Budgeting", "Risk Parity - Variance", "Risk Budgeting - CVaR", "Risk Parity - Covariance shrinkage", "Computation times", "Maximum Diversification", "Maximum Diversification", "Computation times", "Distributionally Robust CVaR", "Distributionally Robust CVaR", "Computation times", "Hierarchical Clustering and NCO", "Hierarchical Risk Parity - CVaR", "Hierarchical Equal Risk Contribution - CDaR", "HRP vs HERC", "Nested Clusters Optimization", "NCO - Combinatorial Purged CV", "Computation times", "Ensemble Optimizations", "Stacking Optimization", "Computation times", "Pre-selection", "Drop Highly Correlated Assets", "Select Best Performers", "Computation times", "Data Preparation", "Investment Horizon", "Computation times", "Examples", "Computation times", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.cluster</span></code>.HierarchicalClustering", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.cluster</span></code>.LinkageMethod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_factors_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_ftse100_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_nasdaq_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_sp500_dataset", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.datasets</span></code>.load_sp500_index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.BaseDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.CovarianceDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.DistanceCorrelation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.KendallDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.MutualInformation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.PearsonDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.distance</span></code>.SpearmanDistance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.BaseMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.ExtraRiskMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.PerfMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.RatioMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.RiskMeasure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.average_drawdown", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.cdar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.cvar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.drawdown_at_risk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.edar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.entropic_risk_measure", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.evar", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.first_lower_partial_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.fourth_central_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.fourth_lower_partial_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.get_cumulative_returns", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.get_drawdowns", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.gini_mean_difference", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.max_drawdown", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.mean", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.mean_absolute_deviation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.owa_gmd_weights", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.semi_deviation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.semi_variance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.standard_deviation", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.third_central_moment", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.ulcer_index", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.value_at_risk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.variance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.measures</span></code>.worst_realization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.metrics</span></code>.make_scorer", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.BaseCombinatorialCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.CombinatorialPurgedCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.WalkForward", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.model_selection</span></code>.cross_val_predict", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.BaseCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.BaseMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.DenoiseCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.DetoneCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EWCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EWMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EmpiricalCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EmpiricalMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.EquilibriumMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.GerberCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.GraphicalLassoCV", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.LedoitWolf", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.OAS", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.ShrunkCovariance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.ShrunkMu", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.moments</span></code>.ShrunkMuMethods", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.BaseComposition", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.BaseHierarchicalOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.ConvexOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.DistributionallyRobustCVaR", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.EqualWeighted", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.HierarchicalEqualRiskContribution", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.HierarchicalRiskParity", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.InverseVolatility", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.MaximumDiversification", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.MeanRisk", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.NestedClustersOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.ObjectiveFunction", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.Random", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.RiskBudgeting", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.optimization</span></code>.StackingOptimization", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.population</span></code>.Population", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.portfolio</span></code>.BasePortfolio", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.portfolio</span></code>.MultiPeriodPortfolio", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.portfolio</span></code>.Portfolio", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.pre_selection</span></code>.DropCorrelated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.pre_selection</span></code>.SelectKExtremes", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.pre_selection</span></code>.SelectNonDominated", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.preprocessing</span></code>.prices_to_returns", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.BaseLoadingMatrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.BasePrior", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.BlackLitterman", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.EmpiricalPrior", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.FactorModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.LoadingMatrixRegression", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.prior</span></code>.PriorModel", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BaseCovarianceUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BaseMuUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BootstrapCovarianceUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.BootstrapMuUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.EmpiricalCovarianceUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.EmpiricalMuUncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.uncertainty_set</span></code>.UncertaintySet", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.NBinsMethod", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.assert_is_distance", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.assert_is_square", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.assert_is_symmetric", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.commutation_matrix", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.compute_optimal_n_clusters", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.corr_to_cov", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.cov_nearest", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.cov_to_corr", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.is_cholesky_dec", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.n_bins_freedman", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.n_bins_knuth", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.rand_weights", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skfolio.utils.stats</span></code>.rand_weights_dirichlet", "skfolio", "Computation times", "Clustering Estimators", "Covariance Estimator", "Data Preparation", "Datasets", "Distance Estimator", "Expected Return Estimator", "Hyper-Parameters Tuning", "User Guide", "Installation", "Model Selection", "Optimization", "Population", "Portfolio", "Pre-Selection Transformers", "Prior Estimator", "Uncertainty Set Estimator"], "terms": {"thi": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 76, 77, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 156, 163, 167, 171, 172, 174, 175, 176, 177, 179], "i": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 69, 70, 71, 72, 73, 75, 76, 77, 78, 81, 83, 84, 88, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 151, 152, 154, 156, 158, 163, 165, 167, 168, 171, 172, 173, 174, 175, 176, 177, 179, 180], "pleas": [0, 47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "full": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 48, 126, 171, 177], "user": [0, 7, 8, 47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 167, 168], "guid": [0, 7, 8, 47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 167], "further": [0, 33], "detail": [0, 96, 98, 99, 100, 102, 105, 106, 107, 114, 115, 120, 121, 125, 163, 171], "raw": 0, "specif": [0, 5, 99, 114, 115, 120, 121, 125, 126, 139, 171, 179], "mai": [0, 7, 8, 14, 31, 33, 36, 39, 106, 171, 175], "enough": [0, 31, 33, 36, 39, 177], "give": [0, 7, 8, 95, 106, 167], "guidelin": 0, "us": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 38, 39, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 70, 72, 73, 75, 78, 81, 82, 83, 84, 91, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 156, 159, 160, 163, 165, 167, 168, 171, 174, 175, 177, 179, 180], "modul": [0, 149, 165, 171, 174, 175], "includ": [0, 7, 93, 106, 107, 108, 109, 125, 127, 131, 133, 163, 165, 174, 177], "all": [0, 5, 8, 11, 12, 14, 15, 26, 29, 32, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 163, 164, 167, 168, 171, 174, 175, 177], "across": [0, 106, 134, 167], "multiperiodportfolio": [0, 12, 13, 14, 15, 31, 33, 36, 39, 40, 95, 127, 163, 174, 176, 177], "object": [0, 7, 8, 14, 18, 26, 29, 31, 33, 36, 39, 40, 47, 54, 55, 56, 57, 58, 59, 60, 91, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 174, 175], "ar": [0, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 29, 30, 31, 32, 33, 36, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 76, 77, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 156, 163, 166, 167, 168, 169, 170, 171, 174, 175, 177, 178, 179], "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 18, 19, 20, 26, 29, 31, 33, 36, 39, 40, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 166, 169, 171, 174, 175, 176, 177, 178, 179, 180], "predict": [0, 10, 11, 12, 13, 15, 91, 95, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 140, 171, 175, 176, 177, 178], "method": [0, 5, 7, 8, 9, 11, 12, 13, 14, 18, 36, 47, 48, 54, 55, 56, 57, 58, 59, 60, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 156, 163, 166, 167, 169, 170, 171, 174, 175, 176, 178, 179, 180], "thei": [0, 76, 77, 138, 163, 167, 168, 171, 175, 177], "need": [0, 7, 8, 12, 13, 15, 113, 114, 115, 117, 118, 120, 121, 122, 125, 130, 156, 163, 167], "homogen": [0, 4, 6, 12, 113, 114, 117, 118, 120, 121, 125, 130, 177], "problem": [0, 5, 12, 13, 26, 40, 96, 98, 99, 100, 102, 105, 107, 113, 114, 115, 117, 118, 120, 121, 125, 130, 139, 156, 175, 177, 179], "mean": [0, 2, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 29, 31, 32, 36, 39, 40, 43, 63, 64, 65, 68, 73, 75, 78, 81, 82, 83, 84, 91, 95, 101, 103, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 133, 134, 137, 140, 141, 144, 145, 146, 147, 163, 164, 167, 171, 177], "dot": [0, 32, 36, 122, 126, 130, 175, 177], "product": [0, 32, 36, 122, 126, 130, 146, 167, 171, 175, 177], "asset": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 38, 40, 41, 43, 45, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 144, 145, 146, 147, 163, 164, 166, 167, 168, 169, 170, 175, 177, 178, 179, 180], "weight": [0, 1, 2, 4, 8, 12, 13, 14, 16, 23, 26, 29, 30, 31, 32, 33, 36, 45, 48, 82, 100, 101, 104, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 134, 137, 161, 162, 164, 167, 175, 176, 177], "list": [0, 11, 40, 106, 114, 115, 120, 121, 122, 125, 126, 127, 128, 129, 130, 133, 137, 171, 176, 177], "packag": [0, 172], "exampl": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 49, 50, 51, 52, 53, 93, 94, 95, 113, 114, 115, 117, 118, 120, 121, 122, 125, 130, 131, 132, 133, 137, 141, 163, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180], "meanrisk": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 32, 33, 36, 39, 40, 43, 45, 120, 122, 126, 163, 171, 174, 175, 176, 178, 180], "optim": [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 37, 39, 40, 43, 62, 95, 105, 106, 107, 110, 130, 133, 134, 139, 141, 144, 145, 146, 147, 154, 159, 160, 164, 165, 172, 174, 176, 177, 178, 179, 180], "maximum": [1, 3, 4, 5, 6, 10, 11, 12, 13, 16, 24, 36, 39, 40, 47, 64, 65, 69, 79, 88, 96, 98, 99, 100, 102, 105, 106, 107, 113, 114, 115, 117, 118, 120, 121, 125, 127, 128, 129, 130, 139, 156, 164], "sharp": [1, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 18, 19, 20, 23, 29, 32, 33, 36, 39, 40, 45, 64, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 164, 171, 175, 177], "ratio": [1, 2, 3, 4, 5, 6, 8, 9, 10, 14, 15, 16, 18, 19, 20, 23, 29, 31, 32, 33, 36, 39, 40, 45, 64, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 164, 171, 175], "minimum": [1, 2, 9, 10, 11, 16, 29, 32, 40, 45, 47, 73, 75, 81, 83, 84, 113, 114, 115, 117, 118, 120, 121, 122, 125, 127, 128, 129, 130, 133, 164, 175], "cvar": [1, 2, 7, 9, 14, 15, 16, 17, 18, 20, 21, 23, 27, 28, 30, 31, 32, 33, 34, 36, 40, 65, 72, 113, 114, 115, 117, 118, 121, 122, 125, 128, 129, 130, 164, 171, 177], "effici": [1, 10, 16, 43, 45, 118, 122, 164, 167, 171, 176], "frontier": [1, 10, 16, 43, 45, 118, 122, 164, 167, 176], "varianc": [1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 36, 39, 40, 43, 45, 47, 48, 65, 78, 84, 96, 98, 99, 100, 102, 105, 107, 110, 113, 114, 117, 118, 121, 122, 125, 128, 129, 130, 133, 139, 141, 144, 145, 146, 147, 156, 164, 167, 171, 175, 176, 177], "cdar": [1, 7, 8, 9, 14, 15, 16, 18, 19, 20, 23, 28, 29, 34, 36, 40, 45, 65, 70, 113, 114, 117, 118, 121, 125, 128, 129, 130, 163, 164, 175, 177], "surfac": [1, 16, 45, 127, 164], "constraint": [1, 2, 9, 10, 14, 15, 16, 26, 45, 114, 115, 120, 121, 125, 164, 175], "transact": [1, 16, 45, 108, 113, 114, 115, 117, 118, 120, 121, 125, 130, 164, 175, 177], "cost": [1, 16, 45, 113, 114, 115, 117, 118, 120, 121, 125, 130, 164, 175, 177], "manag": [1, 16, 45, 55, 57, 59, 60, 98, 99, 105, 112, 113, 114, 117, 118, 120, 121, 122, 125, 130, 134, 138, 163, 164, 167, 175, 177], "fee": [1, 16, 45, 113, 114, 117, 118, 120, 121, 125, 130, 163, 164, 175, 177], "l1": [1, 16, 36, 45, 106, 114, 120, 121, 163, 164, 175], "l2": [1, 16, 45, 114, 120, 121, 159, 164, 175], "regular": [1, 15, 16, 36, 45, 109, 114, 115, 120, 121, 163, 164, 175], "uncertainti": [1, 16, 26, 45, 114, 121, 137, 142, 143, 144, 145, 146, 147, 148, 164, 175], "set": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 16, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 45, 47, 54, 55, 56, 57, 58, 59, 60, 76, 77, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 156, 161, 164, 167, 168, 171, 174, 175, 176, 177], "track": [1, 16, 45, 120, 121, 163, 164, 175], "error": [1, 5, 15, 16, 45, 106, 107, 108, 109, 110, 114, 115, 120, 121, 125, 129, 130, 139, 150, 151, 152, 156, 163, 164, 175, 179, 180], "empir": [1, 16, 45, 98, 102, 103, 138, 146, 147, 163, 164], "prior": [1, 4, 5, 6, 16, 20, 36, 40, 43, 45, 99, 113, 114, 115, 117, 118, 119, 120, 121, 125, 144, 145, 146, 147, 163, 164, 167, 171], "black": [1, 16, 45, 137, 164, 175], "litterman": [1, 16, 45, 137, 164, 175], "factor": [1, 3, 4, 16, 29, 45, 49, 95, 100, 101, 104, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 134, 139, 140, 141, 144, 145, 146, 147, 164, 175], "model": [1, 14, 15, 16, 45, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 137, 139, 141, 164, 165, 166, 169, 170, 171, 172, 175, 176, 177, 178, 180], "go": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 167], "end": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 93, 94, 96, 98, 99, 100, 102, 105, 107, 121, 125, 127, 133, 154, 175], "download": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 50, 51, 168], "code": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 163], "run": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 95, 106, 122, 126, 131, 132, 133, 140, 167, 171, 175], "your": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 167, 171, 175], "browser": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "via": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 168], "binder": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "tutori": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 114, 115, 120, 121, 125], "show": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 127], "how": [2, 3, 4, 5, 6, 11, 12, 13, 14, 15, 20, 36, 40, 47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 171, 175], "incorpor": [2, 6, 11, 12, 13, 14, 15, 20, 93, 99, 137, 174, 175, 179], "The": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 67, 68, 69, 70, 71, 72, 73, 75, 78, 81, 83, 84, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 158, 159, 160, 161, 162, 163, 165, 168, 171, 174, 175, 177, 179, 180], "defin": [2, 11, 12, 47, 55, 56, 57, 58, 59, 60, 71, 92, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 148, 154, 167, 180], "rmse": [2, 120, 121], "root": [2, 83, 85, 120, 121, 128, 129, 130, 167], "squar": [2, 29, 30, 32, 47, 55, 57, 59, 60, 83, 85, 106, 107, 108, 109, 120, 121, 128, 129, 130, 144, 145, 146, 147, 151, 167], "portfolio": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 55, 57, 59, 60, 91, 94, 95, 105, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 133, 134, 138, 139, 144, 145, 146, 147, 163, 165, 171, 172, 174, 175, 176, 178, 179], "compar": [2, 7, 8, 10, 14, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 93, 94, 106, 107, 108, 109, 120, 121, 129, 133, 137, 141, 174, 175, 177], "target": [2, 15, 73, 75, 81, 83, 84, 93, 95, 110, 119, 120, 121, 122, 126, 131, 132, 133, 134], "In": [2, 3, 4, 5, 6, 9, 11, 12, 13, 14, 15, 29, 30, 31, 32, 33, 39, 40, 58, 91, 94, 106, 108, 126, 141, 171, 174, 176, 177], "we": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 91, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 133, 139, 146, 156, 163, 167, 171, 172, 174, 175, 176, 179], "creat": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 95, 168, 176, 179], "long": [2, 14, 15, 113, 114, 115, 117, 118, 120, 121, 125, 167, 175], "short": [2, 14, 15, 36, 113, 114, 115, 117, 118, 120, 121, 125, 167], "20": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 36, 39, 43, 52, 53, 114, 115, 120, 121, 125, 168], "stock": [2, 13], "spx": [2, 3, 4, 5, 6, 29, 113, 114, 115, 117, 118, 120, 121, 125, 137, 168], "index": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 50, 51, 52, 53, 64, 65, 87, 93, 94, 114, 115, 120, 121, 125, 127, 128, 129, 130, 131, 132, 133, 163, 175, 177], "0": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 52, 55, 56, 57, 59, 60, 67, 68, 69, 70, 71, 72, 76, 88, 93, 94, 95, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 133, 134, 137, 144, 145, 146, 147, 148, 161, 163, 164, 167, 171, 172, 174, 175, 176, 177, 178, 179, 180], "30": [2, 7, 8, 9, 14, 15, 18, 20, 23, 29, 33, 36, 40, 43, 128, 129, 130, 176], "while": [2, 36, 78, 93, 95, 105, 126, 128, 129, 130, 163, 171, 172], "minim": [2, 9, 26, 29, 30, 31, 32, 47, 48, 115, 117, 118, 121, 123, 163, 175], "condit": [2, 8, 10, 64, 65, 67, 68, 78, 98, 106, 107, 114, 115, 121, 125, 128, 129, 130, 163, 175], "valu": [2, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 23, 29, 30, 32, 36, 40, 47, 48, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 154, 156, 158, 163, 171, 175], "risk": [2, 5, 7, 8, 9, 10, 12, 13, 14, 15, 21, 23, 28, 32, 34, 36, 40, 47, 62, 64, 65, 67, 68, 69, 70, 71, 72, 88, 104, 110, 113, 114, 115, 117, 118, 120, 121, 122, 123, 125, 126, 128, 129, 130, 133, 134, 137, 138, 139, 164, 167, 171, 172, 179], "95": [2, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 50, 67, 68, 69, 70, 71, 72, 88, 114, 115, 121, 125, 128, 129, 130, 131, 144, 145, 146, 147, 174, 176], "load": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 135, 139, 140, 168, 179], "": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 154, 160, 163, 166, 167, 168, 169, 170, 175, 176, 177, 178, 179, 180], "p": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 18, 19, 20, 23, 26, 29, 30, 32, 33, 43, 52, 53, 93, 105, 108, 168], "500": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 32, 33, 43, 52, 53, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 168], "dataset": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 93, 95, 96, 98, 99, 100, 102, 105, 107, 156, 165, 166, 169, 170, 171, 174, 175, 176, 178, 179, 180], "compos": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 49, 50, 51, 52, 53, 113, 114, 117, 118, 120, 121, 125, 127, 129, 130, 163, 168, 177], "daili": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 113, 114, 117, 118, 120, 121, 125, 130, 137, 167, 168], "price": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 91, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 134, 137, 138, 139, 140, 144, 145, 146, 147, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180], "from": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 47, 49, 50, 51, 52, 53, 55, 57, 59, 60, 70, 72, 76, 77, 91, 93, 94, 98, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 156, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180], "composit": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 31, 33, 36, 39, 40, 43, 50, 51, 52, 127, 128, 129, 130, 168, 176, 177], "itself": [2, 127], "import": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 93, 94, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180], "numpi": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 91, 93, 94, 166, 169, 170, 174, 175, 177, 178, 179, 180], "np": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 47, 91, 93, 94, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 125, 174, 175, 177], "plotli": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 127, 130], "io": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "sklearn": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 91, 93, 94, 106, 107, 108, 109, 122, 140, 163, 165, 171, 174, 175, 176, 177, 178], "clone": [2, 14, 15], "model_select": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 91, 122, 163, 171, 174, 175, 176, 177, 178], "train_test_split": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 163, 171, 174, 175, 176, 178], "skfolio": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180], "popul": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 95, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 163, 174], "riskmeasur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 29, 30, 31, 32, 33, 36, 43, 91, 113, 114, 117, 118, 121, 122, 125, 126, 128, 129, 130, 133, 163, 171, 175, 176, 177], "load_sp500_dataset": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 32, 33, 43, 163, 165, 166, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180], "load_sp500_index": [2, 168], "equalweight": [2, 8, 14, 23, 26, 29, 30, 31, 32, 33, 36, 124, 175], "objectivefunct": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 32, 36, 39, 121, 163, 171, 175, 180], "preprocess": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 163, 165, 166, 169, 170, 171, 174, 175, 176, 178, 179, 180], "prices_to_return": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 163, 165, 166, 169, 170, 171, 174, 175, 176, 178, 179, 180], "2014": [2, 5, 6, 29, 49], "spx_price": 2, "x": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 134, 137, 138, 139, 140, 144, 145, 146, 147, 150, 151, 152, 153, 158, 159, 160, 163, 165, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180], "y": [2, 5, 6, 9, 10, 14, 15, 29, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 144, 145, 146, 147, 163, 175, 176, 179], "x_train": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 163, 171, 175, 176, 178], "x_test": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 106, 107, 108, 109, 163, 171, 175, 176, 178], "y_train": [2, 5, 6, 29, 163, 175], "y_test": [2, 5, 6, 29, 163, 175], "test_siz": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 94, 163, 171, 175, 176, 178], "33": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 32, 36, 39, 40, 163, 171, 175, 176], "shuffl": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 94, 163, 171, 174, 175, 176, 178], "fals": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 50, 51, 55, 57, 59, 60, 76, 77, 91, 94, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 110, 114, 115, 120, 121, 125, 127, 128, 129, 130, 131, 132, 133, 134, 138, 139, 140, 156, 158, 163, 171, 174, 175, 176, 178], "two": [2, 6, 14, 29, 31, 33, 40, 47, 58, 78, 105, 106, 107, 108, 109, 110, 117, 118, 127, 128, 129, 130, 131, 154, 167, 171, 175], "without": [2, 5, 7, 8, 12, 13, 14, 15, 20, 39, 40, 114, 115, 120, 121, 125, 128, 129, 130], "versu": [2, 10], "A": [2, 3, 4, 5, 11, 12, 14, 29, 40, 46, 47, 54, 55, 56, 57, 58, 59, 60, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 166, 167, 169, 171, 175, 176, 177, 178, 179], "differ": [2, 7, 8, 9, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 33, 36, 39, 40, 43, 47, 64, 65, 78, 82, 108, 117, 120, 121, 125, 127, 128, 129, 130, 154, 163, 167, 175], "between": [2, 12, 14, 15, 29, 30, 32, 43, 47, 48, 58, 78, 106, 107, 108, 109, 118, 120, 121, 128, 129, 130, 134, 137, 154, 171, 175], "first": [2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 29, 36, 39, 40, 43, 64, 65, 73, 94, 99, 106, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 156, 163, 167, 172, 175], "model_no_track": 2, "objective_funct": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 32, 36, 39, 121, 163, 171, 175, 180], "minimize_risk": [2, 8, 121, 123], "risk_measur": [2, 3, 4, 5, 6, 7, 8, 9, 10, 14, 15, 18, 19, 20, 29, 30, 31, 32, 33, 36, 43, 113, 114, 117, 118, 121, 125, 163, 171, 175, 176], "min_weight": [2, 11, 14, 15, 36, 113, 114, 115, 117, 118, 120, 121, 125, 163, 171], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 24, 26, 27, 29, 30, 31, 32, 33, 36, 37, 39, 40, 43, 44, 47, 53, 55, 56, 57, 59, 60, 67, 68, 69, 71, 88, 91, 93, 94, 95, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 144, 145, 146, 147, 148, 149, 154, 156, 159, 160, 163, 167, 171, 172, 175, 176, 177, 180], "portfolio_param": [2, 3, 4, 5, 6, 7, 8, 9, 13, 14, 15, 18, 19, 20, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 95, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126], "dict": [2, 3, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 18, 19, 20, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "name": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 168, 171, 175, 176, 177], "tag": [2, 9, 10, 14, 15, 31, 33, 36, 39, 43, 127, 128, 129, 130], "No": [2, 14, 15, 158], "fit": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 165, 166, 167, 169, 170, 171, 174, 175, 176, 178, 179, 180], "weights_": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 39, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 163, 171, 175, 176, 180], "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 32, 39, 47, 54, 55, 56, 57, 58, 59, 60, 91, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 144, 145, 146, 147, 159, 160, 166, 169, 170, 175, 177, 178, 179, 180], "03676195": 2, "02374444": 2, "02155918": 2, "02117437": 2, "0373302": 2, "00370324": 2, "01028137": 2, "0298146": 2, "07317879": 2, "15980287": 2, "00139632": 2, "01100645": 2, "0810491": 2, "20227491": 2, "21580436": 2, "17510456": 2, "00322793": 2, "06858182": 2, "11093659": 2, "07941073": 2, "Then": [2, 12, 13, 14, 31, 32, 39, 40, 122, 138, 156, 175], "model_track": 2, "set_param": [2, 12, 13, 14, 15, 31, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "max_tracking_error": [2, 120, 121], "003": [2, 177], "For": [2, 3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 47, 58, 93, 95, 96, 98, 99, 100, 102, 104, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 134, 139, 163, 167, 171, 174, 175, 176, 177, 179], "comparison": [2, 3, 4, 5, 6, 31], "singl": [2, 29, 30, 31, 32, 33, 47, 48, 93, 95, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 133, 134, 167, 174, 175], "contain": [2, 3, 4, 5, 7, 8, 29, 30, 32, 47, 50, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 171, 175, 176, 177, 179], "model_spx": 2, "now": [2, 10, 12, 14, 15, 36, 40], "plot": [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47, 93, 127, 128, 129, 130, 177], "both": [2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 15, 18, 19, 20, 23, 31, 33, 36, 39, 93, 108, 127, 130, 148, 156, 167, 175, 176, 180], "train": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 93, 94, 95, 106, 115, 122, 126, 140, 174, 175, 177], "ptf_no_tracking_train": 2, "ptf_tracking_train": 2, "spx_train": 2, "note": [2, 5, 11, 12, 13, 14, 15, 40, 54, 91, 96, 97, 102, 106, 107, 108, 109, 114, 115, 120, 121, 122, 125, 126, 135, 136, 142, 143, 167, 177, 179], "coul": 2, "have": [2, 4, 6, 10, 11, 12, 14, 30, 36, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 167, 171], "directli": [2, 11, 58, 113, 114, 117, 118, 120, 121, 125, 126, 141, 167, 171, 177], "train_spx": 2, "population_train": [2, 9, 10, 14, 15], "fig": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 47], "plot_cumulative_return": [2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 127, 128, 129, 130, 163, 176, 177], "let": [2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 131, 176], "print": [2, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 39, 40, 93, 94, 106, 163, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180], "tracking_rms": 2, "sqrt": [2, 48, 55, 57, 59, 60, 106, 107, 108, 109, 128, 129, 130, 154], "2": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 18, 19, 20, 23, 26, 29, 31, 32, 36, 39, 40, 41, 43, 47, 48, 51, 55, 57, 58, 59, 60, 93, 94, 95, 100, 101, 105, 107, 108, 110, 114, 115, 117, 118, 120, 121, 122, 125, 127, 131, 133, 137, 144, 145, 146, 147, 148, 154, 163, 167, 171, 175, 176, 177, 180], "f": [2, 14, 23, 31, 33, 36, 39, 43, 93, 94, 121, 123, 175, 177], "cvar_ratio": [2, 15, 31, 33, 64, 128, 129, 130], "2f": [2, 14, 23, 33, 36, 39, 40], "n": [2, 12, 13, 14, 31, 33, 36, 46, 104, 113, 114, 117, 118, 120, 121, 125, 127, 130, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 167, 176], "60": [2, 8, 9, 12, 13, 14, 15, 23, 31, 33, 36, 40, 163], "58": [2, 7, 9, 14, 15, 20, 29, 108], "02": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 16, 18, 19, 20, 23, 26, 29, 30, 32, 33, 34, 37, 39, 40, 43, 49, 51, 52, 53, 115, 137, 164, 168, 177], "78": [2, 8, 9, 14, 19, 23, 29, 40, 51], "03": [2, 4, 5, 6, 7, 8, 9, 13, 15, 16, 19, 23, 29, 32, 36, 39, 40, 43, 49, 51, 52, 53, 163, 164, 177], "achiev": [2, 12, 14, 15, 31, 167], "requir": 2, "tradeoff": 2, "higher": [2, 12, 13, 14, 31, 75, 94, 128, 129, 130, 132, 163], "final": [2, 7, 8, 9, 11, 12, 14, 15, 18, 19, 20, 23, 29, 30, 31, 32, 36, 105, 117, 118, 122, 126, 133, 175, 177], "test": [2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 56, 92, 93, 94, 95, 106, 107, 108, 109, 122, 126, 156, 174, 176, 177], "ptf_no_tracking_test": 2, "ptf_tracking_test": 2, "spx_test": 2, "04": [2, 3, 4, 7, 8, 9, 14, 15, 16, 20, 21, 31, 36, 39, 40, 43, 50, 51, 52, 53, 137, 163, 164], "3": [2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 18, 19, 20, 21, 23, 26, 29, 31, 32, 36, 39, 40, 43, 52, 93, 94, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 120, 121, 122, 125, 131, 144, 145, 163, 167, 171, 177, 178], "08": [2, 4, 5, 7, 8, 9, 13, 14, 16, 19, 23, 36, 40, 43, 49, 51, 52, 53], "39": [2, 7, 9, 14, 15, 18, 19, 20, 29, 36, 40], "As": [2, 12, 13, 18, 19, 23], "expect": [2, 3, 4, 5, 6, 9, 12, 13, 15, 18, 19, 23, 65, 67, 68, 78, 97, 101, 103, 104, 110, 113, 114, 115, 117, 118, 119, 120, 121, 123, 125, 128, 129, 130, 137, 138, 139, 141, 145, 147, 148, 167, 175, 179, 180], "also": [2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 29, 30, 31, 32, 40, 48, 114, 115, 120, 121, 122, 125, 126, 131, 133, 134, 139, 163, 167, 174, 175, 177, 179], "lower": [2, 3, 4, 5, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 73, 75, 83, 84, 113, 114, 115, 117, 118, 120, 121, 125, 128, 129, 130, 141, 163, 175, 179], "total": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 46, 95, 110, 113, 114, 117, 118, 120, 121, 125, 130, 134, 164, 175], "time": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 55, 57, 58, 59, 60, 91, 93, 94, 104, 106, 113, 114, 115, 117, 118, 120, 121, 123, 125, 128, 129, 130, 134, 167, 174, 175], "script": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "minut": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "185": [2, 16, 50, 164], "second": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 65, 78, 83, 84, 85, 89, 121, 128, 129, 130, 131, 171], "jupyt": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45], "notebook": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45], "plot_10_tracking_error": [2, 16, 164], "ipynb": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43], "python": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 163], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163], "py": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 24, 26, 27, 29, 30, 31, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 131, 132, 133, 164], "galleri": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 164], "gener": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 93, 94, 95, 106, 118, 122, 126, 131, 132, 133, 144, 145, 167, 171, 174, 175], "sphinx": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45], "empiricalprior": [3, 5, 20, 29, 36, 40, 43, 113, 114, 115, 117, 118, 119, 120, 121, 125, 137, 139, 144, 145, 146, 147, 163, 167, 171, 175, 179], "estim": [3, 4, 5, 6, 7, 13, 14, 15, 18, 19, 20, 23, 26, 31, 33, 36, 40, 47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 159, 163, 167, 174, 178], "priormodel": [3, 4, 5, 29, 113, 114, 115, 117, 118, 119, 120, 121, 125, 137, 138, 139, 175, 179], "distribut": [3, 4, 5, 14, 15, 26, 29, 49, 50, 51, 52, 53, 78, 106, 107, 108, 109, 115, 124, 127, 128, 129, 130, 144, 145, 146, 147, 154, 161, 162, 163, 167, 168, 171, 175, 179, 180], "It": [3, 4, 5, 7, 8, 11, 15, 26, 29, 30, 32, 73, 75, 78, 81, 83, 84, 98, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 129, 130, 137, 139, 154, 163, 165, 166, 167, 169, 170, 171, 175, 177, 178, 179, 180], "repres": [3, 4, 5, 6, 15, 29, 30, 31, 32, 33, 36, 39, 40, 47, 49, 68, 70, 72, 106, 107, 108, 109, 128, 129, 130, 146, 174, 175, 179], "investor": [3, 4, 5, 29, 71, 128, 129, 130, 137, 175, 177, 179], "belief": [3, 4, 5, 29, 175, 179], "about": [3, 4, 5, 6, 26, 29, 42, 45, 114, 115, 120, 121, 125, 137, 172, 175, 179], "dataclass": [3, 4, 5, 141, 148, 179], "mu": [3, 4, 5, 12, 13, 15, 101, 103, 104, 107, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 123, 125, 141, 143, 145, 147, 148, 167, 170, 175, 179, 180], "covari": [3, 4, 5, 17, 21, 40, 45, 55, 96, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 119, 120, 121, 125, 130, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 155, 156, 157, 164, 167, 175, 179, 180], "matrix": [3, 4, 5, 11, 29, 30, 32, 40, 47, 48, 54, 55, 56, 57, 58, 59, 60, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 113, 114, 115, 117, 118, 119, 120, 121, 122, 125, 130, 135, 137, 138, 139, 140, 141, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 169, 174, 175, 177, 179, 180], "choleski": [3, 4, 5, 96, 98, 99, 100, 102, 105, 107, 114, 115, 119, 120, 121, 125, 137, 141, 156, 158, 175, 179], "triangular": [3, 4, 5, 141, 179], "option": [3, 4, 5, 47, 50, 51, 55, 58, 73, 75, 81, 83, 84, 91, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 144, 145, 146, 147, 167, 179], "simpli": [3, 12, 131], "mu_estim": [3, 5, 137, 138, 163, 171, 175, 179], "covariance_estim": [3, 5, 20, 36, 40, 55, 98, 99, 104, 110, 138, 163, 175, 179], "build": [3, 4, 5, 6, 19, 55, 57, 59, 60, 118, 122, 163, 172, 176, 180], "jame": [3, 5, 110, 111, 179], "stein": [3, 5, 110, 111, 179], "shrinkag": [3, 5, 13, 17, 21, 45, 107, 108, 109, 110, 111, 113, 114, 117, 118, 120, 121, 125, 163, 164, 179], "denois": [3, 98, 175, 179], "start": [3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 45, 49, 50, 51, 52, 53, 76, 93, 118, 127, 128, 129, 130, 149, 156, 163, 168, 175], "1990": [3, 4, 7, 8, 9, 11, 12, 13, 18, 19, 20, 23, 32, 43, 52, 53, 168], "01": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 23, 26, 30, 31, 32, 33, 34, 36, 39, 40, 43, 49, 50, 51, 52, 53, 137, 164, 168, 171, 175, 177], "up": [3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 30, 31, 32, 33, 36, 39, 40, 43, 49, 50, 51, 52, 53, 96, 98, 99, 100, 102, 105, 107, 168], "2022": [3, 4, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 30, 32, 33, 43, 49, 52, 53, 105, 168, 177], "12": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 36, 39, 43, 49, 51, 52, 53, 93, 163, 168], "28": [3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 36, 40, 43, 49, 52, 53, 164, 168], "moment": [3, 5, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 73, 74, 75, 83, 84, 85, 86, 89, 113, 114, 117, 118, 121, 125, 128, 129, 130, 138, 163, 166, 167, 170, 171, 175, 179, 180], "denoisecovari": [3, 163, 166, 175, 179], "shrunkmu": [3, 5, 111, 163, 170, 179], "maximize_ratio": [3, 4, 5, 6, 7, 10, 32, 39, 121, 123, 163, 171, 175, 180], "prior_estim": [3, 4, 5, 6, 20, 29, 36, 40, 43, 113, 114, 115, 117, 118, 119, 120, 121, 125, 137, 144, 145, 146, 147, 163, 171, 175], "max": [3, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 48, 106, 107, 108, 109, 121, 154, 175], "5": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 32, 33, 34, 36, 39, 40, 49, 52, 55, 56, 57, 59, 60, 93, 94, 95, 105, 106, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 133, 163, 167, 178, 180], "30314924e": 3, "93771054e": 3, "10": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20, 23, 26, 29, 36, 39, 40, 43, 50, 93, 108, 114, 115, 120, 121, 125, 132, 163, 171], "58269647e": 3, "78708311e": 3, "05717669e": 3, "4": [3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 23, 26, 32, 36, 39, 40, 43, 47, 51, 52, 93, 94, 105, 106, 117, 118, 121, 131, 132, 133, 154, 167, 175, 177], "89322196e": 3, "23352411e": 3, "64823756e": 3, "96895546e": 3, "8": [3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 18, 19, 20, 23, 26, 31, 32, 33, 36, 39, 40, 51, 93, 154, 163], "40812344e": 3, "98213665e": 3, "9": [3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 20, 23, 26, 32, 33, 36, 39, 93, 114, 115, 120, 121, 125, 175, 178], "90879685e": 3, "6": [3, 5, 6, 8, 9, 11, 12, 13, 15, 23, 26, 29, 32, 39, 43, 51, 93, 94, 167, 177], "51844546e": 3, "7": [3, 4, 5, 6, 7, 8, 9, 12, 14, 15, 23, 26, 32, 33, 39, 40, 51, 93, 114, 115, 120, 121, 125, 167], "44938306e": 3, "78413867e": 3, "09": [3, 4, 5, 6, 7, 8, 9, 12, 13, 26, 40], "27194222e": 3, "87866505e": 3, "81161325e": 3, "35005322e": 3, "04863941e": 3, "default": [3, 4, 5, 7, 8, 11, 12, 13, 14, 26, 29, 30, 32, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 81, 83, 84, 88, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 156, 161, 167, 168, 171, 175, 177, 179], "bench": [3, 18, 19, 20, 23, 26, 29, 30, 32], "43855248e": [3, 4, 7], "09226948e": [3, 4, 7], "30530766e": [3, 4, 7], "11": [3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 18, 19, 20, 23, 26, 29, 36, 39, 40, 52, 93, 164], "20898034e": [3, 4, 7], "18441126e": [3, 4, 7], "28498817e": [3, 4, 7], "28522027e": [3, 4, 7], "24120028e": [3, 4, 7], "43231855e": [3, 4, 7], "78010014e": [3, 4, 7], "19871439e": [3, 4, 7], "49938736e": [3, 4, 7], "16368341e": [3, 4, 7], "73909314e": [3, 4, 7], "74856659e": [3, 4, 7], "09507654e": [3, 4, 7], "64772972e": [3, 4, 7], "84021249e": [3, 4, 7], "34862950e": [3, 4, 7], "35710067e": [3, 4, 7], "pred_model": [3, 7, 8, 40], "pred_bench": [3, 7, 8, 14, 33, 36, 40], "157": [3, 16, 164], "plot_11_empirical_prior": [3, 16, 164], "blacklitterman": [4, 6, 163, 175, 179], "take": [4, 5, 12, 14, 15, 114, 115, 120, 121, 125, 127, 131, 137, 166, 167, 169, 170, 171, 175, 177, 178, 179, 180], "input": [4, 6, 11, 12, 13, 36, 47, 95, 106, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 134, 137, 138, 159, 160, 163, 167, 175, 177, 179], "comput": [4, 14, 15, 29, 30, 32, 47, 48, 55, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 98, 99, 100, 102, 104, 105, 106, 107, 108, 109, 113, 114, 117, 118, 119, 120, 121, 122, 125, 128, 129, 130, 133, 137, 144, 145, 146, 147, 153, 154, 156, 158, 159, 160, 167, 171, 175, 177, 179], "which": [4, 5, 6, 11, 12, 13, 14, 15, 23, 26, 29, 30, 32, 49, 50, 51, 52, 53, 55, 57, 59, 60, 70, 71, 72, 93, 95, 105, 106, 107, 108, 109, 114, 115, 117, 118, 120, 121, 122, 125, 126, 128, 129, 130, 131, 132, 133, 137, 139, 156, 167, 168, 171, 174, 175, 177, 179], "updat": [4, 12, 29, 30, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 175, 179], "get": [4, 6, 26, 47, 54, 55, 56, 57, 58, 59, 60, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 167, 179], "posterior": [4, 137, 179], "assum": [4, 6, 10, 12, 13, 106, 107, 108, 109, 126], "abl": [4, 6, 14, 15, 33], "accur": [4, 6, 139], "futur": [4, 6, 114, 115, 120, 121, 125, 167], "realiz": [4, 6, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 90, 121, 125, 128, 129, 130, 163, 175], "market": [4, 11, 99, 104, 114, 115, 117, 118, 120, 121, 137, 167, 175], "appl": [4, 11, 12, 13, 19], "an": [4, 6, 7, 8, 9, 10, 11, 12, 13, 15, 18, 19, 23, 26, 29, 30, 31, 32, 33, 36, 39, 48, 50, 51, 70, 72, 93, 95, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 147, 148, 150, 151, 152, 161, 170, 174, 175, 177, 180], "25": [4, 9, 14, 15, 31, 33, 36, 40, 41, 113, 117, 118], "absolut": [4, 6, 7, 8, 9, 11, 14, 15, 18, 19, 20, 23, 29, 30, 32, 36, 40, 55, 57, 59, 60, 64, 65, 78, 81, 114, 115, 120, 121, 125, 128, 129, 130, 131, 137, 163, 175], "outperform": [4, 6, 7, 8, 12, 13, 31, 33, 36, 55, 57, 59, 60, 118, 122, 137, 163], "electr": [4, 11, 12, 13, 19], "22": [4, 7, 9, 10, 14, 15, 16, 18, 19, 20, 29, 36, 37, 164], "rel": [4, 6, 29, 70, 72, 128, 129, 130, 137], "jpmorgan": [4, 11, 12, 13, 19], "15": [4, 7, 8, 9, 14, 15, 18, 19, 23, 26, 27, 29, 31, 34, 36, 40, 164], "By": [4, 6, 11, 12, 13, 14, 15, 32, 40, 50, 51, 168, 171, 179], "convert": [4, 6, 12, 13, 91, 137, 138, 155, 156, 157, 167], "annual": [4, 6, 7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 63, 64, 65, 128, 129, 130, 167], "analyst_view": [4, 179], "aapl": [4, 7, 8, 11, 12, 13, 19, 43, 51, 52, 163, 179], "00098": 4, "ge": [4, 11, 12, 13, 19, 43, 121, 125, 154, 175], "00086": [4, 14], "jpm": [4, 11, 12, 13, 19, 43, 163], "00059": [4, 9], "model_bl": 4, "73670065e": 4, "66647584e": 4, "24355699e": 4, "02231082e": 4, "84980192e": 4, "73718908e": 4, "40597193e": 4, "51376159e": 4, "27250993e": 4, "77910456e": 4, "72985253e": 4, "34073945e": 4, "11421641e": 4, "65451603e": 4, "79851683e": 4, "45803069e": 4, "40429482e": 4, "36401076e": 4, "99610901e": 4, "27962284e": 4, "model_empir": [4, 5], "pred_bl": 4, "pred_empir": 4, "becaus": [4, 6, 12, 18, 30, 108, 133, 167, 174], "our": [4, 6, 7, 8, 12, 13, 36, 163, 174], "were": [4, 6, 163], "below": [4, 9, 11, 12, 13, 14, 15, 29, 30, 32, 33, 36, 47, 73, 75, 84, 105, 106, 113, 114, 115, 117, 118, 120, 121, 125, 128, 129, 130, 131, 133, 163, 167, 171, 175], "can": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 54, 58, 70, 72, 78, 91, 93, 95, 96, 97, 98, 99, 100, 102, 105, 106, 107, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 135, 136, 137, 139, 140, 142, 143, 148, 156, 158, 163, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180], "see": [4, 7, 8, 14, 15, 26, 29, 30, 31, 43, 47, 48, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 113, 114, 117, 118, 120, 121, 122, 125, 126, 131, 132, 133, 139, 163, 171], "alloc": [4, 12, 14, 15, 26, 29, 30, 31, 110, 115, 117, 118, 125, 163, 167], "more": [4, 5, 7, 8, 11, 12, 13, 14, 19, 29, 30, 31, 32, 33, 36, 39, 45, 47, 94, 95, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 114, 115, 117, 118, 120, 121, 122, 125, 131, 139, 163, 171, 175, 177, 179], "plot_composit": [4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 18, 19, 23, 26, 29, 30, 31, 32, 33, 36, 40, 43, 127, 128, 129, 130, 176, 177], "465": [4, 16, 164], "plot_12_black_and_litterman": [4, 16, 164], "factormodel": [5, 6, 29, 163, 175, 179], "purpos": [5, 139, 175, 179], "impos": [5, 125, 139, 175, 179], "structur": [5, 29, 30, 32, 139, 166, 169, 170, 175, 178, 179, 180], "financi": [5, 11, 93, 99, 117, 118, 137, 139, 174, 179], "variabl": [5, 14, 15, 58, 78, 93, 114, 115, 120, 121, 125, 128, 129, 130, 131, 139, 146, 168, 171, 175, 179], "explain": [5, 12, 13, 29, 43, 99, 139, 179], "them": [5, 6, 13, 26, 31, 33, 36, 39, 40, 126, 127, 139, 177, 179], "through": [5, 71, 106, 128, 129, 130, 139, 167, 175, 179], "small": [5, 108, 110, 139, 179], "number": [5, 7, 8, 9, 14, 15, 18, 19, 20, 23, 26, 29, 31, 33, 36, 39, 40, 47, 55, 56, 57, 58, 59, 60, 82, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 144, 145, 149, 154, 156, 161, 162, 163, 171, 175, 179], "common": [5, 6, 29, 49, 134, 137, 138, 139, 167, 175, 179], "help": [5, 139, 179], "overcom": [5, 139, 179], "reduc": [5, 14, 15, 95, 98, 110, 114, 120, 121, 125, 131, 132, 133, 139, 163, 172, 179, 180], "paramet": [5, 7, 8, 9, 11, 12, 13, 26, 47, 48, 50, 51, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 172, 174, 175, 176, 179], "e": [5, 95, 106, 107, 108, 109, 126, 127, 139, 167, 179], "dimension": [5, 40, 96, 98, 99, 100, 102, 105, 107, 110, 139, 179], "make": [5, 7, 8, 11, 12, 13, 91, 94, 139, 175, 177, 179], "robust": [5, 14, 15, 27, 31, 33, 36, 39, 105, 114, 115, 118, 120, 121, 122, 139, 144, 145, 146, 147, 163, 164, 179, 180], "against": [5, 110, 131, 139, 179], "nois": [5, 98, 130, 139, 179], "provid": [5, 9, 11, 12, 13, 93, 94, 104, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 134, 137, 138, 139, 141, 167, 171, 179], "decomposit": [5, 96, 98, 99, 100, 102, 105, 107, 114, 115, 119, 120, 121, 125, 137, 139, 141, 156, 158, 175, 179], "systemat": [5, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 139, 179], "secur": [5, 49, 50, 51, 52, 53, 99, 134, 139, 167, 168, 179], "compon": [5, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 167, 179], "To": [5, 7, 8, 10, 12, 18, 19, 20, 23, 26, 29, 30, 32, 36, 40, 93, 122, 126, 130, 131, 174, 175, 179], "compat": [5, 7, 8, 94, 163, 174, 177, 178, 179], "scikit": [5, 7, 8, 91, 106, 107, 108, 109, 163, 166, 169, 170, 171, 172, 174, 175, 178, 179, 180], "learn": [5, 7, 8, 91, 93, 98, 99, 106, 107, 108, 109, 118, 122, 163, 166, 169, 170, 171, 172, 174, 175, 178, 179, 180], "lowercas": [5, 179], "even": [5, 8, 94, 167, 179], "2d": [5, 11, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 137, 179], "than": [5, 11, 14, 29, 30, 31, 32, 33, 36, 39, 43, 47, 78, 94, 95, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 114, 115, 117, 118, 120, 121, 122, 125, 128, 129, 130, 131, 132, 133, 156, 167, 175, 177, 179], "one": [5, 11, 12, 13, 29, 30, 31, 32, 33, 36, 39, 43, 47, 93, 94, 95, 113, 114, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 140, 141, 161, 162, 167, 171, 174, 175, 179], "consist": [5, 8, 36, 47, 48, 54, 55, 56, 57, 58, 59, 60, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 137, 138, 171, 174, 175, 179], "api": [5, 8, 33, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 137, 138, 163, 166, 168, 169, 170, 171, 175, 178, 179, 180], "etf": [5, 6, 29, 49], "linear_model": [5, 179], "ridgecv": 5, "load_factors_dataset": [5, 6, 29, 163, 168, 175, 179], "gerbercovari": [5, 55, 163, 166], "loadingmatrixregress": [5, 139, 179], "factor_pric": [5, 6, 29, 163, 175, 179], "model_factor_1": 5, "22188511e": [5, 6], "31737525e": [5, 6], "74253021e": [5, 6], "70440099e": [5, 6], "46436338e": [5, 6], "24959219e": [5, 6], "13001762e": [5, 6], "35652050e": [5, 6], "36336705e": [5, 6], "79104637e": [5, 6], "03133290e": [5, 6], "13696569e": [5, 6], "12895735e": [5, 6], "27967880e": [5, 6], "13346758e": [5, 6], "44128512e": [5, 6], "88142338e": [5, 6], "19657594e": [5, 6], "63432134e": [5, 6], "09849875e": [5, 6], "chang": [5, 7, 8, 12, 13, 14, 29, 30, 32, 40, 106, 107, 108, 109, 167, 172], "baseloadingmatrix": [5, 139], "beta": [5, 67, 68, 69, 70, 71, 72, 88, 110, 128, 129, 130, 139, 144, 145, 146, 147, 179], "lassocv": [5, 139, 140, 179], "each": [5, 7, 8, 11, 12, 13, 14, 18, 19, 20, 23, 29, 30, 31, 32, 33, 36, 39, 40, 47, 54, 55, 56, 57, 58, 59, 60, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 171, 174, 175, 177, 179], "separ": [5, 6, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 138, 139, 140, 179], "intercept": [5, 140], "parallel": [5, 12, 95, 106, 122, 126, 140, 175], "model_factor_2": 5, "loading_matrix_estim": [5, 139, 179], "linear_regressor": [5, 140], "fit_intercept": [5, 140], "n_job": [5, 12, 13, 14, 15, 31, 32, 33, 36, 39, 40, 95, 106, 122, 126, 140, 163, 171, 175], "97776252e": 5, "57851861e": 5, "18408031e": 5, "98298183e": 5, "16206284e": 5, "42391438e": 5, "00175085e": 5, "32124541e": 5, "74823262e": 5, "59482204e": 5, "59789920e": 5, "91802980e": 5, "42282444e": 5, "05685439e": 5, "43876113e": 5, "94746608e": 5, "31092783e": 5, "23719260e": 5, "35228602e": 5, "54697151e": 5, "gerber": [5, 105], "model_factor_3": 5, "factor_prior_estim": [5, 6, 139, 163, 175, 179], "48283750e": 5, "49645166e": 5, "48850261e": 5, "13": [5, 7, 8, 9, 14, 15, 20, 23, 29, 36, 40, 51, 96, 98, 99, 100, 102, 105, 107, 156], "59880563e": 5, "22380709e": 5, "12492676e": 5, "68739416e": 5, "26134346e": 5, "33953561e": 5, "45574521e": 5, "24004576e": 5, "61481439e": 5, "68197345e": 5, "44687699e": 5, "21327461e": 5, "72794158e": 5, "77006663e": 5, "47134961e": 5, "66255502e": 5, "78965839e": 5, "save": [5, 114, 115, 120, 121, 125, 179], "trail": 5, "underscor": [5, 15], "access": [5, 26, 126], "prior_estimator_": [5, 113, 114, 115, 119, 120, 121, 125, 137, 144, 145, 146, 147], "prior_model": 5, "prior_model_": [5, 137, 138, 139, 179], "loading_matrix": 5, "loading_matrix_estimator_": [5, 139], "loading_matrix_": [5, 140], "01562655e": 5, "81176235e": 5, "48598568e": 5, "89116954e": 5, "18538495e": 5, "64582189e": 5, "10584830e": 5, "88210632e": 5, "64220700e": 5, "95142106e": 5, "62632716e": 5, "66785730e": 5, "77784307e": 5, "61513792e": 5, "10083470e": 5, "72248235e": 5, "74361693e": 5, "44532312e": 5, "38087390e": 5, "50514320e": 5, "ptf_factor_1_test": 5, "ptf_factor_2_test": 5, "ptf_factor_3_test": 5, "ptf_empirical_test": 5, "297": [5, 16, 164], "plot_13_factor_model": [5, 16, 164], "coupl": 6, "previou": [6, 12, 31, 33, 36, 40, 113, 114, 117, 118, 120, 121, 125, 130, 177], "introduc": [6, 26, 29, 30, 32, 33, 36, 39, 40, 56, 163], "merg": [6, 31, 39], "togeth": [6, 36, 126, 163, 175, 177], "size": [6, 15, 31, 33, 36, 39, 49, 100, 101, 102, 103, 105, 107, 114, 115, 120, 121, 125, 128, 129, 130, 144, 145, 146, 147, 148, 154, 159, 160, 163, 175, 179, 180], "momentum": [6, 49], "qualiti": 6, "factor_view": [6, 163, 175], "00039": [6, 9, 137], "vlue": [6, 49, 163, 175, 179], "00011": [6, 9, 40], "mtum": [6, 49, 163, 175, 179], "qual": [6, 49, 163, 175, 179], "00007": 6, "model_bl_factor": 6, "56000809e": 6, "42685508e": 6, "64005580e": 6, "97994501e": 6, "93188830e": 6, "69581067e": 6, "34097308e": 6, "19789402e": 6, "78013891e": 6, "56214479e": 6, "72469426e": 6, "04183614e": 6, "24556425e": 6, "98242729e": 6, "85688593e": 6, "83522508e": 6, "69632764e": 6, "02313728e": 6, "14759387e": 6, "32493866e": 6, "simpl": [6, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 167, 175], "model_factor": 6, "ptf_bl_factor_test": 6, "ptf_factor_test": 6, "490": [6, 16, 164], "plot_14_black_litterman_factor_model": [6, 16, 164], "find": [7, 8, 9, 10, 18, 23, 26, 31, 33, 36, 40, 47, 96, 98, 99, 100, 102, 105, 107, 110, 115, 139, 156, 167, 171, 175, 176], "transform": [7, 8, 11, 12, 13, 38, 39, 40, 43, 45, 55, 57, 59, 60, 131, 132, 133, 134, 138, 163, 167], "linear": [7, 8, 12, 13, 26, 56, 113, 114, 115, 117, 118, 120, 121, 125, 130, 134, 138, 140, 175], "prepar": [7, 8, 43, 134, 138], "split": [7, 8, 12, 29, 49, 50, 51, 52, 53, 92, 93, 94, 95, 106, 107, 118, 122, 126, 168, 174, 175], "avoid": [7, 8, 32, 36, 93, 95, 114, 122, 126, 131, 174, 175], "leakag": [7, 8, 32, 36, 93, 122, 126, 163, 172, 174, 175], "inversevolatil": [7, 18, 19, 36, 175], "head": [7, 8, 43, 49, 50, 51, 52, 53, 168], "amd": [7, 8, 43, 52], "bac": [7, 8, 43, 52], "unh": [7, 8, 43, 52], "wmt": [7, 8, 29, 30, 32, 43, 52], "xom": [7, 8, 43, 52], "date": [7, 8, 43, 49, 50, 51, 53, 177], "007576": [7, 8], "030303": [7, 8], "008045": [7, 8], "019355": [7, 8], "000000": [7, 8], "010079": [7, 8], "003759": [7, 8], "015500": [7, 8], "021355": [7, 8], "009868": [7, 8], "005201": [7, 8], "009933": [7, 8], "05": [7, 8, 9, 10, 14, 15, 16, 18, 19, 23, 26, 29, 30, 31, 32, 36, 39, 40, 43, 50, 51, 52, 53, 114, 115, 120, 121, 125, 137, 163], "003745": [7, 8], "031996": [7, 8], "021821": [7, 8], "043189": [7, 8], "010732": [7, 8], "005267": [7, 8], "003731": [7, 8], "005633": [7, 8], "020833": [7, 8], "013630": [7, 8], "015381": [7, 8], "007435": [7, 8], "016527": [7, 8], "024823": [7, 8], "026619": [7, 8], "020114": [7, 8], "row": [7, 8, 134], "column": [7, 8, 11, 12, 13, 19, 95, 106, 113, 114, 115, 117, 118, 120, 121, 125, 130, 131, 132, 133, 137, 177], "pass": [7, 8, 13, 47, 91, 95, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 171], "omit": [7, 8, 108], "here": [7, 8, 29, 32, 106, 108, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 167, 171, 175], "ration": [7, 177], "invers": [7, 18, 19, 29, 30, 36, 106, 107, 108, 109, 117, 118, 119, 137, 144, 145, 146, 147, 156, 163, 175], "volatil": [7, 12, 14, 18, 19, 23, 36, 49, 110, 119, 120, 130, 163, 175], "benchmark": [7, 8, 14, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 40, 119, 120, 121, 122, 126, 175], "vol": [7, 18, 19, 163], "03306735": [7, 18, 19], "02548697": [7, 18, 19], "03551377": [7, 18, 19], "0296872": [7, 18, 19], "06358463": [7, 18, 19], "05434705": [7, 18, 19], "04742354": [7, 18, 19], "07049715": [7, 18, 19], "03882539": [7, 18, 19], "06697905": [7, 18, 19], "05570808": [7, 18, 19], "05576851": [7, 18, 19], "04723274": [7, 18, 19], "06351213": [7, 18, 19], "05581397": [7, 18, 19], "0676481": [7, 18, 19], "02564642": [7, 18, 19], "03970752": [7, 18, 19], "05744543": [7, 18, 19], "06610498": [7, 18, 19], "tool": [7, 8, 163, 171, 174, 177], "call": [7, 8, 14, 29, 30, 32, 48, 58, 95, 114, 121, 122, 134, 171, 176, 177], "asarrai": [7, 8, 14, 15, 91, 174, 177], "same": [7, 8, 11, 12, 13, 18, 31, 33, 36, 40, 47, 106, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 125, 126, 133, 137, 163, 166, 169, 170, 171, 175, 178, 179, 180], "00805152": 7, "01084089": 7, "00199173": 7, "00932275": 7, "00152747": 7, "01787286": 7, "class": [7, 8, 47, 48, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 171, 175, 176, 177, 180], "vast": [7, 8], "properti": [7, 8, 29, 30, 32, 93, 117, 118, 126, 128, 129, 130, 144, 145, 146, 147, 167, 171, 175], "summari": [7, 8, 9, 14, 15, 18, 19, 20, 23, 31, 33, 36, 39, 40, 93, 127, 128, 129, 130, 163, 167, 174, 176, 177], "annualized_sharpe_ratio": [7, 9, 10, 14, 15, 31, 33, 36, 39, 40, 64, 128, 129, 130, 163, 174, 175, 177, 178], "0399564198202886": 7, "0036976120249752": 7, "improv": [7, 8, 9, 18, 19, 20, 23, 31, 33, 36, 39, 40, 114, 141, 154, 176, 177], "everi": [7, 8, 11, 12, 13, 174, 175], "figur": [7, 8, 14, 15, 40, 47, 127, 128, 129, 130], "displai": [7, 8, 29, 30, 32, 36, 40, 47, 127, 128, 129, 130], "you": [7, 8, 9, 11, 12, 13, 15, 29, 58, 91, 94, 104, 106, 107, 108, 109, 114, 115, 120, 121, 125, 126, 137, 163, 167, 172, 175], "render": [7, 8], "http": [7, 8, 114, 115, 120, 121, 125, 163], "com": [7, 8, 163], "cumul": [7, 8, 12, 13, 18, 19, 20, 26, 31, 33, 36, 39, 40, 76, 77, 127, 128, 129, 130, 144, 145, 146, 147], "onli": [7, 8, 11, 12, 13, 14, 26, 29, 31, 33, 36, 39, 43, 47, 55, 56, 57, 58, 59, 60, 93, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 127, 131, 132, 133, 137, 138, 139, 167, 175, 177, 178], "document": [7, 8, 114, 115, 120, 121, 125], "sticker": [7, 8], "strategi": [7, 8, 18, 19, 20, 23, 95, 106, 122, 126], "evalu": [7, 8, 9, 14, 18, 19, 20, 23, 31, 33, 36, 40, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 171], "073": [7, 9, 14, 36], "064": [7, 8, 9, 18, 19, 20, 23], "18": [7, 9, 14, 15, 19, 23, 29, 33, 36, 40, 41, 164], "43": [7, 8, 9, 14, 15, 19, 23, 29, 36], "16": [7, 8, 9, 14, 15, 16, 18, 19, 20, 29, 31, 36, 40, 164], "06": [7, 8, 9, 13, 18, 19, 20, 23, 29, 49, 50, 163], "012": [7, 8, 9, 14, 18, 19, 20, 23, 29], "010": [7, 8, 9, 18, 19, 20], "14": [7, 8, 9, 14, 15, 16, 23, 29, 31, 40, 43], "56": [7, 9, 15, 18, 19, 29], "semi": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 83, 84, 105, 114, 121, 125, 128, 129, 130, 139, 163, 171, 175], "0063": [7, 9, 14, 15, 18, 20, 40], "0053": [7, 9, 14, 18, 19, 20], "standard": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 40, 49, 50, 51, 52, 53, 55, 57, 59, 60, 64, 65, 83, 85, 106, 121, 127, 128, 129, 130, 155, 156, 157, 168, 175], "deviat": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 40, 64, 65, 75, 81, 83, 85, 106, 114, 121, 125, 127, 128, 129, 130, 155, 156, 157, 163, 175], "17": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 40], "72": [7, 9, 10, 14, 15, 19, 29, 36, 40, 50, 51], "00": [7, 8, 9, 14, 15, 16, 18, 19, 20, 21, 23, 24, 27, 29, 34, 36, 40, 41, 44, 46, 164], "79": [7, 9, 14, 18, 19, 23, 36, 53], "73": [7, 9, 14, 15, 18, 19, 20, 40], "54": [7, 8, 9, 14, 18, 19, 23, 29, 40], "74": [7, 9, 14, 15, 50], "65": [7, 9, 14, 15, 18, 19, 29, 36, 40], "35": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 51], "evar": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 65, 113, 114, 117, 118, 121, 125, 128, 129, 130, 163, 175], "29": [7, 9, 14, 15, 18, 19, 23, 29, 40, 49], "worst": [7, 8, 9, 14, 15, 18, 19, 20, 23, 26, 29, 36, 40, 64, 65, 67, 68, 69, 88, 90, 114, 115, 121, 125, 128, 129, 130, 132, 163, 180], "49": [7, 8, 9, 15, 18, 19, 23, 29, 36, 40], "81": [7, 8, 9, 14, 15, 19, 29, 40], "drawdown": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 66, 67, 69, 70, 77, 79, 87, 114, 121, 125, 128, 129, 130, 163, 175, 177], "34": [7, 8, 9, 15, 18, 19, 20, 23, 29], "83": [7, 9, 15, 18, 19, 36], "averag": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 31, 33, 36, 39, 40, 48, 64, 65, 66, 102, 121, 125, 128, 129, 130, 131, 134, 163, 175], "edar": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 65, 113, 114, 117, 118, 121, 125, 128, 129, 130, 163, 175], "19": [7, 8, 9, 14, 15, 18, 20, 23, 29, 36], "53": [7, 8, 9, 14, 15, 36, 40, 49], "partial": [7, 8, 9, 11, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 73, 75, 83, 84, 94, 114, 121, 125, 128, 129, 130, 163, 175], "37": [7, 9, 14, 18, 20, 23, 29, 33, 34, 51, 164], "32": [7, 8, 9, 14, 15, 18, 19, 23, 29], "ulcer": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 87, 121, 125, 128, 129, 130, 163, 175], "048": [7, 9, 40, 50], "040": [7, 9, 14, 18, 19, 29], "gini": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 65, 78, 82, 121, 125, 128, 129, 130, 163, 175], "98": [7, 9, 18, 19, 36], "45": [7, 9, 14, 15, 18, 19, 23, 31, 36], "23": [7, 8, 9, 18, 20, 29, 108], "entrop": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 64, 65, 70, 71, 72, 114, 121, 125, 128, 129, 130, 163, 175], "measur": [7, 8, 9, 10, 14, 15, 18, 19, 20, 23, 29, 30, 31, 32, 33, 36, 39, 40, 56, 58, 91, 105, 114, 118, 121, 122, 123, 125, 126, 127, 128, 129, 130, 132, 133, 163, 171, 174, 175, 176, 177], "fourth": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 74, 75, 128, 129, 130, 163], "central": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 74, 86, 128, 129, 130, 163], "000029": [7, 9], "000022": [7, 9, 18, 19], "000011": [7, 9, 18, 19, 20], "skew": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 113, 117, 118, 128, 129, 130, 163, 167], "kurtosi": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 62, 113, 117, 118, 128, 129, 130, 163, 167], "89": [7, 9, 15, 29, 40, 51], "21": [7, 8, 9, 12, 14, 15, 18, 19, 29, 39, 40], "066": [7, 9], "063": [7, 9, 14, 18, 19, 29, 36], "sortino": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 64, 128, 129, 130, 171], "092": [7, 9, 23], "088": [7, 8, 9, 18, 19, 23], "47": [7, 9, 20, 29, 49], "099": [7, 9], "098": [7, 9, 18, 19, 20], "047": [7, 9, 14, 19], "044": [7, 8, 9, 15, 18, 19, 23], "029": [7, 9, 19, 23, 40], "027": [7, 8, 9, 14, 18, 19, 20, 23, 29, 43], "00024": [7, 9, 23], "00021": [7, 9, 18, 19], "014": [7, 9, 14, 23, 29, 40, 51], "0073": [7, 9, 18, 19, 20, 29, 40], "0061": [7, 8, 9, 18, 19], "0071": [7, 9, 14], "0052": [7, 9, 15, 18, 19, 20, 36], "calmar": [7, 8, 9, 14, 15, 18, 19, 20, 23, 29, 36, 40, 128, 129, 130], "0022": [7, 9, 15], "0018": [7, 9, 14, 15, 18, 19, 40], "024": [7, 8, 9, 14, 15, 29, 43], "0037": [7, 9, 14], "0032": [7, 9, 18, 19], "015": [7, 8, 9, 14, 15, 23, 29, 137], "016": [7, 9, 15, 18, 19, 20, 36, 40], "065": [7, 9, 18, 19, 20, 23], "underperform": [7, 8, 33, 137], "shortfal": [7, 8, 65, 68, 121, 128, 129, 130], "wa": [7, 8, 12, 33, 48, 56, 131, 132, 133], "toi": [7, 8, 33], "advanc": [7, 8, 11, 45, 93, 114, 115, 120, 121, 125], "concept": [7, 8, 70, 72, 128, 129, 130], "check": [7, 8, 47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 156, 158, 175], "other": [7, 8, 11, 15, 19, 29, 31, 62, 106, 107, 108, 109, 127, 128, 129, 130, 131, 134, 137, 171], "143": [7, 16, 164], "plot_1_maximum_sharpe_ratio": [7, 16, 164], "min": [8, 48, 121, 125, 175], "16562529e": 8, "41742527e": 8, "64888981e": 8, "47358386e": 8, "35927671e": 8, "91035768e": 8, "58350612e": 8, "10319630e": 8, "89793803e": 8, "14733606e": 8, "92817471e": 8, "13607836e": 8, "79844555e": 8, "26155697e": 8, "04585759e": 8, "52708811e": 8, "20106233e": 8, "41726679e": 8, "01024013e": 8, "18289085e": 8, "equal": [8, 12, 14, 18, 23, 26, 28, 29, 31, 32, 33, 34, 36, 45, 47, 104, 114, 115, 116, 117, 119, 120, 121, 122, 125, 127, 163, 164], "ha": [8, 12, 14, 18, 19, 23, 29, 30, 31, 32, 47, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 120, 121, 122, 125, 126, 131, 132, 133, 137, 138, 139, 154, 163, 171, 175], "impact": [8, 12, 13, 14, 30, 113, 114, 117, 118, 120, 121, 125, 130], "still": [8, 172], "00354605": 8, "00342423": 8, "00105085": 8, "01069377": 8, "00542224": 8, "01217676": 8, "021741551637176403": 8, "025061083134673378": 8, "052": [8, 9, 29, 36], "069": [8, 9, 15, 23], "07": [8, 9, 12, 15, 16, 23, 29, 41, 49, 50, 164], "0090": [8, 9], "26": [8, 9, 15, 36, 40], "94": [8, 9, 15, 23, 29, 36], "0046": [8, 9, 29], "0060": [8, 9, 23], "52": [8, 9, 15, 23, 49], "68": [8, 9, 36], "76": [8, 9, 20, 53], "61": [8, 9, 14, 15, 40], "71": [8, 9, 14, 15, 23, 29, 40], "51": [8, 9, 14, 15, 20, 23, 29, 39, 51], "62": [8, 9, 14, 29], "77": [8, 9, 14, 15, 23, 29, 51], "70": [8, 9, 23, 29, 36, 47, 50, 114, 115, 120, 121, 125], "67": [8, 9, 23, 53], "48": [8, 9, 14, 15, 19, 23, 29, 36, 49], "31": [8, 9, 14, 15, 31, 36, 39, 40, 50, 51], "050": [8, 9, 14, 36], "92": [8, 9, 15, 23, 29, 50], "000016": [8, 9], "000027": [8, 23], "000008": [8, 9], "000013": [8, 9, 14, 15, 23], "0013": [8, 11, 14, 15, 40, 114, 115, 120, 121, 125], "028": [8, 9, 23], "055": [8, 9, 14, 29], "87": [8, 9, 14, 29], "076": [8, 9, 29], "40": [8, 9, 14, 18, 20, 23, 29, 36, 39, 50, 177], "085": [8, 9, 29], "097": [8, 9, 20, 23, 40], "039": [8, 9, 29, 50, 137], "045": [8, 9, 15, 18, 20, 23, 40], "00017": [8, 9, 36], "00023": [8, 9, 14, 19, 20, 23], "011": [8, 9, 15, 20, 29, 36], "013": [8, 9, 14, 15, 19, 20, 23, 29, 36], "0064": [8, 9, 15, 23], "0072": [8, 9, 14, 23, 29], "0035": [8, 9], "0051": [8, 9, 23], "0015": [8, 9, 40, 177], "0020": [8, 9, 20, 23, 40], "017": [8, 9, 19], "026": [8, 9, 14, 20, 23, 29, 40], "0025": [8, 9, 177], "0033": [8, 9, 18, 20, 23, 29], "056": [8, 9, 29], "except": [8, 127, 128, 129, 130], "842": [8, 16, 164], "plot_2_minimum_cvar": [8, 16, 164], "ensembl": [9, 10, 36, 112, 126, 163, 175], "belong": [9, 10, 176], "pareto": [9, 127, 133], "font": 9, "perfmeasur": [9, 10, 14, 15, 43, 91, 122, 126, 128, 129, 130, 133, 176, 177], "ratiomeasur": [9, 10, 14, 15, 31, 33, 36, 39, 40, 122, 126, 128, 129, 130, 132, 163, 171, 174, 176, 177], "efficient_frontier_s": [9, 14, 15, 43, 121, 176], "entir": [9, 14, 106], "shape": [9, 10, 12, 13, 14, 15, 29, 30, 32, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 175, 176, 178, 180], "population_test": [9, 10, 14, 29, 30, 32], "add": [9, 11, 12, 13, 31, 33, 36, 39, 40, 113, 114, 115, 117, 118, 120, 121, 125], "concaten": 9, "set_portfolio_param": [9, 10, 127, 176], "plot_measur": [9, 10, 14, 15, 43, 127, 176], "annualized_vari": [9, 10, 18, 43, 65, 128, 129, 130, 176], "annualized_mean": [9, 10, 14, 15, 43, 63, 128, 129, 130, 176], "color_scal": [9, 10, 14, 15, 127], "hover_measur": [9, 10, 14, 15, 127], "max_drawdown": [9, 10, 14, 15, 65, 113, 114, 117, 118, 121, 125, 128, 129, 130, 176, 177], "annualized_sortino_ratio": [9, 10, 14, 15, 31, 64, 128, 129, 130], "91785162": 9, "93000375": 9, "9401232": 9, "95027284": 9, "96861483": 9, "98463685": 9, "9983657": 9, "00992555": 9, "01943433": 9, "02702131": 9, "032813": 9, "03704654": 9, "03993049": 9, "04204356": 9, "0430764": 9, "04289017": 9, "04158213": 9, "03774863": 9, "02943678": 9, "02092595": 9, "01241175": 9, "00356473": 9, "97964062": 9, "93749217": 9, "87986871": 9, "78090544": 9, "68550154": 9, "59858003": 9, "53398775": 9, "55455742": 9, "ptf0": 9, "ptf1": [9, 29, 30, 39, 177], "ptf2": [9, 30, 39, 177], "ptf3": [9, 177], "ptf4": 9, "ptf5": 9, "ptf6": 9, "ptf7": 9, "ptf8": 9, "ptf9": 9, "ptf10": 9, "ptf11": 9, "ptf12": 9, "ptf13": 9, "ptf14": 9, "ptf15": 9, "ptf16": 9, "ptf17": 9, "ptf18": 9, "ptf19": 9, "ptf20": 9, "ptf21": 9, "ptf22": 9, "ptf23": 9, "ptf24": 9, "ptf25": 9, "ptf26": 9, "ptf27": 9, "ptf28": 9, "ptf29": 9, "062": 9, "068": [9, 14, 19, 20, 36, 40, 43], "071": 9, "074": [9, 15, 29], "079": [9, 29], "082": 9, "091": 9, "094": 9, "096": [9, 23], "054": [9, 29, 40, 49], "057": [9, 18, 20, 29], "059": 9, "061": 9, "070": [9, 15, 36], "075": [9, 14, 15, 29], "077": [9, 29, 34, 36, 164], "078": 9, "080": [9, 50], "083": 9, "086": [9, 29], "087": [9, 29], "081": [9, 29], "090": [9, 15, 16, 164], "66": [9, 15, 18, 20, 23, 29, 40, 50, 51], "38": [9, 15, 29, 40, 51], "82": [9, 15, 23, 29, 36, 51], "99": [9, 15, 19, 29], "59": [9, 14, 15, 23, 34, 40], "24": [9, 14, 23, 29, 36, 40], "27": [9, 15, 29, 36], "42": [9, 14, 15, 29, 36], "86": [9, 14, 18, 20, 29, 33, 40], "36": [9, 14, 15, 18, 20, 29, 33, 51], "93": [9, 14, 29], "46": [9, 14, 15, 18, 20, 23, 29, 36, 39, 40, 49], "90": [9, 15, 29], "97": [9, 14, 15, 18, 20, 29, 36, 50], "41": [9, 14, 18, 20, 29, 51, 107], "018": 9, "019": [9, 14], "020": [9, 14], "022": [9, 15, 23, 29, 36], "023": [9, 14, 29, 40, 43], "025": [9, 15, 19, 29], "030": 9, "032": [9, 40, 43], "034": [9, 14, 40], "038": [9, 40], "053": [9, 29], "084": [9, 29], "0088": [9, 14], "0089": 9, "0092": 9, "0094": 9, "0096": [9, 36], "0099": [9, 15], "035": [9, 14, 15, 36], "043": [9, 20], "067": [9, 19, 40, 49], "44": [9, 29, 31, 40], "55": [9, 14, 15, 23], "84": [9, 14, 20, 29, 36], "63": [9, 15, 18, 20, 29], "50": [9, 11, 12, 14, 15, 19, 29, 31, 36, 40, 51, 113, 117, 118], "88": [9, 33, 36, 40, 107], "75": [9, 11, 14, 15, 23, 29, 36, 40], "85": [9, 14, 15, 40], "80": [9, 15, 19, 40], "0054": [9, 14, 18, 20, 36], "0055": [9, 15], "0056": [9, 19], "0058": [9, 20], "0062": [9, 23], "0065": 9, "0068": 9, "0076": [9, 14, 29], "0080": [9, 29], "0085": [9, 14], "021": [9, 15, 36, 43], "041": [9, 18, 20, 29, 43], "058": [9, 29], "0045": [9, 15, 29], "0047": [9, 29, 36], "0048": [9, 36, 40], "0049": [9, 23], "0074": [9, 29, 40], "0077": [9, 19, 29], "0082": 9, "0086": 9, "0091": 9, "69": [9, 14, 15, 20, 29, 36, 50, 53], "96": [9, 14, 50], "57": [9, 14, 19, 23], "91": [9, 15, 29, 40, 51], "64": [9, 14, 15, 29, 31, 36, 39, 40, 50], "132": 9, "106": 9, "060": 9, "046": [9, 29, 50], "049": [9, 36], "051": [9, 23, 36, 40], "072": [9, 23], "100": [9, 11, 14, 15, 31, 36, 39, 40, 50, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 113, 114, 115, 117, 118, 120, 121, 125, 139, 156, 176], "000017": 9, "000018": 9, "000019": 9, "000021": [9, 14, 19], "000024": 9, "000026": 9, "000028": [9, 23], "000031": 9, "000034": 9, "000037": [9, 29], "000041": [9, 29], "000045": 9, "000050": 9, "000055": 9, "000062": 9, "000070": 9, "000079": [9, 29], "000088": 9, "000097": 9, "00012": [9, 10], "00016": 9, "00027": [9, 29], "00047": 9, "00085": 9, "000020": [9, 14], "000023": [9, 18, 20], "000033": 9, "000035": 9, "000040": [9, 29], "000043": [9, 29], "000046": 9, "000054": 9, "000058": 9, "00014": 9, "00037": 9, "00077": 9, "000006": [9, 40], "000007": [9, 40], "000009": [9, 15, 23], "000010": [9, 19, 36], "000012": [9, 20], "000014": [9, 15, 36], "000038": 9, "000056": 9, "00031": 9, "0014": [9, 177], "000015": [9, 36], "000057": 9, "000098": 9, "00042": 9, "0011": [9, 40], "042": [9, 15, 50], "089": [9, 18, 20], "093": [9, 19], "095": 9, "031": [9, 15], "033": [9, 15, 40], "00022": [9, 18, 20], "00025": [9, 15], "00026": [9, 29], "00028": [9, 29], "00029": 9, "00030": 9, "00032": 9, "00033": 9, "00034": 9, "00035": 9, "00036": 9, "00038": 9, "00040": 9, "00041": 9, "00043": 9, "00044": 9, "00045": 9, "00046": 9, "00048": 9, "00018": 9, "00019": 9, "00020": 9, "0078": [9, 14, 29], "0084": 9, "0079": [9, 23], "0095": [9, 36], "0100": [9, 15], "0098": [9, 36], "0097": [9, 15], "0093": 9, "0066": [9, 40], "0067": [9, 19], "0069": [9, 15], "0070": [9, 29, 40], "0075": [9, 40], "0041": [9, 14, 40], "0044": [9, 14, 15], "0050": 9, "0026": [9, 36], "0059": [9, 15], "0039": [9, 23], "0028": [9, 14, 15], "0024": [9, 23, 29], "0021": [9, 14, 15, 19], "0034": [9, 15, 29, 40], "0031": [9, 36], "0030": [9, 177], "0027": [9, 14], "0040": [9, 15, 36, 40], "0043": 9, "0036": [9, 19], "0023": [9, 14, 29, 40], "0019": [9, 15, 18, 20, 36], "0017": [9, 14], "0016": [9, 15, 40], "0012": [9, 14, 15, 36], "0083": 9, "0081": [9, 36], "0029": [9, 15, 31], "0038": [9, 40], "0087": 9, "037": [9, 14, 20, 36, 40], "instead": [9, 10, 14, 30, 50, 51, 58, 94, 95, 106, 107, 108, 109, 117, 122, 126, 134, 137, 171, 174, 175], "bound": [9, 14, 70, 72, 113, 114, 115, 117, 118, 120, 121, 125, 128, 129, 130], "min_return": [9, 120, 121, 125], "under": [9, 10, 13, 14, 15, 105, 106, 107, 108, 109, 147, 163, 167, 172, 175], "252": [9, 12, 13, 14, 15, 31, 33, 36, 39, 40, 43, 128, 129, 130, 163, 167], "fit_predict": [9, 10, 33, 43, 47, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126], "plot_3_efficient_fronti": [9, 16, 164], "2015": [10, 33, 105], "1700238781664583": 10, "satisfi": 10, "correspond": [10, 47, 75, 95, 99, 106, 122, 126, 127, 128, 129, 130, 131, 132, 133, 174, 177], "want": [10, 12, 13, 175], "analyz": [10, 14, 15, 18, 19, 23, 29, 30, 31, 32, 36], "altern": [10, 168], "maxim": [10, 14, 15, 23, 31, 32, 33, 36, 40, 47, 120, 121, 123, 163, 175], "idea": 10, "feasibl": [10, 11], "09718550832245014": 10, "rang": [10, 40, 106, 107, 108, 109, 127, 171, 176], "max_cdar": [10, 121], "linspac": 10, "0972": 10, "stop": [10, 106, 127], "num": 10, "deform": 10, "variance_upp": 10, "max_measur": [10, 127], "map": [10, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 167], "ravel": 10, "meshgrid": 10, "maximize_return": [10, 14, 15, 121, 123], "max_vari": [10, 14, 121], "raise_on_failur": [10, 114, 115, 120, 121, 125], "z": [10, 127, 131, 176], "to_surfac": [10, 127], "true": [10, 14, 29, 30, 32, 40, 43, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 76, 77, 91, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 156, 158, 163, 167, 171, 176], "update_layout": [10, 14, 15, 40], "scene_camera": 10, "ey": 10, "measures_mean": [10, 14, 31, 33, 36, 39, 127], "measures_std": [10, 31, 33, 36, 39, 127], "345087054431556": 10, "10292071071001885": 10, "9038840095066056": 10, "06751700747046248": 10, "173": [10, 16, 164], "plot_4_mean_variance_cdar": [10, 16, 164], "max_weight": [11, 113, 114, 115, 117, 118, 120, 121, 125, 163], "min_budget": [11, 114, 115, 120, 121], "max_budget": [11, 114, 115, 120, 121], "max_short": [11, 114, 115, 120, 121], "max_long": [11, 114, 115, 120, 121], "linear_constraint": [11, 114, 115, 120, 121, 125, 163], "left_inequ": [11, 114, 115, 120, 121, 125], "right_inequ": [11, 114, 115, 120, 121, 125], "select": [11, 12, 13, 14, 15, 31, 39, 41, 106, 122, 126, 131, 132, 133, 144, 145, 164, 172, 175, 177], "readabl": [11, 12, 13], "fulli": [11, 114, 115, 120, 121, 178, 179], "invest": [11, 12, 42, 44, 45, 114, 115, 120, 121, 130, 138, 164, 167], "term": [11, 31, 33, 114, 115, 120, 121, 133, 139, 167], "sum": [11, 114, 115, 119, 120, 121, 124, 125, 134, 137, 161, 162, 167, 177], "22768876": 11, "56566507": 11, "20664617": 11, "none": [11, 12, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 73, 75, 81, 83, 84, 91, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 139, 140, 141, 144, 145, 146, 147, 149, 175], "float": [11, 12, 13, 14, 15, 40, 55, 56, 57, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 96, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 137, 138, 144, 145, 146, 147, 148, 156], "neutral": [11, 114, 115, 120, 121], "11391513": 11, "28246101": 11, "10362386": 11, "If": [11, 12, 13, 47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 76, 77, 91, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 156, 163, 167, 168], "must": [11, 12, 13, 91, 92, 93, 94, 104, 113, 114, 115, 117, 118, 120, 121, 122, 125, 127, 128, 129, 130, 131, 132, 133, 137, 138, 158, 167], "30000034617916516": 11, "06832987": 11, "16956647": 11, "06210401": 11, "control": [11, 26, 94, 95, 106, 120, 121, 137, 177], "respect": [11, 48, 106, 107, 108, 109], "like": [11, 12, 13, 26, 29, 47, 48, 54, 55, 56, 57, 58, 59, 60, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 130, 131, 132, 133, 137, 138, 139, 140, 144, 145, 146, 147, 163, 166, 167, 169, 170, 174, 175, 178, 179, 180], "dictionari": [11, 12, 13, 113, 114, 115, 117, 118, 120, 121, 125, 126, 130, 137, 171], "equival": [11, 14, 29, 113, 114, 115, 117, 118, 120, 121, 125, 171], "inf": [11, 106, 113, 114, 115, 117, 118, 120, 121, 125], "appli": [11, 12, 13, 55, 57, 59, 60, 113, 114, 115, 117, 118, 120, 121, 122, 125, 127, 130, 141, 154, 158, 167, 171], "its": [11, 12, 13, 14, 15, 40, 48, 58, 72, 106, 107, 108, 109, 113, 114, 115, 117, 118, 119, 120, 121, 125, 128, 129, 130, 131, 132, 133, 137, 148, 154, 155, 166, 167, 169, 170, 175, 177, 179, 180], "kei": [11, 12, 13, 106, 113, 114, 115, 117, 118, 120, 121, 125, 126, 127, 130, 137], "pair": [11, 12, 13, 95, 113, 114, 115, 117, 118, 120, 121, 125, 130, 131, 133, 137, 174], "datafram": [11, 12, 13, 49, 50, 51, 52, 53, 113, 114, 115, 117, 118, 120, 121, 125, 127, 128, 129, 130, 131, 132, 133, 134, 137, 166, 169, 170, 175, 177, 178, 179, 180], "sell": [11, 12, 113, 114, 115, 117, 118, 120, 121, 125], "when": [11, 12, 13, 14, 29, 30, 32, 40, 47, 55, 56, 57, 58, 59, 60, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 117, 118, 120, 121, 122, 125, 126, 131, 132, 133, 134, 137, 138, 139, 140, 141, 171, 174, 177], "don": 11, "t": [11, 12, 13, 15, 29, 48, 104, 106, 107, 108, 109, 113, 114, 117, 118, 120, 121, 123, 125, 134, 137, 144, 145, 146, 147, 148, 154, 167, 175, 177, 180], "assign": [11, 48, 93, 113, 114, 115, 117, 118, 120, 121, 125, 133], "specifi": [11, 14, 15, 19, 50, 51, 54, 58, 68, 95, 96, 97, 106, 107, 108, 109, 122, 126, 128, 129, 130, 135, 136, 137, 142, 143], "pre": [11, 39, 40, 133], "pipelin": [11, 38, 45, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 171, 178], "know": 11, "process": [11, 93, 95, 108, 133, 174], "where": [11, 29, 30, 48, 93, 95, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 117, 118, 120, 127, 131, 132, 133, 154, 167, 171, 174, 175, 177], "prove": [11, 26, 110, 115, 175], "abov": [11, 12, 13, 14, 15, 32, 47, 96, 98, 99, 100, 102, 105, 107, 113, 114, 115, 117, 118, 120, 121, 125, 131, 134, 156, 163, 167, 171], "200": [11, 114, 115, 120, 121, 125], "allow": [11, 36, 99, 106, 107, 108, 109, 113, 117, 118, 126, 171, 175], "0000000000000002": 11, "22770271": 11, "56559255": 11, "20670474": 11, "22788246": 11, "56548525": 11, "20663228": 11, "leverag": 11, "150": [11, 16, 26, 27, 164], "000000000000002": 11, "74197781": 11, "49999867": 11, "75802352": 11, "neg": [11, 113, 114, 115, 117, 118, 120, 121, 131, 133], "less": [11, 19, 31, 94, 114, 115, 120, 121, 125, 137, 141, 167], "22770146": 11, "56558315": 11, "20671539": 11, "refer": [11, 14, 47, 55, 56, 57, 59, 60, 93, 98, 99, 105, 107, 108, 110, 115, 117, 118, 122, 130, 133, 134, 137, 138, 144, 145, 146, 147, 154, 156, 159, 160, 163, 167, 175], "string": [11, 47, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139], "follow": [11, 19, 40, 48, 93, 114, 115, 120, 121, 125, 131, 132, 133, 137, 163, 165, 166, 167, 169, 170, 171, 174, 175, 178, 179, 180], "pattern": [11, 114, 115, 120, 121, 125, 137], "ref1": [11, 114, 115, 120, 121, 125], "ref2": [11, 114, 115, 120, 121, 125], "ref3": [11, 114, 115, 120, 121, 125], "industri": 11, "sector": 11, "capit": 11, "technologi": 11, "mega": 11, "cap": [11, 104], "big": 11, "mix": [11, 13, 113, 114, 115, 117, 118, 120, 121, 125], "would": [11, 13, 14, 36, 113, 114, 117, 118, 120, 121, 125, 131, 132, 133, 163, 167, 175, 177], "suffici": 11, "case": [11, 15, 26, 91, 95, 114, 115, 120, 121, 125, 141, 154, 167, 177, 180], "66666667e": 11, "17341817e": 11, "33333333e": 11, "vector": [11, 12, 13, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 110, 113, 114, 115, 117, 118, 120, 121, 125, 127, 128, 130, 131, 132, 133, 137, 146, 155, 157, 161, 162, 167, 174, 175, 177], "b": [11, 12, 105, 114, 115, 120, 121, 125, 133, 137, 175, 177], "cdot": [11, 12, 13, 104, 113, 114, 115, 117, 118, 120, 121, 125, 130, 177], "w": [11, 12, 13, 14, 15, 104, 113, 114, 115, 117, 118, 120, 121, 123, 125, 130, 146, 167, 175, 177], "leq": [11, 100, 101, 114, 115, 120, 121, 125, 144, 145, 146, 147, 148, 180], "358": [11, 16, 53, 164], "plot_5_weight_constraint": [11, 16, 164], "tc": 12, "fix": [12, 106, 137], "incur": 12, "bui": 12, "transaction_cost": [12, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 130, 163], "_cost": [12, 113, 114, 117, 118, 120, 121, 125, 130], "sum_": [12, 13, 14, 48, 113, 114, 117, 118, 120, 121, 125, 130, 154, 167], "c_": [12, 48, 113, 114, 117, 118, 120, 121, 125, 130, 154], "w_": [12, 13, 14, 113, 114, 117, 118, 120, 121, 125, 130, 154, 167, 177], "_prev_": [12, 113, 114, 117, 118, 120, 121, 125, 130], "previous_weight": [12, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 130], "_return": [12, 13, 113, 114, 117, 118, 120, 121, 125, 130, 175], "af": [12, 13, 113, 114, 117, 118, 120, 121, 125, 130], "n_asset": [12, 13, 39, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 176], "accord": [12, 40, 95, 122, 126, 127, 131, 132, 133, 174, 175], "formula": [12, 104, 107, 108, 110, 113, 114, 117, 118, 120, 121, 125], "express": [12, 13, 95, 113, 114, 115, 117, 118, 120, 121, 125, 130, 137], "notion": [12, 167], "durat": 12, "crucial": 12, "sinc": [12, 29, 93, 163, 174], "005": 12, "correl": [12, 18, 29, 30, 32, 38, 41, 45, 55, 56, 57, 59, 60, 93, 105, 117, 118, 131, 133, 155, 156, 157, 163, 164, 174], "month": [12, 14, 15, 31, 33, 36, 40], "should": [12, 33, 54, 96, 97, 106, 107, 108, 109, 134, 135, 136, 142, 143, 167, 171, 177], "howev": [12, 13, 14, 29, 33, 40, 96, 98, 99, 100, 102, 105, 107, 113, 114, 117, 118, 120, 121, 125, 167], "year": [12, 13, 14, 15, 26, 31, 33, 36, 40, 43, 163, 167], "busi": [12, 14, 15, 31, 33, 36, 40, 167], "dai": [12, 13, 14, 15, 31, 33, 36, 39, 40, 167], "so": [12, 13, 26, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 177], "order": [12, 13, 29, 47, 113, 114, 117, 118, 120, 121, 125, 127, 129, 131, 154], "account": [12, 18], "divid": [12, 64, 106, 107, 108, 109, 128, 129, 130], "walkforward": [12, 13, 14, 15, 31, 33, 36, 40, 163, 177], "cross_val_predict": [12, 13, 14, 15, 31, 33, 36, 39, 40, 126, 163, 174, 177], "util": [12, 13, 29, 36, 71, 106, 107, 108, 109, 115, 121, 123, 128, 129, 130, 163, 175, 176], "avers": [12, 13, 71, 72, 104, 115, 121, 128, 129, 130, 175], "maximize_util": [12, 13, 36, 121, 123], "17733231e": [12, 13], "78775169e": [12, 13], "82266765e": [12, 13], "002": [12, 177], "posit": [12, 36, 40, 96, 98, 99, 100, 102, 105, 107, 113, 114, 115, 117, 118, 120, 121, 125, 139, 156, 158], "model_tc": 12, "11868007e": 12, "40979832e": 12, "88131852e": 12, "induc": [12, 13], "toward": [12, 13, 110], "05865225e": 12, "37192080e": 12, "05865087e": 12, "model_tc2": 12, "ones": [12, 14, 15], "33333336": 12, "3333332": 12, "33333345": 12, "notic": [12, 13, 29, 30], "becom": [12, 122, 126, 177], "non": [12, 14, 18, 26, 33, 36, 40, 56, 76, 78, 95, 96, 98, 99, 100, 102, 105, 107, 114, 115, 120, 121, 127, 128, 129, 130, 133, 144, 145, 146, 147, 156, 161, 163, 174, 175], "neglig": [12, 177], "due": [12, 33, 40, 95, 96, 98, 99, 100, 102, 105, 107, 140, 156, 177], "rebalanc": [12, 167, 177], "28439988": 12, "04893332": 12, "rebal": [12, 13], "re": [12, 13, 106, 107, 108, 109, 172], "latest": [12, 13], "walk": [12, 13, 15, 94, 163], "forward": [12, 13, 15, 94, 163], "analysi": [12, 13, 15, 39, 40, 107, 110, 156, 176, 177], "holding_period": [12, 13], "fitting_period": [12, 13], "cv": [12, 13, 14, 15, 28, 31, 34, 36, 39, 40, 45, 93, 94, 95, 106, 122, 126, 163, 164, 171, 174, 175], "train_siz": [12, 13, 14, 15, 31, 33, 36, 40, 94, 163], "pred1": [12, 13], "retriev": [12, 114, 115, 120, 121, 125], "result": [12, 13, 95, 106, 107, 108, 109, 140, 167], "pred2": [12, 13], "new_portfolio": 12, "append": [12, 29, 30, 32, 127, 129, 176], "cannot": [12, 78, 128, 129, 130, 167], "function": [12, 14, 15, 26, 40, 71, 91, 95, 106, 114, 115, 120, 121, 123, 125, 127, 128, 129, 130, 144, 145, 146, 147, 163, 167, 171, 175, 176], "anymor": 12, "handl": [12, 26, 112, 115, 175], "depend": [12, 33, 56, 58, 71, 91, 105, 114, 115, 120, 121, 125, 128, 129, 130, 131, 144, 145, 163, 167], "fold": [12, 31, 33, 36, 39, 93, 94, 95, 106, 122, 126, 171, 174, 177], "pred3": 12, "visual": [12, 13], "success": [12, 13, 156], "exclud": [12, 93, 94], "unrealist": 12, "618": [12, 16, 164], "plot_6_transaction_cost": [12, 16, 164], "mf": 13, "management_fe": [13, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 130], "_fee": [13, 113, 114, 117, 118, 120, 121, 125, 130], "f_": [13, 113, 114, 117, 118, 120, 121, 125, 130], "anoth": [13, 14, 50, 51, 113, 114, 117, 118, 120, 121, 125, 130, 167, 171, 177, 179], "approach": [13, 14, 15, 113, 114, 117, 118, 120, 121, 125, 131, 137, 163, 171, 175, 179], "direcli": 13, "net": [13, 106, 113, 114, 117, 118, 120, 121, 125], "determinist": [13, 113, 114, 117, 118, 120, 121, 125], "amount": 13, "uncertain": [13, 113, 114, 117, 118, 120, 121, 125], "lead": [13, 113, 114, 117, 118, 120, 121, 122, 125, 126, 167, 171, 174], "unwant": [13, 113, 114, 117, 118, 120, 121, 125], "bia": [13, 110, 113, 114, 117, 118, 120, 121, 125, 130], "usual": [13, 99, 171], "per": [13, 14, 15, 36, 40, 122, 127, 140, 163], "annum": 13, "suppos": [13, 131], "trade": [13, 110, 163, 177], "model_mf": 13, "74787861e": 13, "43028265e": 13, "25212125e": 13, "29453703e": 13, "05150748e": 13, "29453598e": 13, "yearli": [13, 167], "dure": [13, 30, 47, 55, 56, 57, 58, 59, 60, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 120, 121, 122, 125, 126, 131, 132, 133, 137, 138, 139, 175], "133": [13, 16, 164], "plot_7_management_fe": [13, 16, 164], "tend": [14, 39, 105, 114, 120, 121, 163], "increas": [14, 26, 39, 40, 114, 115, 120, 121, 125, 171], "out": [14, 15, 31, 32, 33, 36, 39, 40, 55, 57, 59, 60, 106, 114, 118, 120, 121, 122, 126, 127, 163, 175], "sampl": [14, 15, 26, 31, 32, 33, 36, 39, 40, 55, 57, 59, 60, 93, 94, 95, 106, 107, 108, 109, 110, 114, 115, 118, 120, 121, 122, 126, 131, 132, 133, 144, 145, 147, 154, 163, 171, 175], "stabil": [14, 31, 114, 115, 120, 121, 125, 154], "l1_coef": [14, 36, 114, 120, 121, 171], "penal": [14, 106, 114, 120, 121], "norm": [14, 106, 107, 108, 109, 114, 120, 121], "_coef": [14, 114, 120, 121], "vert": [14, 114, 120, 121], "vert_": [14, 114, 120, 121], "l2_coef": [14, 114, 120, 121, 163, 171], "coeffici": [14, 107, 108, 109, 114, 120, 121], "zero": [14, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 114, 120, 121, 128, 129, 130, 131, 132, 133, 144, 145, 146, 147, 156, 161, 177], "cardin": [14, 48, 114, 120, 121, 154], "diversif": [14, 24, 36, 114, 120, 121, 130, 163, 164], "reduct": 14, "doe": [14, 106, 107, 168, 171], "necessarili": 14, "equat": 14, "larg": [14, 96, 98, 99, 100, 102, 105, 107, 108, 133, 156, 163, 177], "exacerb": 14, "overfit": [14, 15, 122, 126, 163, 172], "cross": [14, 32, 40, 92, 93, 94, 95, 106, 122, 126, 171, 175], "valid": [14, 32, 40, 92, 93, 94, 95, 106, 122, 126, 171, 172, 175], "gridsearchcv": [14, 15, 31, 33, 36, 40, 91, 163, 171], "ftse": [14, 15, 31, 36, 39, 40, 50], "2000": [14, 15, 31, 36, 39, 40, 50, 115], "2023": [14, 15, 31, 36, 39, 40, 50, 51, 105, 163], "graph_object": [14, 15], "scipi": [14, 15, 47, 48, 163, 171], "stat": [14, 15, 163, 171, 176], "loguniform": [14, 163, 171], "randomizedsearchcv": [14, 15, 163, 171], "load_ftse100_dataset": [14, 15, 31, 36, 39, 40, 168], "metric": [14, 15, 29, 30, 31, 32, 36, 40, 58, 115], "make_scor": [14, 15, 31, 36, 40, 171], "constrain": [14, 15, 175], "model_l1": 14, "001": [14, 26, 36, 130, 171, 177], "model_l2": 14, "annualized_standard_devi": [14, 65, 128, 129, 130], "ran": 14, "along": 14, "therefor": [14, 133, 156, 167], "avg": [14, 15, 36, 40], "len": 14, "ptf": [14, 31, 33, 36, 130], "nonzero_asset": [14, 130], "filter": [14, 127], "clearli": 14, "down": [14, 29, 30, 32, 117, 118, 175], "made": 14, "section": [14, 15, 47, 48], "consid": [14, 15, 31, 130, 133, 146, 171], "roll": [14, 15, 31, 33, 36, 39, 40, 128, 129, 130], "preced": [14, 15, 31], "highest": [14, 15, 23, 31, 131, 132, 163, 171], "score": [14, 15, 31, 36, 40, 91, 106, 107, 108, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 171], "ref_model": 14, "grid_search": [14, 15, 36, 40, 171], "param_grid": [14, 15, 31, 33, 36, 40, 163, 171], "best_model": [14, 15, 163, 171], "best_estimator_": [14, 15, 31, 33, 36, 40, 163, 171], "00035714285714285714": 14, "among": [14, 15, 114, 121, 122, 125, 126, 175], "3x3": 14, "grid": [14, 15, 106], "These": [14, 15, 167, 179], "continu": [14, 15, 36, 134, 167, 171], "better": [14, 15, 29, 30, 31, 32, 114, 115, 117, 118, 120, 121, 125, 128, 129, 130, 175], "advantag": [14, 15, 171], "random": [14, 15, 58, 93, 94, 98, 131, 144, 145, 146, 161, 162, 175, 176], "log": [14, 106, 107, 108, 109, 125, 167, 171, 175], "uniform": [14, 15, 26, 115, 161, 162, 171, 175], "version": [14, 47, 91, 106, 107, 108, 109, 131, 132, 133, 171, 172], "space": [14, 26, 115, 130, 175], "1e": [14, 96, 98, 99, 100, 102, 105, 106, 107, 114, 115, 120, 121, 125, 156, 163], "mirror": [14, 171], "search": [14, 15, 33, 106], "uniformli": [14, 15, 171], "randomized_search": [14, 15, 163], "param_distribut": [14, 15, 163, 171], "n_iter": [14, 15, 171], "return_train_scor": [14, 40], "best_model_rd": 14, "024253745458962733": 14, "cv_result": [14, 15, 40], "cv_results_": [14, 15, 40, 106, 171], "param_l2_coef": 14, "astyp": [14, 15], "sort_idx": [14, 15], "argsort": [14, 15], "y_train_mean": 14, "mean_train_scor": [14, 40], "y_train_std": 14, "std_train_scor": [14, 40], "y_test_mean": [14, 15], "mean_test_scor": [14, 15, 40, 106], "y_test_std": 14, "std_test_scor": [14, 40, 106], "scatter": [14, 15, 40, 127], "mode": [14, 15, 40, 106], "line": [14, 15, 29, 30, 32, 40, 47], "color": [14, 15, 29, 30, 32, 40, 47, 127], "rgb": [14, 15, 40], "119": [14, 40, 50], "180": [14, 40], "width": [14, 40], "showlegend": [14, 40], "fillcolor": [14, 40], "rgba": [14, 40], "fill": [14, 40], "tonexti": [14, 40], "255": [14, 15, 40], "165": [14, 15, 40], "add_vlin": [14, 15, 40], "best_params_": [14, 15, 40], "line_width": [14, 15, 40], "line_dash": [14, 15, 40], "dash": [14, 15, 40], "line_color": [14, 15, 40], "green": [14, 15, 40], "titl": [14, 15, 40, 127, 163], "xaxis_titl": [14, 15, 40], "coef": 14, "yaxis_titl": [14, 15, 40], "update_yax": [14, 15, 40], "tickformat": [14, 15, 40], "around": [14, 106], "six": 14, "That": [14, 114], "clear": [14, 127, 128, 129, 130], "indict": 14, "three": [14, 15, 31, 33, 36, 40, 105, 110, 131, 168], "pred_no_reg": 14, "pred_reg": 14, "un": 14, "perform": [14, 15, 31, 33, 36, 38, 41, 45, 47, 63, 93, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 134, 140, 141, 154, 158, 163, 164, 167, 171, 172, 174, 177, 178], "poorli": [14, 15], "Its": [14, 15, 122], "significantli": [14, 156], "upper": [14, 15, 70, 72, 113, 114, 115, 117, 118, 120, 121, 125, 128, 129, 130], "lowest": [14, 15, 131, 132], "00084": 14, "00013": 14, "00087": 14, "00081": 14, "00071": 14, "00094": 14, "00079": [14, 15], "nb": [14, 15, 36, 40], "multi": [14, 15, 93, 105, 127, 129, 133, 176], "period": [14, 15, 113, 114, 117, 118, 120, 121, 125, 127, 129, 130, 134, 167], "772": [14, 16, 164], "plot_8_regular": [14, 16, 164], "ellipsoid": [15, 114, 121, 144, 145, 146, 147, 148, 175, 180], "known": [15, 48, 58, 163, 175], "fall": [15, 175], "umbrella": 15, "instabl": [15, 39, 114, 121, 175, 180], "aris": [15, 114, 121, 175, 180], "hat": [15, 110, 114, 121, 144, 145, 146, 147, 148, 180], "kappa_": [15, 114, 121], "lvert": [15, 114, 121], "s_": [15, 114, 121, 134, 167], "frac": [15, 48, 58, 114, 121, 123, 130, 134, 146, 147, 154, 167, 175], "rvert_": [15, 114, 121], "kappa": [15, 114, 121, 144, 145, 146, 147, 148, 180], "confid": [15, 67, 68, 69, 70, 71, 72, 88, 114, 115, 121, 125, 128, 129, 130, 137, 144, 145, 146, 147, 148], "region": [15, 114, 121, 144, 145, 146, 147, 148], "empiricalmuuncertaintyset": [15, 180], "bootstrapmuuncertaintyset": [15, 163, 175, 180], "uncertainty_set": [15, 163, 175, 180], "loss": [15, 88, 91, 128, 129, 130], "over": [15, 23, 26, 106, 115, 120, 128, 129, 130, 134, 161, 162, 167, 171, 175], "max_cvar": [15, 121], "model_uncertainti": 15, "mu_uncertainty_set_estim": [15, 114, 121, 163, 175, 180], "confidence_level": [15, 144, 145, 146, 147, 175, 180], "cvar_beta": [15, 114, 115, 121, 125, 128, 129, 130], "level": [15, 54, 67, 68, 69, 70, 71, 72, 88, 95, 96, 97, 114, 115, 121, 122, 125, 126, 127, 128, 129, 130, 135, 136, 142, 143, 144, 145, 146, 147], "embed": 15, "doubl": 15, "mu_uncertainty_set_estimator__confidence_level": 15, "model_no_uncertainti": 15, "2x3x3": 15, "loc": [15, 29], "scale": [15, 106, 107, 108, 109, 114, 115, 120, 121, 125, 127, 128, 129, 130, 133, 167], "best_model_r": 15, "param_mu_uncertainty_set_estimator__confidence_level": 15, "3f": 15, "update_xax": 15, "pred_no_uncertainti": 15, "pred_uncertainti": 15, "pred_uncertainty_r": 15, "006": 15, "107": 15, "00010": [15, 137], "000084": 15, "00080": 15, "00075": 15, "00068": 15, "00064": 15, "00074": 15, "00095": 15, "426": [15, 16, 164], "plot_9_uncertainty_set": [15, 16, 164], "execut": [16, 21, 24, 27, 34, 37, 41, 44, 46, 95, 164], "file": [16, 21, 24, 27, 34, 37, 41, 44, 46, 164], "auto_exampl": [16, 21, 24, 27, 34, 37, 41, 44, 46], "1_mean_risk": [16, 164], "mem": [16, 21, 24, 27, 34, 37, 41, 44, 46, 164], "mb": [16, 21, 24, 27, 34, 37, 41, 44, 46, 164], "concern": [17, 22, 25, 28, 35, 45, 172], "riskbudget": [17, 18, 19, 20, 32, 33, 45, 163, 175], "pariti": [17, 21, 28, 30, 32, 34, 45, 117, 118, 125, 164], "0413538": [18, 20], "03210798": [18, 20], "03372651": [18, 20], "03785032": [18, 20], "06105326": [18, 20], "04432829": [18, 20], "04252121": [18, 20], "06593503": [18, 20], "03451835": [18, 20], "06469404": [18, 20], "0541895": [18, 20], "05209546": [18, 20], "04535287": [18, 20], "06568125": [18, 20], "05103901": [18, 20], "06894629": [18, 20], "04046571": [18, 20], "04667685": [18, 20], "05627134": [18, 20], "06119293": [18, 20], "ptf_model_train": [18, 19, 23], "plot_contribut": [18, 19, 29, 30, 130, 177], "And": [18, 19, 30, 110, 125, 175], "taken": 18, "ptf_bench_train": [18, 19, 23], "ptf_model_test": [18, 19, 20, 23], "ptf_bench_test": [18, 19, 20, 23, 26], "393": [18, 21, 43, 164], "plot_1_risk_parity_vari": [18, 21, 164], "chose": 19, "remain": [19, 29, 30, 32, 47, 48, 131, 132, 133, 175], "risk_budget": [19, 125], "asset_nam": 19, "06173109": 19, "0325744": 19, "03336025": 19, "03994727": 19, "06348992": 19, "00930168": 19, "04579238": 19, "06880723": 19, "00765283": 19, "06700223": 19, "05537244": 19, "05430778": 19, "04828169": 19, "07033671": 19, "05371219": 19, "06892884": 19, "04230966": 19, "04897376": 19, "06251597": 19, "06560167": 19, "possibl": [19, 20, 23, 47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 171, 175, 179], "744": [19, 21, 164], "plot_2_risk_busgeting_cvar": [19, 21, 164], "shrunkcovari": [20, 166], "04774369": 20, "04370262": 20, "04503192": 20, "04647661": 20, "05284765": 20, "04907272": 20, "04852997": 20, "05374008": 20, "04539423": 20, "05360779": 20, "05178561": 20, "05137849": 20, "04927095": 20, "05375844": 20, "05112862": 20, "0541766": 20, "04755055": 20, "04988132": 20, "05199178": 20, "05293035": 20, "basic": 20, "000025": 20, "153": [20, 21, 164], "plot_3_risk_parity_ledoit_wolf": [20, 21, 164], "290": 21, "2_risk_budget": [21, 164], "budget": [21, 114, 115, 120, 121, 125, 163, 164, 171], "maximumdiversif": [22, 23, 36, 45, 175], "33456624e": 23, "74138185e": 23, "93952573e": 23, "57560762e": 23, "11892006e": 23, "98154300e": 23, "50727312e": 23, "41147667e": 23, "90340137e": 23, "11478008e": 23, "82592031e": 23, "02737024e": 23, "79050966e": 23, "95048460e": 23, "48699105e": 23, "10847215e": 23, "08086158e": 23, "45171911e": 23, "51323607e": 23, "35632022e": 23, "445": [23, 24, 164], "plot_1_maximum_divesif": [23, 24, 164], "3_maxiumum_diversif": [24, 164], "distributionallyrobustcvar": [25, 26, 45, 175], "construct": [26, 105, 115, 171, 175], "wasserstein": [26, 115, 175], "ball": [26, 115, 175], "multivari": [26, 107, 115, 167, 175], "discret": [26, 115, 171, 175], "probabl": [26, 115, 175], "center": [26, 49, 50, 51, 52, 53, 106, 107, 108, 109, 115, 168, 175], "within": [26, 30, 115, 117, 126, 154, 171, 175], "mohajerin": 26, "esfahani": [26, 115, 175], "kuhn": [26, 115, 175], "2018": [26, 51, 93, 115, 117], "piecewis": [26, 115, 175], "rockafellar": [26, 115], "uryasev": [26, 115], "reformul": [26, 115, 175], "finit": [26, 115, 130, 175], "convex": [26, 62, 107, 108, 109, 114, 115, 125, 130, 163, 175, 177], "program": [26, 115, 144, 145, 146, 147, 175], "advis": [26, 172], "solver": [26, 106, 114, 115, 120, 121, 125, 175], "high": [26, 40, 91, 96, 98, 99, 100, 102, 105, 107, 110, 115, 122, 126, 133, 137, 163, 175], "mosek": [26, 115, 167, 175], "open": [26, 163], "clarabel": [26, 114, 115, 120, 121, 125], "converg": [26, 106, 114, 141], "speed": 26, "radiu": [26, 115], "wasserstein_ball_radiu": [26, 115, 175], "bring": 26, "closer": 26, "2020": [26, 30, 98, 99, 117, 118, 122, 175, 180], "four": 26, "model1": [26, 29, 30, 32, 36, 39, 175], "model2": [26, 29, 30, 32, 36, 39, 175], "model3": [26, 29, 30, 32, 36], "model4": [26, 29, 32, 36], "0001": [26, 106, 163, 171], "84531907e": 26, "01910610e": 26, "81629430e": 26, "56967308e": 26, "67249461e": 26, "07087663e": 26, "97503410e": 26, "42882219e": 26, "84348572e": 26, "53379955e": 26, "85983398e": 26, "38460704e": 26, "62545194e": 26, "42768380e": 26, "90123331e": 26, "06982611e": 26, "16112642e": 26, "18803064e": 26, "36241349e": 26, "34914228e": 26, "ptf_model1_test": 26, "ptf_model2_test": 26, "ptf_model3_test": 26, "ptf_model4_test": 26, "plot_1_distributionally_robust_cvar": [26, 27, 164], "4_distributioally_robust_cvar": [27, 164], "distribution": [27, 115, 163, 164], "base": [28, 29, 36, 40, 45, 47, 54, 61, 92, 93, 96, 97, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 133, 135, 136, 142, 143, 146, 147, 154, 160, 163], "contribut": [28, 34, 36, 45, 47, 117, 125, 130, 133, 163, 164, 177], "hrp": [28, 29, 30, 32, 34, 45, 122, 164, 175], "v": [28, 34, 45, 48, 134, 138, 154, 164, 167], "herc": [28, 30, 34, 45, 164, 175], "nest": [28, 34, 45, 47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 164, 171], "combinatori": [28, 34, 45, 92, 93, 95, 164, 175], "purg": [28, 34, 45, 93, 164], "hierarchicalriskpar": [29, 31, 165, 175], "develop": [29, 30, 32, 117, 118, 122, 154, 163, 172, 175], "marco": [29, 32, 93, 118, 122, 175], "lopez": [29, 32, 118, 122, 175], "de": [29, 32, 55, 57, 59, 60, 93, 98, 99, 118, 122, 175], "prado": [29, 32, 55, 57, 59, 60, 93, 98, 99, 118, 122, 175], "algorithm": [29, 30, 32, 47, 48, 96, 98, 99, 100, 102, 105, 107, 108, 117, 118, 122, 131, 133, 139, 144, 145, 156, 175], "cluster": [29, 30, 31, 33, 34, 99, 113, 117, 118, 122, 126, 154, 164], "tree": [29, 30, 32, 117, 118, 122, 175], "emploi": [29, 31, 118, 175], "seriat": [29, 118, 175], "rearrang": [29, 118, 175], "leaf": [29, 118, 175], "step": [29, 30, 40, 117, 118, 131, 137, 167, 175], "recurs": [29, 30, 117, 118, 175], "bisect": [29, 30, 117, 118, 175], "sub": [29, 36, 106, 107, 108, 109, 118, 126, 127, 175], "topmost": [29, 118, 175], "travers": [29, 118, 175], "top": [29, 30, 40, 117, 118, 163, 172, 175], "manner": [29, 118, 171, 175], "origin": [29, 32, 47, 106, 107, 108, 109, 118, 122, 175], "paper": [29, 32, 105, 118, 122, 175], "multipl": [29, 31, 33, 36, 39, 93, 95, 114, 118, 122, 126, 174, 175, 177], "ward": [29, 30, 31, 32, 33, 47, 48, 117, 118, 175], "stabl": [29, 30, 31, 32, 106, 117, 118, 127, 172, 175], "hierarchicalclust": [29, 30, 31, 32, 33, 113, 117, 118, 122, 165], "linkagemethod": [29, 30, 31, 32, 33, 47], "kendalldist": [29, 30, 31, 32, 33, 169, 175], "pearson": [29, 30, 32, 59, 163], "05033705": 29, "02773558": 29, "05289115": 29, "03632272": 29, "059202": 29, "02483767": 29, "03790179": 29, "07464383": 29, "03497807": 29, "08622477": 29, "06308422": 29, "04094166": 29, "03144452": 29, "08277551": 29, "04421773": 29, "04807705": 29, "02596219": 29, "07596741": 29, "0393462": 29, "06310889": 29, "blue": [29, 30, 32, 47], "distinct": [29, 30, 32, 47], "hierarchical_clustering_estimator_": [29, 30, 113, 117, 118], "plot_dendrogram": [29, 30, 32, 47], "heatmap": [29, 30, 32, 47], "horizont": [29, 30, 32], "axi": [29, 30, 32, 127, 128, 129, 130], "link": [29, 30, 32], "upsid": [29, 30, 32, 73, 75, 81, 83, 84, 114, 121, 125, 128, 129, 130], "u": [29, 30, 32, 48, 114, 115, 120, 121, 125, 137, 154, 163], "height": [29, 30, 32], "indic": [29, 30, 32, 93, 94, 95, 106, 128, 129, 130, 131, 132, 133], "hd": [29, 30, 32, 43], "cophenet": [29, 30, 32, 47], "reorder": [29, 30, 32, 47], "outlin": [29, 30, 32, 47], "yellow": [29, 30, 32, 47], "greatli": [29, 30, 32], "affect": [29, 30, 32, 99, 107, 108], "choic": [29, 30, 32, 106, 110, 167, 171], "span": 29, "suffer": [29, 30, 32], "chain": [29, 30, 32], "effect": [29, 30, 32, 105, 106, 107, 108, 109, 131], "doesn": [29, 108], "regardless": 29, "chosen": [29, 31, 33, 36, 40, 55, 122, 126, 171, 175], "hierarchical_clustering_estim": [29, 30, 31, 113, 117, 118], "linkage_method": [29, 30, 31, 32, 47], "been": [29, 30, 105, 126, 131, 132, 133, 154, 163], "bellow": 29, "reason": [29, 134], "earlier": 29, "third": [29, 30, 32, 86], "kendal": [29, 30, 32, 57, 60, 105, 163, 175], "distance_estim": [29, 30, 31, 32, 33, 47, 113, 117, 118, 122, 165, 175], "new": [29, 32, 47, 48, 106, 107, 108, 109, 127, 131, 132, 133, 176, 178, 179], "close": [29, 49, 50, 51, 52, 53, 106, 146, 167, 168], "statist": [29, 47, 105, 117, 154, 167], "dtype": [29, 31, 33, 36, 39, 47, 106], "000078": 29, "000073": 29, "000074": 29, "000090": 29, "000039": 29, "plot_1_hrp_cvar": [29, 34, 164], "hierarchicalequalriskcontribut": [30, 31, 36, 165, 175], "thoma": [30, 117, 175], "raffinot": [30, 117, 175], "divis": [30, 117, 175], "naiv": [30, 117, 131, 163], "exploit": [30, 33, 117, 175], "05814153": 30, "04927288": 30, "09420898": 30, "05726203": 30, "02409012": 30, "08083036": 30, "08070112": 30, "02983878": 30, "06656721": 30, "02730592": 30, "01757816": 30, "01140416": 30, "0933616": 30, "04726087": 30, "02170548": 30, "02428936": 30, "00827991": 30, "02575021": 30, "14895433": 30, "03319698": 30, "reli": 30, "oppos": [30, 138], "greater": [30, 75, 99, 106, 114, 115, 120, 121, 125, 128, 129, 130], "veri": [30, 106, 126, 167, 171, 175], "concentr": [30, 163], "alreadi": [30, 126, 168], "conclud": 30, "appropri": [30, 49, 50, 51, 52, 53, 131, 132, 133, 168], "confirm": 30, "highli": [30, 38, 41, 45, 131, 163, 164, 167], "149": [30, 34, 164], "plot_2_herc_cdar": [30, 34, 164], "combinatorialpurgedcv": [31, 33, 36, 39, 95, 122, 126, 163, 174, 175], "distanc": [31, 33, 47, 48, 106, 107, 108, 109, 113, 117, 118, 122, 150, 154, 163, 165, 175], "pearsondist": [31, 33, 113, 117, 118, 122, 165, 169, 175], "model_hrp": 31, "model_herc": 31, "simul": [31, 33, 36, 40], "grid_search_hrp": [31, 33], "hierarchical_clustering_estimator__linkage_method": 31, "complet": [31, 48], "grid_search_herc": 31, "pred_hrp": 31, "pred_herc": 31, "display_sub_ptf_nam": [31, 33, 36, 40, 127], "4f": [31, 33], "0141": 31, "0159": 31, "path": [31, 33, 36, 39, 92, 93, 95, 122, 126, 174, 175], "histor": [31, 33, 36, 39, 67, 68, 88, 100, 103, 128, 129, 130], "combin": [31, 33, 36, 39, 93, 107, 108, 109, 126, 137, 171, 174], "n_fold": [31, 33, 36, 39, 93, 94, 163], "n_test_fold": [31, 33, 36, 39, 93, 163], "choos": [31, 33, 36, 39, 114, 115, 120, 121, 125], "obtain": [31, 33, 36, 39, 70, 72, 128, 129, 130, 138, 141], "approxim": [31, 33, 36, 39, 108, 163, 167], "observ": [31, 33, 36, 39, 47, 49, 50, 51, 52, 53, 67, 68, 69, 82, 88, 93, 94, 100, 101, 102, 103, 105, 106, 107, 108, 109, 127, 128, 129, 130, 134, 137, 174, 177], "1967": [31, 39], "embargo": [31, 33, 36, 39, 93, 174], "245": 31, "105": 31, "120": 31, "int64": [31, 33, 36, 39, 47], "plot_distribut": [31, 33, 36, 39, 127, 163, 176], "measure_list": [31, 33, 36, 39, 127, 163, 176], "tag_list": [31, 36, 39, 127], "n_bin": [31, 36, 39, 58, 127, 159, 160], "pred": [31, 36, 40, 91, 171, 174], "std": [31, 33, 36, 39, 155, 157], "0149": 31, "0005": 31, "0157": 31, "word": 31, "slightli": [31, 33, 40, 96, 98, 99, 100, 102, 105, 107], "do": [31, 171], "122": [31, 34, 164], "plot_3_hrp_vs_herc": [31, 34, 164], "nestedclustersoptim": [32, 33, 163, 165, 175], "nco": [32, 34, 122, 164, 175], "hierarch": [32, 34, 36, 47, 113, 117, 118, 122, 163, 164, 165], "kmean": [32, 122, 175], "etc": [32, 122, 163, 166, 167, 169, 170, 175, 177, 178, 179, 180], "inner": [32, 122, 126, 175], "whole": [32, 122, 175], "outer": [32, 36, 122, 126, 134, 175], "intra": [32, 122], "inter": [32, 122], "kfold": [32, 93, 95, 106, 122, 126, 163, 171, 174, 175], "form": [32, 47, 48, 54, 55, 56, 57, 58, 59, 60, 78, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 165], "inner_estim": [32, 33, 122, 163, 175], "outer_estim": [32, 33, 122, 163, 175], "34583417e": 32, "11063384e": 32, "22116860e": 32, "55247336e": 32, "75792540e": 32, "00648530e": 32, "72965814e": 32, "25072628e": 32, "62233910e": 32, "16513980e": 32, "74283462e": 32, "48338528e": 32, "63900807e": 32, "19327658e": 32, "00331177e": 32, "79312466e": 32, "30720714e": 32, "98356116e": 32, "48490337e": 32, "34908730e": 32, "clustering_estimator_": [32, 122], "clustering_estim": [32, 33, 122, 175], "replac": [32, 40, 96, 98, 99, 100, 102, 105, 107, 114, 115, 120, 121, 125, 154], "ani": [32, 47, 113, 114, 115, 117, 118, 120, 121, 125, 126, 127, 163, 166, 169, 170, 171, 175, 177, 178, 179, 180], "n_init": [32, 175], "auto": [32, 175], "85295956e": 32, "75784715e": 32, "06438428e": 32, "91932886e": 32, "89411108e": 32, "23532012e": 32, "07187130e": 32, "04587635e": 32, "02888273e": 32, "25406738e": 32, "29360006e": 32, "07664457e": 32, "65923122e": 32, "84995284e": 32, "02006068e": 32, "26831633e": 32, "41565380e": 32, "04187717e": 32, "86115630e": 32, "30810340e": 32, "964": [32, 34, 164], "plot_4_nco": [32, 34, 164], "hyperparamet": 33, "gridsearch": 33, "model_nco": 33, "inner_estimator__risk_measur": 33, "clustering_estimator__linkage_method": 33, "pred_nco": 33, "ann": 33, "0235": 33, "0376": 33, "1006": 33, "223": 33, "0507476631082548": 33, "recombin": [33, 36, 93], "present": [33, 47, 54, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 131, 132, 133, 137, 138], "determin": [33, 95, 106, 110, 122, 126, 129, 154, 167], "chanc": 33, "inform": [33, 47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 175], "lost": 33, "822": [33, 34, 164], "plot_5_nco_grid_search": [33, 34, 164], "134": 34, "5_cluster": [34, 164], "stack": [35, 37, 45, 126, 163, 164], "stackingoptim": [36, 175], "output": [36, 95, 122, 126, 131, 132, 133, 174, 175, 176], "individu": [36, 126, 133, 140, 144, 145, 175], "strength": [36, 126, 175], "estimators_": [36, 126], "final_estimator_": [36, 126], "empiricalcovari": [36, 40, 98, 99, 104, 110, 138, 166], "ledoitwolf": [36, 166], "model_stack": 36, "final_estim": [36, 126, 175], "stake": 36, "demonstr": [36, 40, 167, 175], "work": [36, 40, 47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "model2__prior_estimator__covariance_estim": 36, "model3__l1_coef": 36, "model4__risk_measur": 36, "gini_mean_differ": [36, 65, 128, 129, 130], "calmar_ratio": [36, 64, 128, 129, 130, 163], "pred_stack": 36, "cdar_ratio": [36, 64, 128, 129, 130, 175], "5f": 36, "00263": 36, "00122": 36, "00305": 36, "00125": 36, "0057": 36, "2980": 36, "298": 36, "171": 36, "190": 36, "independ": [36, 56, 167, 171], "model_nam": 36, "extend": [36, 43, 105, 127, 174, 176], "965": [36, 37, 51, 164], "plot_1_stack": [36, 37, 164], "6_ensembl": [37, 164], "drop": [38, 41, 45, 126, 131, 134, 163, 164], "best": [38, 41, 45, 106, 132, 163, 164, 171], "dropcorrel": [39, 178], "remov": [39, 93, 99, 126, 127, 131, 132, 133, 174], "befor": [39, 40, 45, 93, 94, 106, 107, 108, 109, 127, 133, 177], "set_config": [39, 40, 106, 107, 108, 109, 163, 178], "pre_select": [39, 40, 163, 171, 178], "11477958e": 39, "92866673e": 39, "99620661e": 39, "10752495e": 39, "16248113e": 39, "14940375e": 39, "84053635e": 39, "22729906e": 39, "38469617e": 39, "65046123e": 39, "67810934e": 39, "03431023e": 39, "79558938e": 39, "85394928e": 39, "75757760e": 39, "92149669e": 39, "30675668e": 39, "89240131e": 39, "31550592e": 39, "74499181e": 39, "13808863e": 39, "84365114e": 39, "89248471e": 39, "30767706e": 39, "08797657e": 39, "02335296e": 39, "81108516e": 39, "40097067e": 39, "18843086e": 39, "64841618e": 39, "09425878e": 39, "84470288e": 39, "12558991e": 39, "82822281e": 39, "41661311e": 39, "27306716e": 39, "20495386e": 39, "09690756e": 39, "38515810e": 39, "68742795e": 39, "12489362e": 39, "53601183e": 39, "48139841e": 39, "63365545e": 39, "94502152e": 39, "11970704e": 39, "84876780e": 39, "74340049e": 39, "79623520e": 39, "74507544e": 39, "80823151e": 39, "28133405e": 39, "98247368e": 39, "54382763e": 39, "96891040e": 39, "72770463e": 39, "20563054e": 39, "42845847e": 39, "36085745e": 39, "52171782e": 39, "12141020e": 39, "00959883e": 39, "80653860e": 39, "14316461e": 39, "pipeplin": [39, 40], "transform_output": [39, 40, 163, 178], "panda": [39, 40, 127, 128, 129, 130, 131, 132, 133, 163, 166, 169, 170, 175, 177, 178, 179, 180], "threshold": [39, 47, 56, 96, 98, 99, 100, 102, 105, 107, 131, 133, 134, 156, 178], "named_step": 39, "17183301e": 39, "99627408e": 39, "75907600e": 39, "59687833e": 39, "82564384e": 39, "92880653e": 39, "52217700e": 39, "13239659e": 39, "76926114e": 39, "62035863e": 39, "94836568e": 39, "20549958e": 39, "08919173e": 39, "64696218e": 39, "58312606e": 39, "20210608e": 39, "25426519e": 39, "83697624e": 39, "84916828e": 39, "91846109e": 39, "96049980e": 39, "05201907e": 39, "54482537e": 39, "99284245e": 39, "91471166e": 39, "98391244e": 39, "23117943e": 39, "98558904e": 39, "40973224e": 39, "60306246e": 39, "91741539e": 39, "73658093e": 39, "65079997e": 39, "67279164e": 39, "53270264e": 39, "56311233e": 39, "32678922e": 39, "48213167e": 39, "17212380e": 39, "51475217e": 39, "12051211e": 39, "42766417e": 39, "17359260e": 39, "77319466e": 39, "40287802e": 39, "07120393e": 39, "800": 39, "786": 39, "126": 39, "210": 39, "pred_1": 39, "annualized_factor": [39, 128, 129, 130], "pred_2": 39, "sharpe_ratio": [39, 64, 122, 126, 128, 129, 130, 132, 163, 174, 175, 176, 177], "276": [39, 41, 164], "plot_1_drop_correl": [39, 41, 164], "selectkextrem": [40, 163, 171, 178], "k": [40, 93, 95, 106, 132, 134, 144, 146, 148, 153, 154, 167, 171, 174, 180], "given": [40, 69, 71, 88, 106, 107, 108, 109, 122, 126, 127, 128, 129, 130, 132, 137, 147, 155, 167, 171], "assembl": 40, "graph_obj": 40, "nearest": [40, 48, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 139, 156], "theori": [40, 58, 96, 98, 99, 100, 102, 105, 107, 159, 163], "definit": [40, 96, 98, 99, 100, 102, 105, 107, 139, 156, 158], "psd": [40, 96, 98, 99, 100, 102, 105, 107], "point": [40, 48, 96, 98, 99, 100, 102, 105, 106, 107, 127, 156], "inaccuraci": [40, 96, 98, 99, 100, 102, 105, 107], "just": 40, "often": [40, 93, 96, 98, 99, 100, 102, 105, 107, 174], "occur": [40, 96, 98, 99, 100, 102, 105, 107], "scorer": [40, 91], "custom": [40, 91, 114, 115, 120, 121, 125, 167, 171], "wai": [40, 120, 121, 171], "lambda": [40, 121, 123, 167, 175], "pre_selection__k": 40, "vertic": 40, "param_pre_selection__k": 40, "decreas": [40, 171], "000005": 40, "000096": 40, "00097": 40, "0042": 40, "617": [40, 41, 164], "plot_2_select_best_perform": [40, 41, 164], "892": 41, "7_pre_select": [41, 164], "horizon": [42, 44, 45, 138, 164, 167], "explor": [43, 106, 171, 175, 176], "procedur": [43, 167], "simplifi": [43, 167], "data": [43, 47, 49, 50, 51, 52, 53, 93, 94, 95, 100, 101, 102, 103, 105, 106, 107, 108, 109, 115, 122, 126, 131, 132, 133, 134, 138, 139, 160, 163, 168, 171, 172, 174, 175, 177, 179], "bby": [43, 163, 179], "cvx": [43, 114, 163, 179], "jnj": 43, "ko": [43, 163, 179], "lly": 43, "mrk": 43, "msft": [43, 163, 179], "pep": 43, "pfe": 43, "pg": 43, "rrc": [43, 163], "264": 43, "125": 43, "599": 43, "144": 43, "991": [43, 49], "391": 43, "117": 43, "438": 43, "394": 43, "235": 43, "658": 43, "215": 43, "384": 43, "738": 43, "860": 43, "322": 43, "310": [43, 51], "653": 43, "266": 43, "000": [43, 46], "636": 43, "161": 43, "910": 43, "364": 43, "121": [43, 50], "452": [43, 50], "508": 43, "203": 43, "282": 43, "386": [43, 50], "692": 43, "853": 43, "304": 43, "267": 43, "938": 43, "537": 43, "159": 43, "847": 43, "283": [43, 50], "128": 43, "459": 43, "522": 43, "192": 43, "621": [43, 51], "397": 43, "646": 43, "777": 43, "301": 43, "634": 43, "987": 43, "268": 43, "812": 43, "775": 43, "148": 43, "113": 43, "423": 43, "536": 43, "174": 43, "549": 43, "387": 43, "581": [43, 50], "709": 43, "288": 43, "595": 43, "966": 43, "269": 43, "463": 43, "147": 43, "820": 43, "229": [43, 50], "102": 43, "481": 43, "220": [43, 50], "181": 43, "664": 43, "644": 43, "investment_horizon": [43, 138, 167], "3m": 43, "1y": 43, "10y": 43, "is_log_norm": [43, 138, 167], "diverg": 43, "longer": [43, 128, 129, 130], "930": [43, 44, 164], "plot_1_investment_horizon": [43, 44, 164], "8_data_prepar": [44, 164], "recommend": [45, 167, 171], "move": [45, 177], "auto_examples_python": 45, "zip": 45, "auto_examples_jupyt": 45, "max_clust": 47, "int": [47, 55, 56, 57, 58, 59, 60, 82, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 120, 121, 122, 125, 126, 127, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 144, 145, 154, 156, 159, 160, 161, 162], "coher": [47, 70, 72, 128, 129, 130, 163, 177], "r": [47, 130, 167, 177], "flat": 47, "gap": [47, 106, 117, 154], "calcul": [47, 48, 106], "linkag": [47, 48, 113, 117, 118, 122, 154, 175], "hierarchi": [47, 48, 117, 118], "descript": [47, 48, 121, 125], "attribut": [47, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 166, 169, 170, 175, 179, 180], "n_clusters_": 47, "labels_": [47, 122], "ndarrai": [47, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 130, 131, 132, 133, 137, 138, 139, 140, 141, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "label": [47, 93, 95, 174], "linkage_matrix_": [47, 165], "condensed_distance_": 47, "binom": 47, "d": [47, 48, 58, 105, 147, 154], "condens": 47, "n_features_in_": [47, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 120, 121, 122, 125, 126, 131, 132, 133, 137, 138, 139], "seen": [47, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 120, 121, 122, 125, 126, 131, 132, 133, 137, 138, 139, 167], "feature_names_in_": [47, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 117, 118, 120, 121, 122, 125, 126, 131, 132, 133, 137, 138, 139], "applic": [47, 49, 50, 51, 52, 53, 99, 117, 154, 168, 171], "yue": [47, 117, 154], "wang": [47, 117, 154], "wei": [47, 117, 154], "2009": [47, 117, 144, 145, 146, 147, 154], "ignor": [47, 54, 55, 56, 57, 58, 59, 60, 94, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 137, 138], "Not": [47, 54, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 137, 138], "convent": [47, 54, 55, 56, 57, 58, 59, 60, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 137, 138], "self": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 175], "kwarg": [47, 54, 91, 96, 97, 127, 135, 136, 142, 143], "n_sampl": [47, 93, 106, 107, 108, 109, 131, 132, 133], "n_featur": [47, 93, 106, 107, 108, 109, 131, 132, 133], "argument": [47, 48, 54, 91, 96, 97, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 135, 136, 142, 143, 171], "get_metadata_rout": [47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "metadata": [47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "rout": [47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "mechan": [47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "metadatarequest": [47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "encapsul": [47, 54, 55, 56, 57, 58, 59, 60, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "get_param": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 171], "deep": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 171], "bool": [47, 50, 51, 54, 55, 56, 57, 58, 59, 60, 76, 77, 91, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 156, 158], "subobject": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "param": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "dendrogram": [47, 117, 118, 175], "exist": [47, 94, 106, 107, 108, 109, 114, 115, 120, 121, 125, 168], "otherwis": [47, 76, 77, 91, 94, 96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 110, 114, 115, 120, 121, 125, 127, 128, 129, 130, 132, 156, 158], "well": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 163, 174, 175], "latter": [47, 54, 55, 56, 57, 58, 59, 60, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147], "__": [47, 54, 55, 56, 57, 58, 59, 60, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 171], "instanc": [47, 54, 55, 56, 57, 58, 59, 60, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 131, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 171], "str": [48, 50, 51, 62, 63, 64, 65, 95, 106, 107, 108, 109, 111, 113, 114, 115, 117, 118, 120, 121, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 137, 149, 176], "dist": [48, 106, 107, 108, 109], "j": [48, 56, 93, 121, 167, 175], "farthest": 48, "voor": 48, "hee": 48, "ij": 48, "upgma": 48, "forest": 48, "wpgma": 48, "centroid": 48, "c_t": 48, "_2": 48, "upgmc": 48, "median": [48, 122, 126], "math": 48, "wpgmc": 48, "entri": [48, 163], "newli": 48, "join": [48, 134], "unus": 48, "increment": 48, "quanliti": 49, "usmv": [49, 175, 179], "low": [49, 91, 133, 137], "come": [49, 50, 51, 52, 53, 106, 168], "yahoo": [49, 50, 51, 52, 53, 168], "public": [49, 50, 51, 52, 53, 163, 168], "adjust": [49, 50, 51, 52, 53, 130, 168], "after": [49, 50, 51, 52, 53, 93, 94, 122, 168, 171], "dividend": [49, 50, 51, 52, 53, 168], "multipli": [49, 50, 51, 52, 53, 108, 168], "adher": [49, 50, 51, 52, 53, 168], "research": [49, 50, 51, 52, 53, 105, 144, 145, 146, 147, 168], "crsp": [49, 50, 51, 52, 53, 168], "2264": 49, "df": [49, 50, 51, 52, 53], "n_observ": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 130, 131, 132, 133, 137, 138, 139, 140, 141, 144, 145, 146, 147, 159, 160], "704": 49, "351": 49, "986": 49, "338": 49, "792": 49, "256": 49, "722": 49, "330": 49, "999": 49, "677": 49, "263": 49, "112": 49, "455": 49, "731": 49, "430": [49, 51], "253": 49, "502": 49, "437": 49, "422": 49, "data_hom": [50, 51], "download_if_miss": [50, 51], "nan": 50, "5960": 50, "cach": [50, 51, 114, 168, 177], "folder": [50, 51, 168], "store": [50, 51, 106, 107, 108, 109, 166, 169, 170, 175, 179, 180], "skfolio_data": [50, 51, 168], "subfold": [50, 51], "rais": [50, 51, 106, 107, 108, 109, 114, 115, 120, 121, 125, 127, 128, 129, 130, 150, 151, 152], "oserror": [50, 51], "local": [50, 51, 168], "avail": [50, 51, 106, 107, 108, 109, 114, 115, 120, 121, 125, 166, 168, 169, 170, 173, 175, 177, 178, 180], "try": [50, 51], "site": [50, 51], "aal": [50, 51], "l": 50, "abf": 50, "aht": 50, "anto": 50, "vod": 50, "weir": 50, "wpp": 50, "wtb": 50, "535": 50, "354": 50, "205": 50, "926": 50, "590": 50, "313": 50, "562": 50, "115": 50, "240": 50, "512": 50, "249": 50, "382": 50, "907": 50, "540": 50, "209": 50, "729": 50, "118": 50, "483": 50, "462": 50, "381": 50, "972": 50, "553": 50, "289": 50, "950": 50, "124": 50, "458": 50, "337": 50, "572": 50, "829": 50, "222": 50, "716": 50, "725": 50, "475": 50, "405": 50, "578": 50, "852": 50, "224": 50, "548": 50, "711": 50, "685": 50, "285": 50, "476": 50, "498": 50, "254": 50, "392": 50, "885": 50, "1455": 51, "nasdaq": 51, "1362": 51, "aaoi": 51, "aaon": 51, "zvra": 51, "zyme": 51, "zyne": 51, "zyxi": 51, "648": 51, "933": 51, "995": 51, "922": 51, "247": 51, "303": 51, "460": 51, "913": 51, "336": 51, "103": 51, "495": 51, "700": 51, "869": 51, "316": 51, "681": 51, "967": 51, "400": 51, "780": 51, "809": 51, "811": 51, "550": 51, "825": 51, "8313": [52, 53], "332589": 52, "1250": 52, "65625": 52, "382813": 52, "890625": 52, "5000": 52, "334821": 52, "0000": 52, "75000": 52, "375000": 52, "3750": 52, "335938": 52, "9375": 52, "50000": 52, "371094": 52, "859375": 52, "2500": 52, "337054": 52, "8125": 52, "25000": 52, "355469": 52, "796875": 52, "1875": 52, "339286": 52, "31250": 52, "347656": 52, "875000": 52, "sp500": 53, "359": 53, "355": 53, "352": 53, "353": 53, "codependence_": [54, 55, 56, 57, 58, 59, 60, 169], "codepend": [54, 55, 56, 57, 58, 59, 60, 113, 117, 118, 122, 169, 175], "distance_": [54, 55, 56, 57, 58, 59, 60, 165, 169], "__init__": [54, 96, 97, 135, 136, 142, 143, 175], "explicit": [54, 96, 97, 106, 135, 136, 142, 143], "keyword": [54, 96, 97, 126, 135, 136, 142, 143, 171], "arg": [54, 96, 97, 135, 136, 142, 143], "abstract": [54, 92, 128], "power": [55, 57, 59, 60], "some": [55, 57, 59, 60, 99, 106, 107, 108, 109, 125, 141, 176], "wide": [55, 57, 59, 60, 171], "angular": [55, 57, 59, 60], "corr": [55, 57, 59, 60, 131, 155, 157], "basecovari": [55, 98, 99, 104, 110, 138, 175], "expon": [55, 57, 59, 60, 171], "covariance_estimator_": [55, 98, 99, 104, 110, 138], "diversifi": [55, 57, 59, 60, 118, 122], "l\u00f2pez": [55, 57, 59, 60, 98, 99], "journal": [55, 57, 59, 60, 105, 107, 117, 118, 122, 137, 144, 145, 146, 147, 156], "2016": [55, 57, 59, 60, 118, 122], "szeke": 56, "captur": 56, "g\u00e1bor": 56, "2005": [56, 110], "n_bins_method": 58, "nbinsmethod": 58, "freedman": [58, 149, 159], "normal": [58, 78, 102, 128, 129, 130, 167], "mutual": [58, 175], "relat": [58, 99, 177], "variat": [58, 163, 171], "h": [58, 105, 130], "margin": 58, "entropi": [58, 70, 72, 128, 129, 130], "joint": [58, 167], "bin": [58, 127, 149, 159, 160], "conting": 58, "knuth": [58, 149, 160], "featur": [58, 93, 100, 106, 107, 108, 109, 131, 132, 133, 137, 138, 139, 163, 174], "spearman": [60, 163], "enum": 61, "enumer": [62, 63, 64, 65, 93, 94, 123, 149], "value_at_risk": [62, 113, 117, 118, 128, 129, 130], "var": [62, 68, 72, 88, 128, 129, 130], "drawdown_at_risk": [62, 113, 117, 118, 128, 129, 130], "entropic_risk_measur": [62, 113, 117, 118, 128, 129, 130], "fourth_central_mo": [62, 113, 117, 118, 128, 129, 130], "fourth_lower_partial_mo": [62, 113, 117, 118, 128, 129, 130], "excess": [64, 128, 129, 130], "sortino_ratio": [64, 128, 129, 130, 163, 171, 176, 177], "mean_absolute_deviation_ratio": [64, 128, 129, 130], "first_lower_partial_moment_ratio": [64, 128, 129, 130], "value_at_risk_ratio": [64, 128, 129, 130], "entropic_risk_measure_ratio": [64, 128, 129, 130], "evar_ratio": [64, 128, 129, 130], "worst_realization_ratio": [64, 128, 129, 130], "drawdown_at_risk_ratio": [64, 128, 129, 130], "average_drawdown_ratio": [64, 128, 129, 130], "edar_ratio": [64, 128, 129, 130], "ulcer_index_ratio": [64, 128, 129, 130], "gini_mean_difference_ratio": [64, 113, 114, 117, 118, 121, 125, 128, 129, 130], "semi_vari": [65, 113, 114, 117, 118, 121, 125, 128, 129, 130, 163, 171, 175], "downsid": [65, 73, 75, 81, 83, 84, 114, 121, 125, 128, 129, 130, 175], "annualized_semi_vari": [65, 128, 129, 130], "standard_devi": [65, 114, 121, 125, 128, 129, 130], "semi_devi": [65, 114, 121, 125, 128, 129, 130, 175], "annualized_semi_devi": [65, 128, 129, 130], "mean_absolute_devi": [65, 113, 114, 117, 118, 121, 125, 128, 129, 130], "worst_real": [65, 113, 114, 117, 118, 121, 125, 128, 129, 130], "average_drawdown": [65, 113, 114, 117, 118, 121, 125, 128, 129, 130], "first_lower_partial_mo": [65, 113, 114, 117, 118, 121, 125, 128, 129, 130], "ulcer_index": [65, 113, 114, 117, 118, 121, 125, 128, 129, 130], "tail": [68, 75, 128, 129, 130, 163], "dar": [69, 70, 128, 129, 130], "chernoff": [70, 72, 128, 129, 130], "inequ": [70, 72, 114, 115, 120, 121, 125, 128, 129, 130], "theta": 71, "theat": 71, "exponenti": [71, 100, 101, 128, 129, 130, 163], "associ": [72, 98, 106, 107, 108, 109], "min_acceptable_return": [73, 75, 81, 83, 84, 114, 121, 125, 128, 129, 130], "accept": [73, 75, 81, 83, 84, 114, 121, 125, 127, 128, 129, 130], "distinguish": [73, 75, 81, 83, 84, 114, 121, 125, 128, 129, 130], "heavi": [75, 128, 129, 130], "extrem": [75, 105, 128, 129, 130, 163], "fat": [75, 128, 129, 130], "compound": [76, 77, 127, 128, 129, 130, 134, 138, 167, 176], "rescal": [76, 106, 107, 108, 109, 119, 127, 128, 129, 130], "1000": [76, 107, 127, 128, 129, 130, 144, 145], "uncompound": [76, 77], "seri": [77, 93, 94, 105, 128, 129, 130, 174], "gmd": [78, 82, 128, 129, 130], "realis": 78, "superior": [78, 128, 129, 130], "necessari": [78, 128, 129, 130, 131], "degre": [78, 128, 129, 130, 137, 144, 145, 146, 147], "stochast": [78, 128, 129, 130], "domin": [78, 127, 128, 129, 130, 133, 163, 177], "mad": [81, 128, 129, 130], "owa": 82, "score_func": 91, "greater_is_bett": 91, "modifi": [91, 127], "enhanc": [91, 98, 105, 174, 177], "factori": 91, "wrap": 91, "cross_val_scor": 91, "callabl": [91, 114, 115, 120, 121, 125], "signatur": [91, 171], "good": [91, 133], "sign": 91, "flip": 91, "outcom": 91, "rationmeasur": 91, "extrariskmeasur": [91, 113, 117, 118, 122, 126, 128, 129, 130], "addit": [91, 95, 121, 125, 126, 127, 131, 132, 133, 163, 165, 167, 174, 177], "scalar": 91, "implement": [92, 105, 108, 130, 131, 167, 171, 174, 175, 177], "get_path_id": [92, 93], "id": [92, 93, 128, 129, 130], "purged_s": [93, 94], "embargo_s": 93, "being": [93, 108, 171], "whose": [93, 106, 107, 108, 109, 131, 132, 133, 174], "overlap": [93, 174], "those": [93, 174], "immedi": [93, 95, 174], "exhibit": [93, 174], "serial": [93, 174], "arma": [93, 174], "least": [93, 128, 129, 130], "model_valid": 93, "index_train_test_": 93, "n_split": [93, 163], "machin": [93, 98, 99, 118, 122, 163], "l\u00f3pez": [93, 118, 122], "randn": [93, 94], "train_index": [93, 94], "test_index": [93, 94], "binary_train_test_set": 93, "identifi": 93, "n_test_path": 93, "reconstruct": 93, "plot_train_test_fold": 93, "locat": [93, 106, 107, 108, 109], "plot_train_test_index": 93, "recombined_path": 93, "group": [93, 94, 95, 114, 115, 120, 121, 125, 128, 129, 130, 137, 163, 175], "yield": [93, 94, 106, 122, 126, 167], "test_set_index": 93, "expend_train": 94, "reduce_test": 94, "logic": [94, 171], "thu": 94, "inappropri": 94, "timeseriessplit": 94, "suitabl": 94, "subsequ": 94, "past": 94, "last": [94, 100, 101, 102, 103, 105, 127, 129], "get_n_split": 94, "iter": [94, 95, 96, 98, 99, 100, 102, 105, 106, 107, 122, 126, 127, 139, 156, 171], "n_target": [94, 95, 119, 120, 121, 122, 126], "alwai": [94, 156, 171], "verbos": [95, 106, 114, 115, 120, 121, 122, 125, 126], "fit_param": [95, 131, 132, 133], "pre_dispatch": 95, "column_indic": 95, "collect": [95, 122, 126, 174, 175], "baseoptim": [95, 122, 126], "conjunct": 95, "g": [95, 106, 107, 108, 109, 126, 163], "groupkfold": 95, "stratifi": 95, "splitter": [95, 106], "job": [95, 106, 122, 126, 140], "unless": [95, 106, 122, 126, 140], "joblib": [95, 106, 122, 126, 140], "parallel_backend": [95, 106, 122, 126, 140], "context": [95, 106, 122, 126, 140], "processor": [95, 106, 122, 126, 140], "invok": 95, "dispatch": 95, "explos": 95, "memori": [95, 107], "consumpt": 95, "cpu": 95, "spawn": 95, "lightweight": 95, "fast": [95, 127, 140], "delai": 95, "demand": 95, "exact": 95, "higham": [96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 139, 156], "higham_max_iter": [96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 156], "left": [96, 98, 99, 100, 102, 105, 106, 107, 114, 115, 120, 121, 125, 144, 145, 146, 147, 148, 156, 163, 167, 177, 180], "unchang": [96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 131, 132, 133, 156], "fail": [96, 98, 99, 100, 102, 105, 106, 107, 114, 115, 120, 121, 125, 156], "cov_nearest": [96, 98, 99, 100, 102, 105, 107, 139], "nick": [96, 98, 99, 100, 102, 105, 107, 139, 156], "2002": [96, 98, 99, 100, 102, 105, 107, 139, 156], "eigenvalu": [96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 156], "clip": [96, 98, 99, 100, 102, 105, 107, 139, 156], "slow": [96, 98, 99, 100, 102, 105, 107, 156], "covariance_": [96, 98, 99, 100, 102, 105, 106, 107, 108, 109, 166], "goal": 98, "signal": [98, 108], "ill": [98, 167], "tradit": 98, "differenti": 98, "eigenvector": [98, 99], "classifi": 98, "mar\u010denko": 98, "pastur": 98, "constant": [98, 110], "element": [98, 99, 114, 115, 118, 120, 121, 122, 125, 126, 127, 131, 132, 133, 144, 145, 146, 147, 167], "quantit": [98, 99, 118, 122, 163], "financ": [98, 99, 118, 122, 156], "n_market": 99, "deton": 99, "matric": [99, 105, 107], "loud": 99, "tone": 99, "portion": 99, "subset": 99, "window_s": [100, 101, 102, 103, 105], "alpha": [100, 101, 106, 110, 163, 171], "window": [100, 101, 102, 103, 105, 128, 129, 130], "smooth": [100, 101], "ewm": 101, "mu_": [101, 103, 104, 110, 167, 170], "ddof": [102, 175], "unbias": [102, 110, 130], "risk_avers": [104, 115, 121, 175], "equilibrium": [104, 137, 163, 175], "_avers": 104, "sigma": [104, 144, 146, 147, 148, 167, 180], "psd_variant": 105, "co": 105, "movement": 105, "fluctuat": 105, "certain": [105, 175], "simultan": 105, "limit": [105, 125, 175], "tau": [105, 137], "count": [105, 127], "proport": [105, 137], "amplitud": 105, "exce": 105, "variant": 105, "publish": 105, "et": 105, "al": 105, "produc": [105, 161, 162], "2019": [105, 110, 118, 122, 130], "alter": 105, "denomin": [105, 108, 133], "ensur": [105, 125, 134, 174, 175], "javid": 105, "markowitz": [105, 163], "sargen": 105, "starer": 105, "modern": [105, 163], "social": 105, "scienc": 105, "network": [105, 117, 118], "pujara": 105, "deconstruct": 105, "flint": 105, "polakow": 105, "n_refin": 106, "tol": 106, "enet_tol": 106, "max_it": 106, "cd": 106, "assume_cent": [106, 107, 108, 109], "spars": 106, "penalti": 106, "read": [106, 107, 108, 109], "n_alpha": 106, "integ": [106, 122, 126, 131, 132, 133], "docstr": 106, "refin": 106, "toler": 106, "declar": 106, "dual": 106, "goe": [106, 175], "elast": 106, "descent": 106, "direct": [106, 163], "accuraci": [106, 114, 115, 120, 121, 125], "overal": 106, "lar": 106, "lasso": [106, 163], "coordin": 106, "underli": [106, 177], "graph": [106, 127], "elsewher": 106, "prefer": [106, 115, 175], "numer": [106, 108, 114, 115, 120, 121, 125, 156, 163], "dualiti": 106, "almost": [106, 107, 108, 109], "exactli": [106, 107, 108, 109], "location_": [106, 107, 108, 109], "precision_": [106, 107, 108, 109], "pseudo": [106, 107, 108, 109, 144, 145], "store_precis": [106, 107, 108, 109], "alpha_": [106, 110], "_test_scor": 106, "likelihood": [106, 107, 108, 109], "th": 106, "n_iter_": 106, "done": [106, 171], "One": [106, 122, 174], "challeng": 106, "face": [106, 163], "miss": [106, 134], "optimum": 106, "onc": [106, 127], "found": 106, "again": [106, 126], "error_norm": [106, 107, 108, 109], "comp_cov": [106, 107, 108, 109], "frobeniu": [106, 107, 108, 109], "spectral": [106, 107, 108, 109], "type": [106, 107, 108, 109, 127, 149], "tr": [106, 107, 108, 109], "whether": [106, 107, 108, 109, 158], "sens": [106, 107, 108, 109], "graphicallasso": 106, "notimplementederror": 106, "support": [106, 115, 122, 131, 132, 133, 175, 176], "yet": 106, "get_precis": [106, 107, 108, 109], "getter": [106, 107, 108, 109], "precis": [106, 107, 108, 109], "current": [106, 107, 108, 109, 128, 129, 130, 133, 171], "mahalanobi": [106, 107, 108, 109], "drawn": [106, 107, 108, 109, 124], "gaussian": [106, 107, 108, 109], "set_score_request": [106, 107, 108, 109], "request": [106, 107, 108, 109, 177], "relev": [106, 107, 108, 109], "enable_metadata_rout": [106, 107, 108, 109], "meta": [106, 107, 108, 109, 175], "alia": [106, 107, 108, 109], "metadata_rout": [106, 107, 108, 109], "retain": [106, 107, 108, 109, 131, 132, 133, 171], "insid": [106, 107, 108, 109, 122, 167], "block_siz": [107, 144, 145], "ledoit": [107, 163], "wolf": [107, 163], "particular": 107, "o": [107, 108, 127], "m": [107, 127, 152, 153, 158], "describ": [107, 137, 171], "block": [107, 144, 145], "pure": 107, "shrinkage_": [107, 108], "shrunk": [107, 108, 109], "regularis": [107, 108], "cov": [107, 108, 109, 146, 155, 156, 157, 167, 175], "ident": [107, 108, 109, 125, 134, 167], "trace": [107, 108, 109], "volum": 107, "issu": 107, "februari": 107, "2004": [107, 144, 145], "page": 107, "365": 107, "oracl": [108, 163], "propos": 108, "formul": [108, 114, 177], "eq": 108, "articl": 108, "state": 108, "oper": [108, 131, 132, 133, 144, 145, 146, 147], "mmse": 108, "chen": 108, "wiesel": 108, "eldar": 108, "c": [108, 125, 154, 175, 177], "hero": 108, "ieee": 108, "5016": 108, "5029": 108, "2010": [108, 134, 138, 167], "vol_weighted_target": 110, "shrunkmumethod": 110, "james_stein": [110, 111], "1955": 110, "shrink": 110, "bar": 110, "There": [110, 167], "grand": 110, "bay": [110, 111], "bodnar": [110, 111], "okhrin": [110, 111], "parolya": [110, 111], "bayes_stein": [110, 111], "bodnar_okhrin": [110, 111], "mu_target_": 110, "beta_": 110, "attilio": [110, 134, 138], "meucci": [110, 134, 138, 167], "philipp": [110, 117, 118], "jorion": 110, "1986": 110, "baseprior": [113, 114, 115, 117, 118, 119, 120, 121, 125, 137, 139, 144, 145, 146, 147], "basedist": [113, 117, 118, 122], "minium": [113, 114, 115, 117, 118, 120, 121, 125], "sx5e": [113, 114, 115, 117, 118, 120, 121, 125, 137], "copi": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130], "distance_estimator_": [113, 117, 118, 122], "1d": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126], "charact": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126], "covariance_uncertainty_set_estim": [114, 121, 180], "risk_free_r": [114, 115, 120, 121, 125, 128, 129, 130, 137], "evar_beta": [114, 121, 125, 128, 129, 130], "cdar_beta": [114, 121, 125, 128, 129, 130], "edar_beta": [114, 121, 125, 128, 129, 130], "solver_param": [114, 115, 120, 121, 125], "scale_object": [114, 115, 120, 121, 125], "scale_constraint": [114, 115, 120, 121, 125], "save_problem": [114, 115, 120, 121, 125], "add_object": [114, 115, 120, 121, 125], "add_constraint": [114, 115, 120, 121, 125], "overwrite_expected_return": [114, 115, 121, 125], "_": [114, 167], "_risk": 114, "dynam": 114, "lookup": 114, "share": 114, "_cvx_cach": 114, "duplic": 114, "turnov": [114, 120, 121, 125, 163, 175], "basemuuncertaintyset": [114, 121], "basecovarianceuncertaintyset": [114, 121], "n_constraint": [114, 115, 120, 121, 125], "match": [114, 115, 120, 121, 125, 131, 132, 133, 137], "With": [114, 115, 120, 121, 125, 134, 137, 163, 175], "referenc": [114, 115, 120, 121, 125, 137], "tlt": [114, 115, 120, 121, 125, 137, 163], "equiti": [114, 115, 120, 121, 125, 137, 163], "bond": [114, 115, 120, 121, 125, 137, 163, 167], "europ": [114, 115, 120, 121, 125, 137, 163], "n_group": [114, 115, 120, 121, 125, 137], "right": [114, 115, 120, 121, 125, 128, 129, 130, 144, 145, 146, 147, 148, 180], "free": [114, 115, 120, 121, 125, 128, 129, 130, 137], "interest": [114, 115, 120, 121, 125], "rate": [114, 115, 120, 121, 125, 128, 129, 130, 137], "cp": [114, 115, 120, 121, 125], "cvxpy": [114, 115, 120, 121, 125, 163], "cvpxy": [114, 115, 120, 121, 125], "overwrit": [114, 115, 121, 125], "written": [114, 115, 120, 121, 125], "rust": [114, 115, 120, 121, 125], "eco": [114, 115, 120, 121, 125], "sc": [114, 115, 120, 121, 125], "releas": [114, 115, 120, 121, 125, 167, 172], "www": [114, 115, 120, 121, 125], "org": [114, 115, 120, 121, 125], "html": [114, 115, 120, 121, 125], "tol_gap_ab": [114, 115, 120, 121, 125], "tol_gap_rel": [114, 115, 120, 121, 125], "problem_": [114, 115, 120, 121, 125], "warn": [114, 115, 120, 121, 125], "n_optim": [114, 115, 116, 119, 120, 121, 124, 125], "problem_values_": [114, 115, 120, 121, 125], "mu_uncertainty_set_estimator_": [114, 121], "covariance_uncertainty_set_estimator_": [114, 121], "permit": 115, "driven": 115, "guarante": 115, "tractabl": 115, "n_factor": [115, 125, 139, 140, 144, 145, 146, 147], "2017": [117, 133, 167], "review": [117, 118], "decad": [117, 118], "gautier": [117, 118, 163], "marti": [117, 118, 163], "frank": [117, 118], "nielsen": [117, 118], "miko\u0142aj": [117, 118], "bi\u0144kowski": [117, 118], "donnat": [117, 118], "ssrn": [118, 122], "electron": [118, 122], "cambridg": [118, 122], "univers": [118, 122, 167, 178], "press": [118, 122, 167], "deriv": [119, 167], "max_turnov": [120, 121], "special": 120, "max_mean_absolute_devi": 121, "max_first_lower_partial_mo": 121, "max_standard_devi": 121, "max_semi_vari": 121, "max_semi_devi": 121, "max_worst_r": 121, "max_evar": 121, "max_max_drawdown": 121, "max_average_drawdown": 121, "max_edar": 121, "max_ulcer_index": 121, "max_gini_mean_differ": 121, "begin": [121, 125, 154, 175], "align": [121, 125, 154, 175], "min_": [121, 125, 175], "risk_": [121, 125, 175], "text": [121, 125, 144, 146, 148, 154, 175, 180], "le": [121, 175], "_risk_": [121, 175], "quad": [121, 175], "foral": [121, 175], "ne": [121, 175], "max_": [121, 154, 167, 175], "r_": [121, 123, 147, 175], "ad": [121, 125, 131, 132, 133, 139, 163, 171, 174, 176], "quantil": [122, 126, 127, 174, 175, 176], "quantile_measur": [122, 126, 175], "baseestim": [122, 140], "expos": 122, "basecrossvalid": [122, 126], "basecombinatorialcv": [122, 126], "combinatorialcv": [122, 126], "inner_estimators_": 122, "outer_estimator_": 122, "dirichlet": [124, 162, 163], "solv": [125, 175, 180], "auxiliari": [125, 175], "barrier": [125, 175], "tupl": [126, 157], "prefit": 126, "skip": 126, "named_estimators_": 126, "constructor": [126, 171], "variou": 126, "named_estim": 126, "bunch": 126, "parameter_nam": 126, "new_valu": 126, "item": 127, "empti": [127, 129], "shallow": 127, "occurr": 127, "intersect": 127, "sy": 127, "maxsiz": 127, "valueerror": [127, 150, 151, 152], "insert": [127, 131, 132, 133], "min_measur": 127, "non_denominated_sort": [127, 176], "first_front_onli": 127, "sort": [127, 129, 131, 132, 133], "complex": [127, 175], "mn": 127, "front": [127, 133, 176], "log_scal": [127, 128, 129, 130], "idx": [127, 128, 129, 130], "logarithm": [127, 128, 129, 130, 134, 138], "rebas": [127, 128, 129, 130], "slice": [127, 128, 129, 130], "show_front": [127, 176], "3d": 127, "hover": 127, "highlight": 127, "pop": 127, "indexerror": 127, "q": [127, 133, 174, 176], "revers": [127, 131, 132, 133], "IN": 127, "place": 127, "ascend": 127, "maintain": 127, "descend": 127, "flag": 127, "sort_measur": 127, "format": [127, 128, 129, 130, 131, 132, 133], "round": [127, 128, 129, 130], "unit": [127, 128, 129, 130], "fitness_measur": [128, 129, 130, 133, 177], "value_at_risk_beta": [128, 129, 130], "entropic_risk_measure_theta": [128, 129, 130], "entropic_risk_measure_beta": [128, 129, 130], "drawdown_at_risk_beta": [128, 129, 130], "manipul": [128, 129, 130, 176], "rule": [128, 129, 130, 159, 160, 167], "At": [128, 129, 130], "_factor": [128, 129, 130], "_varianc": [128, 129, 130], "_deviat": [128, 129, 130], "lopsided": [128, 129, 130], "symmetr": [128, 129, 130, 152, 156, 158], "_ratio": [128, 129, 130], "slot": [128, 129, 130, 177], "cumulative_return": [128, 129, 130, 177], "cumulative_returns_df": [128, 129, 130, 177], "strictli": [128, 129, 130], "wors": [128, 129, 130], "get_measur": [128, 129, 130], "measures_df": [128, 129, 130], "plot_return": [128, 129, 130], "plot_rolling_measur": [128, 129, 130, 177], "ct": [128, 129, 130], "returns_df": [128, 129, 130, 177], "rolling_measur": [128, 129, 130, 177], "check_observations_ord": 129, "initi": [129, 131, 144, 145, 156, 178], "chronolog": 129, "baseportfolio": [129, 130, 177], "mutli": 129, "x0": [130, 131, 132, 133], "x1": [130, 131, 132, 133], "wi": 130, "2h": 130, "ndrrai": 130, "expected_returns_from_asset": 130, "assets_expected_return": 130, "get_weight": [130, 177], "ab": 130, "nonzero_assets_index": 130, "sric": 130, "criterion": 130, "dirk": 130, "paulsen": 130, "variance_from_asset": 130, "assets_covari": 130, "sequenti": 131, "suboptim": [131, 167], "either": [131, 171], "shortcom": [131, 163], "keep": [131, 132, 134], "to_keep_": [131, 132, 133], "boolean": [131, 132, 133], "fit_transform": [131, 132, 133, 178], "n_output": [131, 132, 133], "unsupervis": [131, 132, 133], "x_new": [131, 132, 133], "n_features_new": [131, 132, 133], "get_feature_names_out": [131, 132, 133], "input_featur": [131, 132, 133], "mask": [131, 132, 133], "feature_names_out": [131, 132, 133], "get_support": [131, 132, 133], "rather": [131, 132, 133], "iff": [131, 132, 133], "retent": [131, 132, 133], "inverse_transform": [131, 132, 133], "n_selected_featur": [131, 132, 133], "x_r": [131, 132, 133], "n_original_featur": [131, 132, 133], "set_output": [131, 132, 133], "sphx_glr_auto_examples_miscellaneous_plot_set_output": [131, 132, 133], "configur": [131, 132, 133], "polar": [131, 132, 133], "min_n_asset": 133, "preselect": 133, "rank": 133, "until": [133, 172], "reach": 133, "insuffici": 133, "potenti": 133, "evolutionari": 133, "qu": 133, "zhou": 133, "log_return": 134, "nan_threshold": 134, "ln": [134, 167], "biggl": [134, 167], "biggr": [134, 167], "aggreg": [134, 167], "On": [134, 159, 163], "hand": 134, "percentag": 134, "pitfal": [134, 138], "garp": [134, 138, 167], "profession": [134, 138, 167], "view": [137, 163, 175, 179], "view_confid": 137, "bayesian": [137, 163, 179], "analyst": [137, 175, 179], "n_view": 137, "asset_i": 137, "asset_j": 137, "frequenc": [137, 167], "00015": 137, "0002": [137, 163, 177], "0004": [137, 175, 179], "european": 137, "equilibriummu": [137, 170, 175], "put": 137, "literatur": 137, "diagon": [137, 139, 144, 145, 146, 147], "omega": 137, "idzorek": 137, "groups_": 137, "views_": 137, "picking_matrix_": 137, "pick": 137, "incom": 137, "fischer": 137, "robert": [137, 167], "1991": 137, "forecast": 137, "2007": [137, 163], "basemu": 138, "empiricalmu": [138, 170], "project": [138, 167], "mu_estimator_": 138, "residual_vari": 139, "max_iter": 139, "loadingmatrixestim": 139, "residu": 139, "slower": [139, 140], "factor_prior_estimator_": 139, "regress": 140, "regressor": 140, "overhead": 140, "intercepts_": 140, "multi_output_regressor_": 140, "multioutputregressor": 140, "multioutput": 140, "dimens": 141, "n_bootstrap_sampl": [144, 145], "seed": [144, 145], "bootstrap": [144, 145, 163], "circular": [144, 145, 163], "u_": [144, 145, 146, 147, 148, 180], "vec": [144, 146, 148, 180], "succeq": [144, 146, 148, 180], "chi": [144, 145, 146, 147], "2_": [144, 145, 146, 147], "_asset": [144, 145, 146, 147], "freedom": [144, 145, 146, 147], "stationari": [144, 145], "forc": [144, 145, 147], "politi": [144, 145], "white": [144, 145], "uncertainty_set_": [144, 145, 146, 147, 180], "uncertaintyset": [144, 145, 146, 147, 180], "mathemat": [144, 145, 146, 147], "sch\u00f6ttle": [144, 145, 146, 147], "werner": [144, 145, 146, 147], "automat": [144, 145, 168], "length": [144, 145], "correct": [144, 145], "patton": [144, 145], "empiricalcovarianceuncertaintyset": [144, 180], "wishart": 146, "sim": [146, 147], "solut": 146, "notat": 146, "i_": 146, "k_": 146, "nn": 146, "otim": 146, "denot": [146, 167], "commut": [146, 153], "kroneck": 146, "assumpt": [147, 167], "qualnam": 149, "linkage_matrix": 154, "tibshirani": 154, "dispers": 154, "null": 154, "bigl": 154, "bigr": 154, "d_": 154, "densiti": [154, 159], "back": 156, "spd": 156, "faster": 156, "ima": 156, "hermitian": 158, "real": 158, "verifi": 158, "histogram": [159, 160], "diaconi": 159, "1981": 159, "simplex": [161, 162], "randomli": 161, "portfolio optim": 163, "scikit-learn": 163, "librari": 163, "built": 163, "offer": 163, "unifi": 163, "interfac": 163, "fine": 163, "tune": [163, 172], "claus": 163, "bsd": 163, "licens": 163, "pypi": [163, 173], "pip": [163, 173], "1952": 163, "mvo": 163, "receiv": 163, "consider": 163, "attent": 163, "unfortun": 163, "sensit": 163, "poor": 163, "demiguel": 163, "allevi": 163, "fact": 163, "framework": [163, 172], "graphic": 163, "hyper": 163, "snippet": 163, "design": [163, 175], "quickli": 163, "detonecovari": [163, 166], "ewmu": [163, 170, 171], "fund": 163, "japan": 163, "prior_estimator__mu_estimator__alpha": [163, 171], "mmp": 163, "get_summari": 163, "thank": 163, "contributor": 163, "behind": 163, "resourc": 163, "inspir": 163, "pyportfolioopt": 163, "riskfolio": 163, "lib": 163, "micropredict": 163, "statsmodel": 163, "rsome": 163, "ai": 163, "scientif": 163, "appreci": 163, "bibtex": 163, "misc": 163, "author": 163, "hugo": 163, "delatt": 163, "carlo": [163, 167], "nicolini": 163, "url": 163, "github": [163, 168], "956": 164, "complement": 165, "ewcovari": 166, "oa": 166, "graphicallassocv": 166, "most": [167, 171], "methodologi": 167, "lin": 167, "properli": 167, "easi": 167, "similar": [167, 171], "sometim": 167, "interchang": 167, "uncommon": 167, "wit": 167, "sigma_": 167, "incorrect": 167, "invari": 167, "behav": 167, "nor": 167, "secondli": 167, "pose": 167, "matur": 167, "parametr": 167, "characterist": 167, "mathbb": 167, "pmb": 167, "circ": 167, "exp": 167, "diag": 167, "hadamard": 167, "wise": 167, "could": 167, "convers": 167, "frequent": [167, 177], "reform": 167, "meantim": 167, "own": [167, 171, 174], "quant": 167, "nugget": 167, "practic": [167, 171, 177], "oxford": 167, "richard": 167, "michaud": 167, "panna": 167, "miskolczi": 167, "le\u00f3n": 167, "alejandro": 167, "reveiz": 167, "cookbook": 167, "nativ": 168, "larger": 168, "repo": 168, "directori": 168, "load_nasdaq_dataset": 168, "home": 168, "environ": 168, "spearmandist": [169, 175], "covariancedist": [169, 175], "distancecorrel": [169, 175], "mutualinform": [169, 175], "\u00ecn": 171, "learnt": 171, "candid": 171, "scheme": 171, "core": 171, "favor": 171, "main": 171, "benefit": 171, "influenc": 171, "addition": 171, "principl": 171, "rv": 171, "consecut": 171, "mani": 171, "gamma": 171, "randint": 171, "finer": 171, "param_dist": 171, "rd_search": 171, "write": 171, "def": [171, 175], "custom_scor": 171, "dedic": 171, "syntax": 171, "part": 171, "optimization__risk_measur": 171, "activ": 172, "plan": 172, "mid": 172, "2024": 172, "pin": 172, "break": 172, "tailor": 174, "integr": 174, "combinatorialpurgecv": 174, "intend": [175, 177], "commonli": 175, "rerun": [175, 179], "0003": [175, 179], "0006": [175, 179], "hous": 175, "mycustomcovari": 175, "my_param": 175, "super": 175, "_validate_data": 175, "_set_covari": 175, "mitig": 175, "ge0": 175, "portfolio_train": 175, "portfolio_test": 175, "inherit": [176, 177], "rand_weight": 176, "datetim": 177, "dt": 177, "other_portfolio": 177, "minu": 177, "r_p": 177, "prev": 177, "perfectli": 177, "replic": 177, "drift": 177, "regard": 177, "topic": 177, "004": 177, "pd": 177, "0010": 177, "my_portfolio": 177, "04203502": 177, "04203503": 177, "selectnondomin": 178, "new_x": 178, "pipe": 178, "mean_risk": 178, "sklean": 179, "bootstrapcovarianceuncertaintyset": 180}, "objects": {"": [[0, 0, 0, "module-7", "skfolio"]], "skfolio.cluster": [[47, 1, 1, "", "HierarchicalClustering"], [48, 1, 1, "", "LinkageMethod"]], "skfolio.cluster.HierarchicalClustering": [[47, 2, 1, "", "fit"], [47, 2, 1, "", "fit_predict"], [47, 2, 1, "", "get_metadata_routing"], [47, 2, 1, "", "get_params"], [47, 2, 1, "", "plot_dendrogram"], [47, 2, 1, "", "set_params"]], "skfolio.datasets": [[49, 3, 1, "", "load_factors_dataset"], [50, 3, 1, "", "load_ftse100_dataset"], [51, 3, 1, "", "load_nasdaq_dataset"], [52, 3, 1, "", "load_sp500_dataset"], [53, 3, 1, "", "load_sp500_index"]], "skfolio.distance": [[54, 1, 1, "", "BaseDistance"], [55, 1, 1, "", "CovarianceDistance"], [56, 1, 1, "", "DistanceCorrelation"], [57, 1, 1, "", "KendallDistance"], [58, 1, 1, "", "MutualInformation"], [59, 1, 1, "", "PearsonDistance"], [60, 1, 1, "", "SpearmanDistance"]], "skfolio.distance.BaseDistance": [[54, 2, 1, "", "fit"], [54, 2, 1, "", "get_metadata_routing"], [54, 2, 1, "", "get_params"], [54, 2, 1, "", "set_params"]], "skfolio.distance.CovarianceDistance": [[55, 2, 1, "", "fit"], [55, 2, 1, "", "get_metadata_routing"], [55, 2, 1, "", "get_params"], [55, 2, 1, "", "set_params"]], "skfolio.distance.DistanceCorrelation": [[56, 2, 1, "", "fit"], [56, 2, 1, "", "get_metadata_routing"], [56, 2, 1, "", "get_params"], [56, 2, 1, "", "set_params"]], "skfolio.distance.KendallDistance": [[57, 2, 1, "", "fit"], [57, 2, 1, "", "get_metadata_routing"], [57, 2, 1, "", "get_params"], [57, 2, 1, "", "set_params"]], "skfolio.distance.MutualInformation": [[58, 2, 1, "", "fit"], [58, 2, 1, "", "get_metadata_routing"], [58, 2, 1, "", "get_params"], [58, 2, 1, "", "set_params"]], "skfolio.distance.PearsonDistance": [[59, 2, 1, "", "fit"], [59, 2, 1, "", "get_metadata_routing"], [59, 2, 1, "", "get_params"], [59, 2, 1, "", "set_params"]], "skfolio.distance.SpearmanDistance": [[60, 2, 1, "", "fit"], [60, 2, 1, "", "get_metadata_routing"], [60, 2, 1, "", "get_params"], [60, 2, 1, "", "set_params"]], "skfolio": [[0, 0, 0, "-", "measures"], [0, 0, 0, "-", "population"], [0, 0, 0, "-", "portfolio"]], "skfolio.measures": [[61, 1, 1, "", "BaseMeasure"], [62, 1, 1, "", "ExtraRiskMeasure"], [63, 1, 1, "", "PerfMeasure"], [64, 1, 1, "", "RatioMeasure"], [65, 1, 1, "", "RiskMeasure"], [66, 3, 1, "", "average_drawdown"], [67, 3, 1, "", "cdar"], [68, 3, 1, "", "cvar"], [69, 3, 1, "", "drawdown_at_risk"], [70, 3, 1, "", "edar"], [71, 3, 1, "", "entropic_risk_measure"], [72, 3, 1, "", "evar"], [73, 3, 1, "", "first_lower_partial_moment"], [74, 3, 1, "", "fourth_central_moment"], [75, 3, 1, "", "fourth_lower_partial_moment"], [76, 3, 1, "", "get_cumulative_returns"], [77, 3, 1, "", "get_drawdowns"], [78, 3, 1, "", "gini_mean_difference"], [79, 3, 1, "", "max_drawdown"], [80, 3, 1, "", "mean"], [81, 3, 1, "", "mean_absolute_deviation"], [82, 3, 1, "", "owa_gmd_weights"], [83, 3, 1, "", "semi_deviation"], [84, 3, 1, "", "semi_variance"], [85, 3, 1, "", "standard_deviation"], [86, 3, 1, "", "third_central_moment"], [87, 3, 1, "", "ulcer_index"], [88, 3, 1, "", "value_at_risk"], [89, 3, 1, "", "variance"], [90, 3, 1, "", "worst_realization"]], "skfolio.metrics": [[91, 3, 1, "", "make_scorer"]], "skfolio.model_selection": [[92, 1, 1, "", "BaseCombinatorialCV"], [93, 1, 1, "", "CombinatorialPurgedCV"], [94, 1, 1, "", "WalkForward"], [95, 3, 1, "", "cross_val_predict"]], "skfolio.model_selection.BaseCombinatorialCV": [[92, 2, 1, "", "get_path_ids"]], "skfolio.model_selection.CombinatorialPurgedCV": [[93, 4, 1, "", "binary_train_test_sets"], [93, 2, 1, "", "get_path_ids"], [93, 4, 1, "", "n_splits"], [93, 4, 1, "", "n_test_paths"], [93, 2, 1, "", "plot_train_test_folds"], [93, 2, 1, "", "plot_train_test_index"], [93, 4, 1, "", "recombined_paths"], [93, 2, 1, "", "split"], [93, 4, 1, "", "test_set_index"]], "skfolio.model_selection.WalkForward": [[94, 2, 1, "", "get_metadata_routing"], [94, 2, 1, "", "get_n_splits"], [94, 2, 1, "", "split"]], "skfolio.moments": [[96, 1, 1, "", "BaseCovariance"], [97, 1, 1, "", "BaseMu"], [98, 1, 1, "", "DenoiseCovariance"], [99, 1, 1, "", "DetoneCovariance"], [100, 1, 1, "", "EWCovariance"], [101, 1, 1, "", "EWMu"], [102, 1, 1, "", "EmpiricalCovariance"], [103, 1, 1, "", "EmpiricalMu"], [104, 1, 1, "", "EquilibriumMu"], [105, 1, 1, "", "GerberCovariance"], [106, 1, 1, "", "GraphicalLassoCV"], [107, 1, 1, "", "LedoitWolf"], [108, 1, 1, "", "OAS"], [109, 1, 1, "", "ShrunkCovariance"], [110, 1, 1, "", "ShrunkMu"], [111, 1, 1, "", "ShrunkMuMethods"]], "skfolio.moments.BaseCovariance": [[96, 2, 1, "", "get_metadata_routing"], [96, 2, 1, "", "get_params"], [96, 2, 1, "", "set_params"]], "skfolio.moments.BaseMu": [[97, 2, 1, "", "get_metadata_routing"], [97, 2, 1, "", "get_params"], [97, 2, 1, "", "set_params"]], "skfolio.moments.DenoiseCovariance": [[98, 2, 1, "", "fit"], [98, 2, 1, "", "get_metadata_routing"], [98, 2, 1, "", "get_params"], [98, 2, 1, "", "set_params"]], "skfolio.moments.DetoneCovariance": [[99, 2, 1, "", "fit"], [99, 2, 1, "", "get_metadata_routing"], [99, 2, 1, "", "get_params"], [99, 2, 1, "", "set_params"]], "skfolio.moments.EWCovariance": [[100, 2, 1, "", "fit"], [100, 2, 1, "", "get_metadata_routing"], [100, 2, 1, "", "get_params"], [100, 2, 1, "", "set_params"]], "skfolio.moments.EWMu": [[101, 2, 1, "", "fit"], [101, 2, 1, "", "get_metadata_routing"], [101, 2, 1, "", "get_params"], [101, 2, 1, "", "set_params"]], "skfolio.moments.EmpiricalCovariance": [[102, 2, 1, "", "fit"], [102, 2, 1, "", "get_metadata_routing"], [102, 2, 1, "", "get_params"], [102, 2, 1, "", "set_params"]], "skfolio.moments.EmpiricalMu": [[103, 2, 1, "", "fit"], [103, 2, 1, "", "get_metadata_routing"], [103, 2, 1, "", "get_params"], [103, 2, 1, "", "set_params"]], "skfolio.moments.EquilibriumMu": [[104, 2, 1, "", "fit"], [104, 2, 1, "", "get_metadata_routing"], [104, 2, 1, "", "get_params"], [104, 2, 1, "", "set_params"]], "skfolio.moments.GerberCovariance": [[105, 2, 1, "", "fit"], [105, 2, 1, "", "get_metadata_routing"], [105, 2, 1, "", "get_params"], [105, 2, 1, "", "set_params"]], "skfolio.moments.GraphicalLassoCV": [[106, 2, 1, "", "error_norm"], [106, 2, 1, "", "fit"], [106, 2, 1, "", "get_metadata_routing"], [106, 2, 1, "", "get_params"], [106, 2, 1, "", "get_precision"], [106, 2, 1, "", "mahalanobis"], [106, 2, 1, "", "score"], [106, 2, 1, "", "set_params"], [106, 2, 1, "", "set_score_request"]], "skfolio.moments.LedoitWolf": [[107, 2, 1, "", "error_norm"], [107, 2, 1, "", "fit"], [107, 2, 1, "", "get_metadata_routing"], [107, 2, 1, "", "get_params"], [107, 2, 1, "", "get_precision"], [107, 2, 1, "", "mahalanobis"], [107, 2, 1, "", "score"], [107, 2, 1, "", "set_params"], [107, 2, 1, "", "set_score_request"]], "skfolio.moments.OAS": [[108, 2, 1, "", "error_norm"], [108, 2, 1, "", "fit"], [108, 2, 1, "", "get_metadata_routing"], [108, 2, 1, "", "get_params"], [108, 2, 1, "", "get_precision"], [108, 2, 1, "", "mahalanobis"], [108, 2, 1, "", "score"], [108, 2, 1, "", "set_params"], [108, 2, 1, "", "set_score_request"]], "skfolio.moments.ShrunkCovariance": [[109, 2, 1, "", "error_norm"], [109, 2, 1, "", "fit"], [109, 2, 1, "", "get_metadata_routing"], [109, 2, 1, "", "get_params"], [109, 2, 1, "", "get_precision"], [109, 2, 1, "", "mahalanobis"], [109, 2, 1, "", "score"], [109, 2, 1, "", "set_params"], [109, 2, 1, "", "set_score_request"]], "skfolio.moments.ShrunkMu": [[110, 2, 1, "", "fit"], [110, 2, 1, "", "get_metadata_routing"], [110, 2, 1, "", "get_params"], [110, 2, 1, "", "set_params"]], "skfolio.optimization": [[112, 1, 1, "", "BaseComposition"], [113, 1, 1, "", "BaseHierarchicalOptimization"], [114, 1, 1, "", "ConvexOptimization"], [115, 1, 1, "", "DistributionallyRobustCVaR"], [116, 1, 1, "", "EqualWeighted"], [117, 1, 1, "", "HierarchicalEqualRiskContribution"], [118, 1, 1, "", "HierarchicalRiskParity"], [119, 1, 1, "", "InverseVolatility"], [120, 1, 1, "", "MaximumDiversification"], [121, 1, 1, "", "MeanRisk"], [122, 1, 1, "", "NestedClustersOptimization"], [123, 1, 1, "", "ObjectiveFunction"], [124, 1, 1, "", "Random"], [125, 1, 1, "", "RiskBudgeting"], [126, 1, 1, "", "StackingOptimization"], [0, 0, 0, "-", "cluster"], [0, 0, 0, "-", "convex"], [0, 0, 0, "-", "ensemble"], [0, 0, 0, "-", "naive"]], "skfolio.optimization.BaseComposition": [[112, 2, 1, "", "get_metadata_routing"], [112, 2, 1, "", "get_params"], [112, 2, 1, "", "set_params"]], "skfolio.optimization.BaseHierarchicalOptimization": [[113, 2, 1, "", "fit_predict"], [113, 2, 1, "", "get_metadata_routing"], [113, 2, 1, "", "get_params"], [113, 2, 1, "", "predict"], [113, 2, 1, "", "score"], [113, 2, 1, "", "set_params"]], "skfolio.optimization.ConvexOptimization": [[114, 2, 1, "", "fit_predict"], [114, 2, 1, "", "get_metadata_routing"], [114, 2, 1, "", "get_params"], [114, 2, 1, "", "predict"], [114, 2, 1, "", "score"], [114, 2, 1, "", "set_params"]], "skfolio.optimization.DistributionallyRobustCVaR": [[115, 2, 1, "", "fit"], [115, 2, 1, "", "fit_predict"], [115, 2, 1, "", "get_metadata_routing"], [115, 2, 1, "", "get_params"], [115, 2, 1, "", "predict"], [115, 2, 1, "", "score"], [115, 2, 1, "", "set_params"]], "skfolio.optimization.EqualWeighted": [[116, 2, 1, "", "fit"], [116, 2, 1, "", "fit_predict"], [116, 2, 1, "", "get_metadata_routing"], [116, 2, 1, "", "get_params"], [116, 2, 1, "", "predict"], [116, 2, 1, "", "score"], [116, 2, 1, "", "set_params"]], "skfolio.optimization.HierarchicalEqualRiskContribution": [[117, 2, 1, "", "fit"], [117, 2, 1, "", "fit_predict"], [117, 2, 1, "", "get_metadata_routing"], [117, 2, 1, "", "get_params"], [117, 2, 1, "", "predict"], [117, 2, 1, "", "score"], [117, 2, 1, "", "set_params"]], "skfolio.optimization.HierarchicalRiskParity": [[118, 2, 1, "", "fit"], [118, 2, 1, "", "fit_predict"], [118, 2, 1, "", "get_metadata_routing"], [118, 2, 1, "", "get_params"], [118, 2, 1, "", "predict"], [118, 2, 1, "", "score"], [118, 2, 1, "", "set_params"]], "skfolio.optimization.InverseVolatility": [[119, 2, 1, "", "fit"], [119, 2, 1, "", "fit_predict"], [119, 2, 1, "", "get_metadata_routing"], [119, 2, 1, "", "get_params"], [119, 2, 1, "", "predict"], [119, 2, 1, "", "score"], [119, 2, 1, "", "set_params"]], "skfolio.optimization.MaximumDiversification": [[120, 2, 1, "", "fit"], [120, 2, 1, "", "fit_predict"], [120, 2, 1, "", "get_metadata_routing"], [120, 2, 1, "", "get_params"], [120, 2, 1, "", "predict"], [120, 2, 1, "", "score"], [120, 2, 1, "", "set_params"]], "skfolio.optimization.MeanRisk": [[121, 2, 1, "", "fit"], [121, 2, 1, "", "fit_predict"], [121, 2, 1, "", "get_metadata_routing"], [121, 2, 1, "", "get_params"], [121, 2, 1, "", "predict"], [121, 2, 1, "", "score"], [121, 2, 1, "", "set_params"]], "skfolio.optimization.NestedClustersOptimization": [[122, 2, 1, "", "fit"], [122, 2, 1, "", "fit_predict"], [122, 2, 1, "", "get_metadata_routing"], [122, 2, 1, "", "get_params"], [122, 2, 1, "", "predict"], [122, 2, 1, "", "score"], [122, 2, 1, "", "set_params"]], "skfolio.optimization.Random": [[124, 2, 1, "", "fit"], [124, 2, 1, "", "fit_predict"], [124, 2, 1, "", "get_metadata_routing"], [124, 2, 1, "", "get_params"], [124, 2, 1, "", "predict"], [124, 2, 1, "", "score"], [124, 2, 1, "", "set_params"]], "skfolio.optimization.RiskBudgeting": [[125, 2, 1, "", "fit"], [125, 2, 1, "", "fit_predict"], [125, 2, 1, "", "get_metadata_routing"], [125, 2, 1, "", "get_params"], [125, 2, 1, "", "predict"], [125, 2, 1, "", "score"], [125, 2, 1, "", "set_params"]], "skfolio.optimization.StackingOptimization": [[126, 2, 1, "", "fit"], [126, 2, 1, "", "fit_predict"], [126, 2, 1, "", "get_metadata_routing"], [126, 2, 1, "", "get_params"], [126, 4, 1, "", "named_estimators"], [126, 2, 1, "", "predict"], [126, 2, 1, "", "score"], [126, 2, 1, "", "set_params"]], "skfolio.population": [[127, 1, 1, "", "Population"]], "skfolio.population.Population": [[127, 2, 1, "", "append"], [127, 2, 1, "", "clear"], [127, 2, 1, "", "composition"], [127, 2, 1, "", "copy"], [127, 2, 1, "", "count"], [127, 2, 1, "", "extend"], [127, 2, 1, "", "filter"], [127, 2, 1, "", "index"], [127, 2, 1, "", "insert"], [127, 2, 1, "", "max_measure"], [127, 2, 1, "", "measures"], [127, 2, 1, "", "measures_mean"], [127, 2, 1, "", "measures_std"], [127, 2, 1, "", "min_measure"], [127, 2, 1, "", "non_denominated_sort"], [127, 2, 1, "", "plot_composition"], [127, 2, 1, "", "plot_cumulative_returns"], [127, 2, 1, "", "plot_distribution"], [127, 2, 1, "", "plot_measures"], [127, 2, 1, "", "pop"], [127, 2, 1, "", "quantile"], [127, 2, 1, "", "remove"], [127, 2, 1, "", "reverse"], [127, 2, 1, "", "set_portfolio_params"], [127, 2, 1, "", "sort"], [127, 2, 1, "", "sort_measure"], [127, 2, 1, "", "summary"]], "skfolio.portfolio": [[128, 1, 1, "", "BasePortfolio"], [129, 1, 1, "", "MultiPeriodPortfolio"], [130, 1, 1, "", "Portfolio"]], "skfolio.portfolio.BasePortfolio": [[128, 4, 1, "", "annualized_factor"], [128, 2, 1, "", "clear"], [128, 4, 1, "", "composition"], [128, 2, 1, "", "copy"], [128, 5, 1, "", "cumulative_returns"], [128, 4, 1, "", "cumulative_returns_df"], [128, 2, 1, "", "dominates"], [128, 5, 1, "", "drawdowns"], [128, 5, 1, "", "fitness"], [128, 4, 1, "", "fitness_measures"], [128, 2, 1, "", "get_measure"], [128, 4, 1, "", "measures_df"], [128, 4, 1, "", "n_observations"], [128, 2, 1, "", "plot_composition"], [128, 2, 1, "", "plot_cumulative_returns"], [128, 2, 1, "", "plot_returns"], [128, 2, 1, "", "plot_rolling_measure"], [128, 4, 1, "", "returns_df"], [128, 2, 1, "", "rolling_measure"], [128, 2, 1, "", "summary"]], "skfolio.portfolio.MultiPeriodPortfolio": [[129, 4, 1, "", "annualized_factor"], [129, 2, 1, "", "append"], [129, 4, 1, "", "assets"], [129, 2, 1, "", "clear"], [129, 4, 1, "", "composition"], [129, 2, 1, "", "copy"], [129, 5, 1, "", "cumulative_returns"], [129, 4, 1, "", "cumulative_returns_df"], [129, 2, 1, "", "dominates"], [129, 5, 1, "", "drawdowns"], [129, 5, 1, "", "fitness"], [129, 4, 1, "", "fitness_measures"], [129, 2, 1, "", "get_measure"], [129, 4, 1, "", "measures_df"], [129, 4, 1, "", "n_observations"], [129, 2, 1, "", "plot_composition"], [129, 2, 1, "", "plot_cumulative_returns"], [129, 2, 1, "", "plot_returns"], [129, 2, 1, "", "plot_rolling_measure"], [129, 4, 1, "", "portfolios"], [129, 4, 1, "", "returns_df"], [129, 2, 1, "", "rolling_measure"], [129, 2, 1, "", "summary"]], "skfolio.portfolio.Portfolio": [[130, 4, 1, "", "annualized_factor"], [130, 2, 1, "", "clear"], [130, 4, 1, "", "composition"], [130, 2, 1, "", "contribution"], [130, 2, 1, "", "copy"], [130, 5, 1, "", "cumulative_returns"], [130, 4, 1, "", "cumulative_returns_df"], [130, 4, 1, "", "diversification"], [130, 2, 1, "", "dominates"], [130, 5, 1, "", "drawdowns"], [130, 2, 1, "", "expected_returns_from_assets"], [130, 5, 1, "", "fitness"], [130, 4, 1, "", "fitness_measures"], [130, 2, 1, "", "get_measure"], [130, 2, 1, "", "get_weight"], [130, 4, 1, "", "measures_df"], [130, 4, 1, "", "n_observations"], [130, 5, 1, "", "nonzero_assets"], [130, 5, 1, "", "nonzero_assets_index"], [130, 2, 1, "", "plot_composition"], [130, 2, 1, "", "plot_contribution"], [130, 2, 1, "", "plot_cumulative_returns"], [130, 2, 1, "", "plot_returns"], [130, 2, 1, "", "plot_rolling_measure"], [130, 4, 1, "", "returns_df"], [130, 2, 1, "", "rolling_measure"], [130, 4, 1, "", "sric"], [130, 2, 1, "", "summary"], [130, 2, 1, "", "variance_from_assets"]], "skfolio.pre_selection": [[131, 1, 1, "", "DropCorrelated"], [132, 1, 1, "", "SelectKExtremes"], [133, 1, 1, "", "SelectNonDominated"]], "skfolio.pre_selection.DropCorrelated": [[131, 2, 1, "", "fit"], [131, 2, 1, "", "fit_transform"], [131, 2, 1, "", "get_feature_names_out"], [131, 2, 1, "", "get_metadata_routing"], [131, 2, 1, "", "get_params"], [131, 2, 1, "", "get_support"], [131, 2, 1, "", "inverse_transform"], [131, 2, 1, "", "set_output"], [131, 2, 1, "", "set_params"], [131, 2, 1, "", "transform"]], "skfolio.pre_selection.SelectKExtremes": [[132, 2, 1, "", "fit"], [132, 2, 1, "", "fit_transform"], [132, 2, 1, "", "get_feature_names_out"], [132, 2, 1, "", "get_metadata_routing"], [132, 2, 1, "", "get_params"], [132, 2, 1, "", "get_support"], [132, 2, 1, "", "inverse_transform"], [132, 2, 1, "", "set_output"], [132, 2, 1, "", "set_params"], [132, 2, 1, "", "transform"]], "skfolio.pre_selection.SelectNonDominated": [[133, 2, 1, "", "fit"], [133, 2, 1, "", "fit_transform"], [133, 2, 1, "", "get_feature_names_out"], [133, 2, 1, "", "get_metadata_routing"], [133, 2, 1, "", "get_params"], [133, 2, 1, "", "get_support"], [133, 2, 1, "", "inverse_transform"], [133, 2, 1, "", "set_output"], [133, 2, 1, "", "set_params"], [133, 2, 1, "", "transform"]], "skfolio.preprocessing": [[134, 3, 1, "", "prices_to_returns"]], "skfolio.prior": [[135, 1, 1, "", "BaseLoadingMatrix"], [136, 1, 1, "", "BasePrior"], [137, 1, 1, "", "BlackLitterman"], [138, 1, 1, "", "EmpiricalPrior"], [139, 1, 1, "", "FactorModel"], [140, 1, 1, "", "LoadingMatrixRegression"], [141, 1, 1, "", "PriorModel"]], "skfolio.prior.BaseLoadingMatrix": [[135, 2, 1, "", "get_metadata_routing"], [135, 2, 1, "", "get_params"], [135, 2, 1, "", "set_params"]], "skfolio.prior.BasePrior": [[136, 2, 1, "", "get_metadata_routing"], [136, 2, 1, "", "get_params"], [136, 2, 1, "", "set_params"]], "skfolio.prior.BlackLitterman": [[137, 2, 1, "", "fit"], [137, 2, 1, "", "get_metadata_routing"], [137, 2, 1, "", "get_params"], [137, 2, 1, "", "set_params"]], "skfolio.prior.EmpiricalPrior": [[138, 2, 1, "", "fit"], [138, 2, 1, "", "get_metadata_routing"], [138, 2, 1, "", "get_params"], [138, 2, 1, "", "set_params"]], "skfolio.prior.FactorModel": [[139, 2, 1, "", "fit"], [139, 2, 1, "", "get_metadata_routing"], [139, 2, 1, "", "get_params"], [139, 2, 1, "", "set_params"]], "skfolio.prior.LoadingMatrixRegression": [[140, 2, 1, "", "fit"], [140, 2, 1, "", "get_metadata_routing"], [140, 2, 1, "", "get_params"], [140, 2, 1, "", "set_params"]], "skfolio.uncertainty_set": [[142, 1, 1, "", "BaseCovarianceUncertaintySet"], [143, 1, 1, "", "BaseMuUncertaintySet"], [144, 1, 1, "", "BootstrapCovarianceUncertaintySet"], [145, 1, 1, "", "BootstrapMuUncertaintySet"], [146, 1, 1, "", "EmpiricalCovarianceUncertaintySet"], [147, 1, 1, "", "EmpiricalMuUncertaintySet"], [148, 1, 1, "", "UncertaintySet"]], "skfolio.uncertainty_set.BaseCovarianceUncertaintySet": [[142, 2, 1, "", "get_metadata_routing"], [142, 2, 1, "", "get_params"], [142, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.BaseMuUncertaintySet": [[143, 2, 1, "", "get_metadata_routing"], [143, 2, 1, "", "get_params"], [143, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet": [[144, 2, 1, "", "fit"], [144, 2, 1, "", "get_metadata_routing"], [144, 2, 1, "", "get_params"], [144, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.BootstrapMuUncertaintySet": [[145, 2, 1, "", "fit"], [145, 2, 1, "", "get_metadata_routing"], [145, 2, 1, "", "get_params"], [145, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet": [[146, 2, 1, "", "fit"], [146, 2, 1, "", "get_metadata_routing"], [146, 2, 1, "", "get_params"], [146, 2, 1, "", "set_params"]], "skfolio.uncertainty_set.EmpiricalMuUncertaintySet": [[147, 2, 1, "", "fit"], [147, 2, 1, "", "get_metadata_routing"], [147, 2, 1, "", "get_params"], [147, 2, 1, "", "set_params"]], "skfolio.utils.stats": [[149, 3, 1, "", "NBinsMethod"], [150, 3, 1, "", "assert_is_distance"], [151, 3, 1, "", "assert_is_square"], [152, 3, 1, "", "assert_is_symmetric"], [153, 3, 1, "", "commutation_matrix"], [154, 3, 1, "", "compute_optimal_n_clusters"], [155, 3, 1, "", "corr_to_cov"], [156, 3, 1, "", "cov_nearest"], [157, 3, 1, "", "cov_to_corr"], [158, 3, 1, "", "is_cholesky_dec"], [159, 3, 1, "", "n_bins_freedman"], [160, 3, 1, "", "n_bins_knuth"], [161, 3, 1, "", "rand_weights"], [162, 3, 1, "", "rand_weights_dirichlet"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:property", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "property", "Python property"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"api": 0, "refer": 0, "skfolio": [0, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167], "measur": [0, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90], "base": [0, 177], "class": 0, "function": 0, "portfolio": [0, 12, 13, 128, 129, 130, 167, 177], "popul": [0, 127, 176], "optim": [0, 10, 32, 35, 36, 45, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 163, 167, 171, 175], "naiv": [0, 175], "estim": [0, 29, 30, 32, 165, 166, 169, 170, 171, 175, 179, 180], "convex": 0, "enum": 0, "cluster": [0, 28, 32, 45, 47, 48, 163, 165, 175], "ensembl": [0, 35, 45], "prior": [0, 3, 29, 135, 136, 137, 138, 139, 140, 141, 175, 179], "model": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 43, 163, 174, 179], "dataclass": 0, "load": [0, 163], "matrix": 0, "factor": [0, 5, 6, 163, 179], "moment": [0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "mu": 0, "covari": [0, 20, 163, 166], "distanc": [0, 29, 30, 32, 54, 55, 56, 57, 58, 59, 60, 169], "uncertainty_set": [0, 142, 143, 144, 145, 146, 147, 148], "uncertainti": [0, 15, 163, 180], "set": [0, 15, 163, 180], "pre_select": [0, 131, 132, 133], "pre": [0, 38, 45, 163, 178], "select": [0, 38, 40, 45, 163, 174, 178], "transform": [0, 178], "model_select": [0, 92, 93, 94, 95], "metric": [0, 91, 171], "dataset": [0, 49, 50, 51, 52, 53, 163, 168], "preprocess": [0, 134], "util": [0, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "stat": [0, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162], "mean": [1, 10, 45, 80, 175], "risk": [1, 17, 18, 19, 20, 29, 30, 45, 163, 175], "track": 2, "error": 2, "data": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 42, 45, 167], "predict": [2, 3, 4, 5, 6, 7, 8, 9, 14, 18, 19, 20, 23, 26, 29, 30, 31, 32, 33, 36, 39, 40, 163, 174], "empir": [3, 4, 5, 179], "benchmark": [3, 36], "black": [4, 6, 163, 179], "litterman": [4, 6, 163, 179], "analyst": [4, 6], "view": [4, 6], "analysi": [5, 7, 8, 9, 10, 18, 19, 20, 23, 26, 31, 33, 36], "maximum": [7, 22, 23, 45, 163, 175], "sharp": 7, "ratio": [7, 163], "conclus": [7, 8, 33, 36], "minimum": [8, 163], "cvar": [8, 19, 25, 26, 29, 45, 68, 163, 175], "effici": [9, 14, 15], "frontier": [9, 14, 15], "varianc": [10, 18, 89, 163], "cdar": [10, 30, 67], "surfac": 10, "pareto": 10, "weight": [11, 163], "constraint": [11, 163], "budget": [11, 17, 19, 45, 175], "lower": 11, "upper": 11, "bound": 11, "short": 11, "long": 11, "posit": 11, "group": 11, "linear": [11, 43, 167], "left": 11, "right": 11, "inequ": 11, "transact": [12, 163], "cost": [12, 163], "multi": [12, 13, 177], "period": [12, 13, 177], "manag": 13, "fee": 13, "l1": 14, "l2": [14, 163], "regular": 14, "hyper": [14, 15, 171], "paramet": [14, 15, 31, 33, 36, 40, 163, 171], "tune": [14, 15, 31, 33, 36, 40, 171], "comput": [16, 21, 24, 27, 34, 37, 41, 44, 46, 164], "time": [16, 21, 24, 27, 34, 37, 41, 44, 46, 164], "pariti": [18, 20, 29, 163, 175], "contribut": [18, 19, 29, 30, 175], "shrinkag": 20, "diversif": [22, 23, 45, 175], "distribution": [25, 26, 45, 175], "robust": [25, 26, 45, 175], "hierarch": [28, 29, 30, 45, 175], "nco": [28, 33, 45], "dendrogram": [29, 30, 32], "linkag": [29, 30, 32], "method": [29, 30, 32, 177], "composit": [29, 30, 32, 171], "summari": 29, "equal": [30, 175], "hrp": 31, "v": 31, "herc": 31, "combinatori": [31, 33, 36, 39, 163, 174], "purg": [31, 33, 36, 39, 163, 174], "cross": [31, 33, 36, 39, 163, 174], "valid": [31, 33, 36, 39, 163, 174], "distribut": [31, 33, 36, 39], "nest": [32, 163, 175], "cv": 33, "stack": [36, 175], "drop": 39, "highli": 39, "correl": 39, "asset": 39, "pipelin": [39, 40, 163], "best": 40, "perform": 40, "prepar": [42, 45, 167], "invest": 43, "horizon": 43, "price": 43, "return": [43, 163, 167, 170], "exampl": [45, 167], "hierarchicalclust": 47, "linkagemethod": 48, "load_factors_dataset": 49, "load_ftse100_dataset": 50, "load_nasdaq_dataset": 51, "load_sp500_dataset": 52, "load_sp500_index": 53, "basedist": 54, "covariancedist": 55, "distancecorrel": 56, "kendalldist": 57, "mutualinform": 58, "pearsondist": 59, "spearmandist": 60, "basemeasur": 61, "extrariskmeasur": 62, "perfmeasur": 63, "ratiomeasur": 64, "riskmeasur": 65, "average_drawdown": 66, "drawdown_at_risk": 69, "edar": 70, "entropic_risk_measur": 71, "evar": 72, "first_lower_partial_mo": 73, "fourth_central_mo": 74, "fourth_lower_partial_mo": 75, "get_cumulative_return": 76, "get_drawdown": 77, "gini_mean_differ": 78, "max_drawdown": 79, "mean_absolute_devi": 81, "owa_gmd_weight": 82, "semi_devi": 83, "semi_vari": 84, "standard_devi": 85, "third_central_mo": 86, "ulcer_index": 87, "value_at_risk": 88, "worst_real": 90, "make_scor": 91, "basecombinatorialcv": 92, "combinatorialpurgedcv": 93, "walkforward": 94, "cross_val_predict": 95, "basecovari": 96, "basemu": 97, "denoisecovari": 98, "detonecovari": 99, "ewcovari": 100, "ewmu": 101, "empiricalcovari": 102, "empiricalmu": 103, "equilibriummu": 104, "gerbercovari": 105, "graphicallassocv": 106, "ledoitwolf": 107, "oa": 108, "shrunkcovari": 109, "shrunkmu": 110, "shrunkmumethod": 111, "basecomposit": 112, "basehierarchicaloptim": 113, "convexoptim": 114, "distributionallyrobustcvar": 115, "equalweight": 116, "hierarchicalequalriskcontribut": 117, "hierarchicalriskpar": 118, "inversevolatil": 119, "maximumdiversif": 120, "meanrisk": 121, "nestedclustersoptim": 122, "objectivefunct": 123, "random": [124, 163, 171], "riskbudget": 125, "stackingoptim": 126, "baseportfolio": 128, "multiperiodportfolio": 129, "dropcorrel": 131, "selectkextrem": 132, "selectnondomin": 133, "prices_to_return": 134, "baseloadingmatrix": 135, "baseprior": 136, "blacklitterman": 137, "empiricalprior": 138, "factormodel": 139, "loadingmatrixregress": 140, "priormodel": 141, "basecovarianceuncertaintyset": 142, "basemuuncertaintyset": 143, "bootstrapcovarianceuncertaintyset": 144, "bootstrapmuuncertaintyset": 145, "empiricalcovarianceuncertaintyset": 146, "empiricalmuuncertaintyset": 147, "uncertaintyset": 148, "nbinsmethod": 149, "assert_is_dist": 150, "assert_is_squar": 151, "assert_is_symmetr": 152, "commutation_matrix": 153, "compute_optimal_n_clust": 154, "corr_to_cov": 155, "cov_nearest": 156, "cov_to_corr": 157, "is_cholesky_dec": 158, "n_bins_freedman": 159, "n_bins_knuth": 160, "rand_weight": 161, "rand_weights_dirichlet": 162, "instal": [163, 173], "kei": 163, "concept": 163, "avail": 163, "quickstart": 163, "import": 163, "train": 163, "test": 163, "split": 163, "fit": 163, "sortino": 163, "denois": 163, "shrunk": 163, "expect": [163, 170], "gerber": 163, "parallel": [163, 171], "search": [163, 171], "norm": 163, "grid": [163, 171], "embed": 163, "deton": 163, "k": 163, "fold": 163, "recognit": 163, "citat": 163, "logarithm": 167, "pitfal": 167, "The": 167, "correct": 167, "approach": 167, "stock": 167, "In": 167, "exhaust": 171, "tip": 171, "specifi": 171, "an": 171, "object": 171, "space": 171, "user": 172, "guid": 172, "alloc": 175, "combin": [175, 179], "custom": 175, "worst": 175, "case": 175, "go": 175, "further": 175, "attribut": 177, "multipl": 179}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"API Reference": [[0, "api-reference"]], "skfolio.measures: Measures": [[0, "module-skfolio.measures"]], "Base Classe": [[0, "base-classe"], [0, "id1"]], "Classes": [[0, "classes"], [0, "id2"], [0, "id3"], [0, "id4"], [0, "id5"], [0, "id6"], [0, "id7"], [0, "id8"], [0, "id10"], [0, "id12"], [0, "id15"], [0, "id16"], [0, "id18"], [0, "id19"], [0, "id21"]], "Functions": [[0, "functions"], [0, "id22"], [0, "id23"], [0, "id24"], [0, "id25"], [0, "id26"]], "skfolio.portfolio: Portfolio": [[0, "module-skfolio.portfolio"]], "skfolio.population: Population": [[0, "module-skfolio.population"]], "skfolio.optimization.naive: Naive Optimization Estimators": [[0, "module-skfolio.optimization.naive"]], "skfolio.optimization.convex: Convex Optimization Estimators": [[0, "module-skfolio.optimization.convex"]], "Enum": [[0, "enum"]], "skfolio.optimization.cluster: Clustering Optimization Estimators": [[0, "module-skfolio.optimization.cluster"]], "skfolio.optimization.ensemble: Ensemble Optimization Estimators": [[0, "module-skfolio.optimization.ensemble"]], "skfolio.prior: Prior Estimators": [[0, "module-skfolio"]], "Model Dataclass": [[0, "model-dataclass"], [0, "id17"]], "Base Class": [[0, "base-class"], [0, "id9"], [0, "id11"], [0, "id14"]], "Loading Matrix Classes for Factor Models": [[0, "loading-matrix-classes-for-factor-models"]], "skfolio.moments.mu: Mu Estimators": [[0, "module-0"]], "skfolio.moments.covariance: Covariance Estimators": [[0, "module-1"]], "skfolio.distance: Distance Estimators": [[0, "module-2"]], "skfolio.cluster: Cluster Estimators": [[0, "module-3"]], "skfolio.uncertainty_set: Uncertainty set Estimators": [[0, "module-4"]], "Base Classes": [[0, "base-classes"], [0, "id20"]], "skfolio.pre_selection: Pre-selection Transformers": [[0, "module-5"]], "skfolio.model_selection: Model Selection": [[0, "module-6"]], "skfolio.metrics: Metrics": [[0, "module-7"]], "skfolio.datasets: Datasets": [[0, "skfolio-datasets-datasets"]], "skfolio.preprocessing: Preprocessing": [[0, "skfolio-preprocessing-preprocessing"]], "skfolio.utils.stats: Stats": [[0, "skfolio-utils-stats-stats"]], "Mean-Risk": [[1, "mean-risk"], [45, "mean-risk"]], "Tracking Error": [[2, "tracking-error"]], "Data": [[2, "data"], [3, "data"], [4, "data"], [5, "data"], [6, "data"], [7, "data"], [8, "data"], [9, "data"], [10, "data"], [11, "data"], [12, "data"], [13, "data"], [14, "data"], [15, "data"], [18, "data"], [19, "data"], [20, "data"], [23, "data"], [26, "data"], [29, "data"], [30, "data"], [31, "data"], [32, "data"], [33, "data"], [36, "data"], [39, "data"], [40, "data"]], "Model": [[2, "model"], [3, "model"], [7, "model"], [8, "model"], [9, "model"], [10, "model"], [11, "model"], [12, "model"], [13, "model"], [18, "model"], [19, "model"], [20, "model"], [23, "model"], [26, "model"], [29, "model"], [30, "model"], [31, "model"], [32, "model"], [33, "model"], [39, "model"], [40, "model"], [43, "model"]], "Prediction": [[2, "prediction"], [3, "prediction"], [4, "prediction"], [5, "prediction"], [6, "prediction"], [7, "prediction"], [8, "prediction"], [9, "prediction"], [14, "prediction"], [18, "prediction"], [19, "prediction"], [20, "prediction"], [23, "prediction"], [26, "prediction"], [29, "prediction"], [30, "prediction"], [31, "prediction"], [32, "prediction"], [33, "prediction"], [36, "prediction"], [39, "prediction"], [40, "prediction"]], "Empirical Prior": [[3, "empirical-prior"], [179, "empirical-prior"]], "Benchmark": [[3, "benchmark"], [36, "benchmark"]], "Black & Litterman": [[4, "black-litterman"], [179, "black-litterman"]], "Analyst views": [[4, "analyst-views"], [6, "analyst-views"]], "Black & Litterman Model": [[4, "black-litterman-model"], [163, "black-litterman-model"]], "Empirical Model": [[4, "empirical-model"], [5, "empirical-model"]], "Factor Model": [[5, "factor-model"], [5, "id1"], [163, "factor-model"], [179, "factor-model"]], "Factor Analysis": [[5, "factor-analysis"]], "Black & Litterman Factor Model": [[6, "black-litterman-factor-model"], [6, "id1"], [163, "black-litterman-factor-model"]], "Maximum Sharpe Ratio": [[7, "maximum-sharpe-ratio"]], "Analysis": [[7, "analysis"], [8, "analysis"], [9, "analysis"], [10, "analysis"], [18, "analysis"], [19, "analysis"], [20, "analysis"], [23, "analysis"], [26, "analysis"], [31, "analysis"], [33, "analysis"], [36, "analysis"]], "Conclusion": [[7, "conclusion"], [8, "conclusion"], [33, "conclusion"], [36, "conclusion"]], "Minimum CVaR": [[8, "minimum-cvar"]], "Efficient Frontier": [[9, "efficient-frontier"], [14, "efficient-frontier"], [15, "efficient-frontier"]], "Mean-Variance-CDaR Surface": [[10, "mean-variance-cdar-surface"]], "Pareto Optimal Surface": [[10, "pareto-optimal-surface"]], "Weight Constraints": [[11, "weight-constraints"]], "Budget": [[11, "budget"]], "Lower and Upper Bounds on Weights": [[11, "lower-and-upper-bounds-on-weights"]], "Short and Long Position Constraints": [[11, "short-and-long-position-constraints"]], "Group and Linear Constraints": [[11, "group-and-linear-constraints"]], "Left and Right Inequalities": [[11, "left-and-right-inequalities"]], "Transaction Costs": [[12, "transaction-costs"]], "Transaction Cost": [[12, "transaction-cost"]], "Multi-period portfolio": [[12, "multi-period-portfolio"], [13, "multi-period-portfolio"]], "Management Fees": [[13, "management-fees"], [13, "id1"]], "L1 and L2 Regularization": [[14, "l1-and-l2-regularization"]], "Hyper-parameter Tuning": [[14, "hyper-parameter-tuning"]], "Uncertainty Set": [[15, "uncertainty-set"]], "Hyper-Parameter Tuning": [[15, "hyper-parameter-tuning"]], "Computation times": [[16, "computation-times"], [21, "computation-times"], [24, "computation-times"], [27, "computation-times"], [34, "computation-times"], [37, "computation-times"], [41, "computation-times"], [44, "computation-times"], [46, "computation-times"], [164, "computation-times"]], "Risk Budgeting": [[17, "risk-budgeting"], [45, "risk-budgeting"], [175, "risk-budgeting"]], "Risk Parity - Variance": [[18, "risk-parity-variance"]], "Risk Contribution Analysis": [[18, "risk-contribution-analysis"], [19, "risk-contribution-analysis"]], "Risk Budgeting - CVaR": [[19, "risk-budgeting-cvar"]], "Risk Budget": [[19, "risk-budget"]], "Risk Parity - Covariance shrinkage": [[20, "risk-parity-covariance-shrinkage"]], "Maximum Diversification": [[22, "maximum-diversification"], [23, "maximum-diversification"], [45, "maximum-diversification"], [175, "maximum-diversification"]], "Diversification Analysis": [[23, "diversification-analysis"]], "Distributionally Robust CVaR": [[25, "distributionally-robust-cvar"], [26, "distributionally-robust-cvar"], [45, "distributionally-robust-cvar"], [175, "distributionally-robust-cvar"]], "Hierarchical Clustering and NCO": [[28, "hierarchical-clustering-and-nco"], [45, "hierarchical-clustering-and-nco"]], "Hierarchical Risk Parity - CVaR": [[29, "hierarchical-risk-parity-cvar"]], "Risk Contribution": [[29, "risk-contribution"], [30, "risk-contribution"]], "Dendrogram": [[29, "dendrogram"], [30, "dendrogram"], [32, "dendrogram"]], "Linkage Methods": [[29, "linkage-methods"], [30, "linkage-methods"], [32, "linkage-methods"]], "Distance Estimator": [[29, "distance-estimator"], [30, "distance-estimator"], [32, "distance-estimator"], [169, "distance-estimator"]], "Prior Estimator": [[29, "prior-estimator"], [175, "prior-estimator"], [179, "prior-estimator"]], "Composition": [[29, "composition"], [30, "composition"], [32, "composition"]], "Summary": [[29, "summary"]], "Hierarchical Equal Risk Contribution - CDaR": [[30, "hierarchical-equal-risk-contribution-cdar"]], "HRP vs HERC": [[31, "hrp-vs-herc"]], "Parameter Tuning": [[31, "parameter-tuning"], [33, "parameter-tuning"], [36, "parameter-tuning"], [40, "parameter-tuning"]], "Combinatorial Purged Cross-Validation": [[31, "combinatorial-purged-cross-validation"], [33, "combinatorial-purged-cross-validation"], [36, "combinatorial-purged-cross-validation"], [39, "combinatorial-purged-cross-validation"], [163, "combinatorial-purged-cross-validation"], [174, "combinatorial-purged-cross-validation"]], "Distribution": [[31, "distribution"], [33, "distribution"], [36, "distribution"], [39, "distribution"]], "Nested Clusters Optimization": [[32, "nested-clusters-optimization"], [175, "nested-clusters-optimization"]], "Clustering Estimator": [[32, "clustering-estimator"]], "NCO - Combinatorial Purged CV": [[33, "nco-combinatorial-purged-cv"]], "Ensemble Optimizations": [[35, "ensemble-optimizations"], [45, "ensemble-optimizations"]], "Stacking Optimization": [[36, "stacking-optimization"], [175, "stacking-optimization"]], "Stacking Model": [[36, "stacking-model"]], "Pre-selection": [[38, "pre-selection"], [45, "pre-selection"]], "Drop Highly Correlated Assets": [[39, "drop-highly-correlated-assets"]], "Pipeline": [[39, "pipeline"], [40, "pipeline"]], "Select Best Performers": [[40, "select-best-performers"]], "Data Preparation": [[42, "data-preparation"], [45, "data-preparation"], [167, "data-preparation"]], "Investment Horizon": [[43, "investment-horizon"]], "Prices": [[43, "prices"]], "Linear Returns": [[43, "linear-returns"]], "Examples": [[45, "examples"]], "skfolio.cluster.HierarchicalClustering": [[47, "skfolio-cluster-hierarchicalclustering"]], "skfolio.cluster.LinkageMethod": [[48, "skfolio-cluster-linkagemethod"]], "skfolio.datasets.load_factors_dataset": [[49, "skfolio-datasets-load-factors-dataset"]], "skfolio.datasets.load_ftse100_dataset": [[50, "skfolio-datasets-load-ftse100-dataset"]], "skfolio.datasets.load_nasdaq_dataset": [[51, "skfolio-datasets-load-nasdaq-dataset"]], "skfolio.datasets.load_sp500_dataset": [[52, "skfolio-datasets-load-sp500-dataset"]], "skfolio.datasets.load_sp500_index": [[53, "skfolio-datasets-load-sp500-index"]], "skfolio.distance.BaseDistance": [[54, "skfolio-distance-basedistance"]], "skfolio.distance.CovarianceDistance": [[55, "skfolio-distance-covariancedistance"]], "skfolio.distance.DistanceCorrelation": [[56, "skfolio-distance-distancecorrelation"]], "skfolio.distance.KendallDistance": [[57, "skfolio-distance-kendalldistance"]], "skfolio.distance.MutualInformation": [[58, "skfolio-distance-mutualinformation"]], "skfolio.distance.PearsonDistance": [[59, "skfolio-distance-pearsondistance"]], "skfolio.distance.SpearmanDistance": [[60, "skfolio-distance-spearmandistance"]], "skfolio.measures.BaseMeasure": [[61, "skfolio-measures-basemeasure"]], "skfolio.measures.ExtraRiskMeasure": [[62, "skfolio-measures-extrariskmeasure"]], "skfolio.measures.PerfMeasure": [[63, "skfolio-measures-perfmeasure"]], "skfolio.measures.RatioMeasure": [[64, "skfolio-measures-ratiomeasure"]], "skfolio.measures.RiskMeasure": [[65, "skfolio-measures-riskmeasure"]], "skfolio.measures.average_drawdown": [[66, "skfolio-measures-average-drawdown"]], "skfolio.measures.cdar": [[67, "skfolio-measures-cdar"]], "skfolio.measures.cvar": [[68, "skfolio-measures-cvar"]], "skfolio.measures.drawdown_at_risk": [[69, "skfolio-measures-drawdown-at-risk"]], "skfolio.measures.edar": [[70, "skfolio-measures-edar"]], "skfolio.measures.entropic_risk_measure": [[71, "skfolio-measures-entropic-risk-measure"]], "skfolio.measures.evar": [[72, "skfolio-measures-evar"]], "skfolio.measures.first_lower_partial_moment": [[73, "skfolio-measures-first-lower-partial-moment"]], "skfolio.measures.fourth_central_moment": [[74, "skfolio-measures-fourth-central-moment"]], "skfolio.measures.fourth_lower_partial_moment": [[75, "skfolio-measures-fourth-lower-partial-moment"]], "skfolio.measures.get_cumulative_returns": [[76, "skfolio-measures-get-cumulative-returns"]], "skfolio.measures.get_drawdowns": [[77, "skfolio-measures-get-drawdowns"]], "skfolio.measures.gini_mean_difference": [[78, "skfolio-measures-gini-mean-difference"]], "skfolio.measures.max_drawdown": [[79, "skfolio-measures-max-drawdown"]], "skfolio.measures.mean": [[80, "skfolio-measures-mean"]], "skfolio.measures.mean_absolute_deviation": [[81, "skfolio-measures-mean-absolute-deviation"]], "skfolio.measures.owa_gmd_weights": [[82, "skfolio-measures-owa-gmd-weights"]], "skfolio.measures.semi_deviation": [[83, "skfolio-measures-semi-deviation"]], "skfolio.measures.semi_variance": [[84, "skfolio-measures-semi-variance"]], "skfolio.measures.standard_deviation": [[85, "skfolio-measures-standard-deviation"]], "skfolio.measures.third_central_moment": [[86, "skfolio-measures-third-central-moment"]], "skfolio.measures.ulcer_index": [[87, "skfolio-measures-ulcer-index"]], "skfolio.measures.value_at_risk": [[88, "skfolio-measures-value-at-risk"]], "skfolio.measures.variance": [[89, "skfolio-measures-variance"]], "skfolio.measures.worst_realization": [[90, "skfolio-measures-worst-realization"]], "skfolio.metrics.make_scorer": [[91, "skfolio-metrics-make-scorer"]], "skfolio.model_selection.BaseCombinatorialCV": [[92, "skfolio-model-selection-basecombinatorialcv"]], "skfolio.model_selection.CombinatorialPurgedCV": [[93, "skfolio-model-selection-combinatorialpurgedcv"]], "skfolio.model_selection.WalkForward": [[94, "skfolio-model-selection-walkforward"]], "skfolio.model_selection.cross_val_predict": [[95, "skfolio-model-selection-cross-val-predict"]], "skfolio.moments.BaseCovariance": [[96, "skfolio-moments-basecovariance"]], "skfolio.moments.BaseMu": [[97, "skfolio-moments-basemu"]], "skfolio.moments.DenoiseCovariance": [[98, "skfolio-moments-denoisecovariance"]], "skfolio.moments.DetoneCovariance": [[99, "skfolio-moments-detonecovariance"]], "skfolio.moments.EWCovariance": [[100, "skfolio-moments-ewcovariance"]], "skfolio.moments.EWMu": [[101, "skfolio-moments-ewmu"]], "skfolio.moments.EmpiricalCovariance": [[102, "skfolio-moments-empiricalcovariance"]], "skfolio.moments.EmpiricalMu": [[103, "skfolio-moments-empiricalmu"]], "skfolio.moments.EquilibriumMu": [[104, "skfolio-moments-equilibriummu"]], "skfolio.moments.GerberCovariance": [[105, "skfolio-moments-gerbercovariance"]], "skfolio.moments.GraphicalLassoCV": [[106, "skfolio-moments-graphicallassocv"]], "skfolio.moments.LedoitWolf": [[107, "skfolio-moments-ledoitwolf"]], "skfolio.moments.OAS": [[108, "skfolio-moments-oas"]], "skfolio.moments.ShrunkCovariance": [[109, "skfolio-moments-shrunkcovariance"]], "skfolio.moments.ShrunkMu": [[110, "skfolio-moments-shrunkmu"]], "skfolio.moments.ShrunkMuMethods": [[111, "skfolio-moments-shrunkmumethods"]], "skfolio.optimization.BaseComposition": [[112, "skfolio-optimization-basecomposition"]], "skfolio.optimization.BaseHierarchicalOptimization": [[113, "skfolio-optimization-basehierarchicaloptimization"]], "skfolio.optimization.ConvexOptimization": [[114, "skfolio-optimization-convexoptimization"]], "skfolio.optimization.DistributionallyRobustCVaR": [[115, "skfolio-optimization-distributionallyrobustcvar"]], "skfolio.optimization.EqualWeighted": [[116, "skfolio-optimization-equalweighted"]], "skfolio.optimization.HierarchicalEqualRiskContribution": [[117, "skfolio-optimization-hierarchicalequalriskcontribution"]], "skfolio.optimization.HierarchicalRiskParity": [[118, "skfolio-optimization-hierarchicalriskparity"]], "skfolio.optimization.InverseVolatility": [[119, "skfolio-optimization-inversevolatility"]], "skfolio.optimization.MaximumDiversification": [[120, "skfolio-optimization-maximumdiversification"]], "skfolio.optimization.MeanRisk": [[121, "skfolio-optimization-meanrisk"]], "skfolio.optimization.NestedClustersOptimization": [[122, "skfolio-optimization-nestedclustersoptimization"]], "skfolio.optimization.ObjectiveFunction": [[123, "skfolio-optimization-objectivefunction"]], "skfolio.optimization.Random": [[124, "skfolio-optimization-random"]], "skfolio.optimization.RiskBudgeting": [[125, "skfolio-optimization-riskbudgeting"]], "skfolio.optimization.StackingOptimization": [[126, "skfolio-optimization-stackingoptimization"]], "skfolio.population.Population": [[127, "skfolio-population-population"]], "skfolio.portfolio.BasePortfolio": [[128, "skfolio-portfolio-baseportfolio"]], "skfolio.portfolio.MultiPeriodPortfolio": [[129, "skfolio-portfolio-multiperiodportfolio"]], "skfolio.portfolio.Portfolio": [[130, "skfolio-portfolio-portfolio"]], "skfolio.pre_selection.DropCorrelated": [[131, "skfolio-pre-selection-dropcorrelated"]], "skfolio.pre_selection.SelectKExtremes": [[132, "skfolio-pre-selection-selectkextremes"]], "skfolio.pre_selection.SelectNonDominated": [[133, "skfolio-pre-selection-selectnondominated"]], "skfolio.preprocessing.prices_to_returns": [[134, "skfolio-preprocessing-prices-to-returns"]], "skfolio.prior.BaseLoadingMatrix": [[135, "skfolio-prior-baseloadingmatrix"]], "skfolio.prior.BasePrior": [[136, "skfolio-prior-baseprior"]], "skfolio.prior.BlackLitterman": [[137, "skfolio-prior-blacklitterman"]], "skfolio.prior.EmpiricalPrior": [[138, "skfolio-prior-empiricalprior"]], "skfolio.prior.FactorModel": [[139, "skfolio-prior-factormodel"]], "skfolio.prior.LoadingMatrixRegression": [[140, "skfolio-prior-loadingmatrixregression"]], "skfolio.prior.PriorModel": [[141, "skfolio-prior-priormodel"]], "skfolio.uncertainty_set.BaseCovarianceUncertaintySet": [[142, "skfolio-uncertainty-set-basecovarianceuncertaintyset"]], "skfolio.uncertainty_set.BaseMuUncertaintySet": [[143, "skfolio-uncertainty-set-basemuuncertaintyset"]], "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet": [[144, "skfolio-uncertainty-set-bootstrapcovarianceuncertaintyset"]], "skfolio.uncertainty_set.BootstrapMuUncertaintySet": [[145, "skfolio-uncertainty-set-bootstrapmuuncertaintyset"]], "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet": [[146, "skfolio-uncertainty-set-empiricalcovarianceuncertaintyset"]], "skfolio.uncertainty_set.EmpiricalMuUncertaintySet": [[147, "skfolio-uncertainty-set-empiricalmuuncertaintyset"]], "skfolio.uncertainty_set.UncertaintySet": [[148, "skfolio-uncertainty-set-uncertaintyset"]], "skfolio.utils.stats.NBinsMethod": [[149, "skfolio-utils-stats-nbinsmethod"]], "skfolio.utils.stats.assert_is_distance": [[150, "skfolio-utils-stats-assert-is-distance"]], "skfolio.utils.stats.assert_is_square": [[151, "skfolio-utils-stats-assert-is-square"]], "skfolio.utils.stats.assert_is_symmetric": [[152, "skfolio-utils-stats-assert-is-symmetric"]], "skfolio.utils.stats.commutation_matrix": [[153, "skfolio-utils-stats-commutation-matrix"]], "skfolio.utils.stats.compute_optimal_n_clusters": [[154, "skfolio-utils-stats-compute-optimal-n-clusters"]], "skfolio.utils.stats.corr_to_cov": [[155, "skfolio-utils-stats-corr-to-cov"]], "skfolio.utils.stats.cov_nearest": [[156, "skfolio-utils-stats-cov-nearest"]], "skfolio.utils.stats.cov_to_corr": [[157, "skfolio-utils-stats-cov-to-corr"]], "skfolio.utils.stats.is_cholesky_dec": [[158, "skfolio-utils-stats-is-cholesky-dec"]], "skfolio.utils.stats.n_bins_freedman": [[159, "skfolio-utils-stats-n-bins-freedman"]], "skfolio.utils.stats.n_bins_knuth": [[160, "skfolio-utils-stats-n-bins-knuth"]], "skfolio.utils.stats.rand_weights": [[161, "skfolio-utils-stats-rand-weights"]], "skfolio.utils.stats.rand_weights_dirichlet": [[162, "skfolio-utils-stats-rand-weights-dirichlet"]], "skfolio": [[163, "skfolio"]], "Installation": [[163, "installation"], [173, "installation"]], "Key Concepts": [[163, "key-concepts"]], "Available models": [[163, "available-models"]], "Quickstart": [[163, "quickstart"]], "Imports": [[163, "imports"]], "Load Dataset": [[163, "load-dataset"]], "Train/Test split": [[163, "train-test-split"]], "Minimum Variance": [[163, "minimum-variance"]], "Fit on training set": [[163, "fit-on-training-set"]], "Predict on test set": [[163, "predict-on-test-set"]], "Maximum Sortino Ratio": [[163, "maximum-sortino-ratio"]], "Denoised Covariance & Shrunk Expected Returns": [[163, "denoised-covariance-shrunk-expected-returns"]], "Uncertainty Set on Expected Returns": [[163, "uncertainty-set-on-expected-returns"]], "Weight Constraints & Transaction Costs": [[163, "weight-constraints-transaction-costs"]], "Risk Parity on CVaR": [[163, "risk-parity-on-cvar"]], "Risk Parity & Gerber Covariance": [[163, "risk-parity-gerber-covariance"]], "Nested Cluster Optimization with cross-validation and parallelization": [[163, "nested-cluster-optimization-with-cross-validation-and-parallelization"]], "Randomized Search of the L2 Norm": [[163, "randomized-search-of-the-l2-norm"]], "Grid Search on embedded parameters": [[163, "grid-search-on-embedded-parameters"]], "Factor Model & Covariance Detoning": [[163, "factor-model-covariance-detoning"]], "Pre-Selection Pipeline": [[163, "pre-selection-pipeline"]], "K-fold Cross-Validation": [[163, "k-fold-cross-validation"]], "Recognition": [[163, "recognition"]], "Citation": [[163, "citation"]], "Clustering Estimators": [[165, "clustering-estimators"]], "Covariance Estimator": [[166, "covariance-estimator"]], "Linear return": [[167, "linear-return"]], "Logarithmic return": [[167, "logarithmic-return"]], "Pitfall in Portfolio Optimization": [[167, "pitfall-in-portfolio-optimization"]], "The correct approach": [[167, "the-correct-approach"]], "Example for stocks": [[167, "example-for-stocks"]], "In skfolio": [[167, "in-skfolio"]], "Datasets": [[168, "datasets"]], "Expected Return Estimator": [[170, "expected-return-estimator"]], "Hyper-Parameters Tuning": [[171, "hyper-parameters-tuning"]], "Exhaustive Grid Search": [[171, "exhaustive-grid-search"]], "Randomized Parameter Optimization": [[171, "randomized-parameter-optimization"]], "Tips for Parameter Search": [[171, "tips-for-parameter-search"]], "Specifying an Objective Metric": [[171, "specifying-an-objective-metric"]], "Composite Estimators and Parameter Spaces": [[171, "composite-estimators-and-parameter-spaces"]], "Parallelism": [[171, "parallelism"]], "User Guide": [[172, "user-guide"]], "Model Selection": [[174, "model-selection"]], "Cross-Validation Prediction": [[174, "cross-validation-prediction"]], "Optimization": [[175, "optimization"]], "Naive Allocation": [[175, "naive-allocation"]], "Mean-Risk Optimization": [[175, "mean-risk-optimization"]], "Combining Prior Estimators": [[175, "combining-prior-estimators"]], "Custom Estimator": [[175, "custom-estimator"]], "Worst-Case Optimization": [[175, "worst-case-optimization"]], "Going Further": [[175, "going-further"]], "Hierarchical Risk Parity": [[175, "hierarchical-risk-parity"]], "Hierarchical Equal Risk Contribution": [[175, "hierarchical-equal-risk-contribution"]], "Population": [[176, "population"]], "Portfolio": [[177, "portfolio"], [177, "id2"]], "Base Portfolio": [[177, "base-portfolio"]], "Attributes and Methods": [[177, "attributes-and-methods"], [177, "id3"]], "Multi Period Portfolio": [[177, "multi-period-portfolio"]], "Pre-Selection Transformers": [[178, "pre-selection-transformers"]], "Combining Multiple Prior Estimators": [[179, "combining-multiple-prior-estimators"]], "Uncertainty Set Estimator": [[180, "uncertainty-set-estimator"]]}, "indexentries": {"module": [[0, "module-0"], [0, "module-1"], [0, "module-2"], [0, "module-3"], [0, "module-4"], [0, "module-5"], [0, "module-6"], [0, "module-7"], [0, "module-skfolio"], [0, "module-skfolio.measures"], [0, "module-skfolio.optimization.cluster"], [0, "module-skfolio.optimization.convex"], [0, "module-skfolio.optimization.ensemble"], [0, "module-skfolio.optimization.naive"], [0, "module-skfolio.population"], [0, "module-skfolio.portfolio"]], "skfolio": [[0, "module-0"], [0, "module-1"], [0, "module-2"], [0, "module-3"], [0, "module-4"], [0, "module-5"], [0, "module-6"], [0, "module-7"], [0, "module-skfolio"]], "skfolio.measures": [[0, "module-skfolio.measures"]], "skfolio.optimization.cluster": [[0, "module-skfolio.optimization.cluster"]], "skfolio.optimization.convex": [[0, "module-skfolio.optimization.convex"]], "skfolio.optimization.ensemble": [[0, "module-skfolio.optimization.ensemble"]], "skfolio.optimization.naive": [[0, "module-skfolio.optimization.naive"]], "skfolio.population": [[0, "module-skfolio.population"]], "skfolio.portfolio": [[0, "module-skfolio.portfolio"]], "hierarchicalclustering (class in skfolio.cluster)": [[47, "skfolio.cluster.HierarchicalClustering"]], "fit() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.fit"]], "fit_predict() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.fit_predict"]], "get_metadata_routing() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.get_metadata_routing"]], "get_params() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.get_params"]], "plot_dendrogram() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.plot_dendrogram"]], "set_params() (skfolio.cluster.hierarchicalclustering method)": [[47, "skfolio.cluster.HierarchicalClustering.set_params"]], "linkagemethod (class in skfolio.cluster)": [[48, "skfolio.cluster.LinkageMethod"]], "load_factors_dataset() (in module skfolio.datasets)": [[49, "skfolio.datasets.load_factors_dataset"]], "load_ftse100_dataset() (in module skfolio.datasets)": [[50, "skfolio.datasets.load_ftse100_dataset"]], "load_nasdaq_dataset() (in module skfolio.datasets)": [[51, "skfolio.datasets.load_nasdaq_dataset"]], "load_sp500_dataset() (in module skfolio.datasets)": [[52, "skfolio.datasets.load_sp500_dataset"]], "load_sp500_index() (in module skfolio.datasets)": [[53, "skfolio.datasets.load_sp500_index"]], "basedistance (class in skfolio.distance)": [[54, "skfolio.distance.BaseDistance"]], "fit() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.fit"]], "get_metadata_routing() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.get_metadata_routing"]], "get_params() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.get_params"]], "set_params() (skfolio.distance.basedistance method)": [[54, "skfolio.distance.BaseDistance.set_params"]], "covariancedistance (class in skfolio.distance)": [[55, "skfolio.distance.CovarianceDistance"]], "fit() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.fit"]], "get_metadata_routing() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.get_metadata_routing"]], "get_params() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.get_params"]], "set_params() (skfolio.distance.covariancedistance method)": [[55, "skfolio.distance.CovarianceDistance.set_params"]], "distancecorrelation (class in skfolio.distance)": [[56, "skfolio.distance.DistanceCorrelation"]], "fit() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.fit"]], "get_metadata_routing() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.get_metadata_routing"]], "get_params() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.get_params"]], "set_params() (skfolio.distance.distancecorrelation method)": [[56, "skfolio.distance.DistanceCorrelation.set_params"]], "kendalldistance (class in skfolio.distance)": [[57, "skfolio.distance.KendallDistance"]], "fit() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.fit"]], "get_metadata_routing() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.get_metadata_routing"]], "get_params() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.get_params"]], "set_params() (skfolio.distance.kendalldistance method)": [[57, "skfolio.distance.KendallDistance.set_params"]], "mutualinformation (class in skfolio.distance)": [[58, "skfolio.distance.MutualInformation"]], "fit() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.fit"]], "get_metadata_routing() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.get_metadata_routing"]], "get_params() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.get_params"]], "set_params() (skfolio.distance.mutualinformation method)": [[58, "skfolio.distance.MutualInformation.set_params"]], "pearsondistance (class in skfolio.distance)": [[59, "skfolio.distance.PearsonDistance"]], "fit() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.fit"]], "get_metadata_routing() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.get_metadata_routing"]], "get_params() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.get_params"]], "set_params() (skfolio.distance.pearsondistance method)": [[59, "skfolio.distance.PearsonDistance.set_params"]], "spearmandistance (class in skfolio.distance)": [[60, "skfolio.distance.SpearmanDistance"]], "fit() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.fit"]], "get_metadata_routing() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.get_metadata_routing"]], "get_params() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.get_params"]], "set_params() (skfolio.distance.spearmandistance method)": [[60, "skfolio.distance.SpearmanDistance.set_params"]], "basemeasure (class in skfolio.measures)": [[61, "skfolio.measures.BaseMeasure"]], "extrariskmeasure (class in skfolio.measures)": [[62, "skfolio.measures.ExtraRiskMeasure"]], "perfmeasure (class in skfolio.measures)": [[63, "skfolio.measures.PerfMeasure"]], "ratiomeasure (class in skfolio.measures)": [[64, "skfolio.measures.RatioMeasure"]], "riskmeasure (class in skfolio.measures)": [[65, "skfolio.measures.RiskMeasure"]], "average_drawdown() (in module skfolio.measures)": [[66, "skfolio.measures.average_drawdown"]], "cdar() (in module skfolio.measures)": [[67, "skfolio.measures.cdar"]], "cvar() (in module skfolio.measures)": [[68, "skfolio.measures.cvar"]], "drawdown_at_risk() (in module skfolio.measures)": [[69, "skfolio.measures.drawdown_at_risk"]], "edar() (in module skfolio.measures)": [[70, "skfolio.measures.edar"]], "entropic_risk_measure() (in module skfolio.measures)": [[71, "skfolio.measures.entropic_risk_measure"]], "evar() (in module skfolio.measures)": [[72, "skfolio.measures.evar"]], "first_lower_partial_moment() (in module skfolio.measures)": [[73, "skfolio.measures.first_lower_partial_moment"]], "fourth_central_moment() (in module skfolio.measures)": [[74, "skfolio.measures.fourth_central_moment"]], "fourth_lower_partial_moment() (in module skfolio.measures)": [[75, "skfolio.measures.fourth_lower_partial_moment"]], "get_cumulative_returns() (in module skfolio.measures)": [[76, "skfolio.measures.get_cumulative_returns"]], "get_drawdowns() (in module skfolio.measures)": [[77, "skfolio.measures.get_drawdowns"]], "gini_mean_difference() (in module skfolio.measures)": [[78, "skfolio.measures.gini_mean_difference"]], "max_drawdown() (in module skfolio.measures)": [[79, "skfolio.measures.max_drawdown"]], "mean() (in module skfolio.measures)": [[80, "skfolio.measures.mean"]], "mean_absolute_deviation() (in module skfolio.measures)": [[81, "skfolio.measures.mean_absolute_deviation"]], "owa_gmd_weights() (in module skfolio.measures)": [[82, "skfolio.measures.owa_gmd_weights"]], "semi_deviation() (in module skfolio.measures)": [[83, "skfolio.measures.semi_deviation"]], "semi_variance() (in module skfolio.measures)": [[84, "skfolio.measures.semi_variance"]], "standard_deviation() (in module skfolio.measures)": [[85, "skfolio.measures.standard_deviation"]], "third_central_moment() (in module skfolio.measures)": [[86, "skfolio.measures.third_central_moment"]], "ulcer_index() (in module skfolio.measures)": [[87, "skfolio.measures.ulcer_index"]], "value_at_risk() (in module skfolio.measures)": [[88, "skfolio.measures.value_at_risk"]], "variance() (in module skfolio.measures)": [[89, "skfolio.measures.variance"]], "worst_realization() (in module skfolio.measures)": [[90, "skfolio.measures.worst_realization"]], "make_scorer() (in module skfolio.metrics)": [[91, "skfolio.metrics.make_scorer"]], "basecombinatorialcv (class in skfolio.model_selection)": [[92, "skfolio.model_selection.BaseCombinatorialCV"]], "get_path_ids() (skfolio.model_selection.basecombinatorialcv method)": [[92, "skfolio.model_selection.BaseCombinatorialCV.get_path_ids"]], "combinatorialpurgedcv (class in skfolio.model_selection)": [[93, "skfolio.model_selection.CombinatorialPurgedCV"]], "binary_train_test_sets (skfolio.model_selection.combinatorialpurgedcv property)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.binary_train_test_sets"]], "get_path_ids() (skfolio.model_selection.combinatorialpurgedcv method)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.get_path_ids"]], "n_splits (skfolio.model_selection.combinatorialpurgedcv property)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.n_splits"]], "n_test_paths (skfolio.model_selection.combinatorialpurgedcv property)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.n_test_paths"]], "plot_train_test_folds() (skfolio.model_selection.combinatorialpurgedcv method)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.plot_train_test_folds"]], "plot_train_test_index() (skfolio.model_selection.combinatorialpurgedcv method)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.plot_train_test_index"]], "recombined_paths (skfolio.model_selection.combinatorialpurgedcv property)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.recombined_paths"]], "split() (skfolio.model_selection.combinatorialpurgedcv method)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.split"]], "test_set_index (skfolio.model_selection.combinatorialpurgedcv property)": [[93, "skfolio.model_selection.CombinatorialPurgedCV.test_set_index"]], "walkforward (class in skfolio.model_selection)": [[94, "skfolio.model_selection.WalkForward"]], "get_metadata_routing() (skfolio.model_selection.walkforward method)": [[94, "skfolio.model_selection.WalkForward.get_metadata_routing"]], "get_n_splits() (skfolio.model_selection.walkforward method)": [[94, "skfolio.model_selection.WalkForward.get_n_splits"]], "split() (skfolio.model_selection.walkforward method)": [[94, "skfolio.model_selection.WalkForward.split"]], "cross_val_predict() (in module skfolio.model_selection)": [[95, "skfolio.model_selection.cross_val_predict"]], "basecovariance (class in skfolio.moments)": [[96, "skfolio.moments.BaseCovariance"]], "get_metadata_routing() (skfolio.moments.basecovariance method)": [[96, "skfolio.moments.BaseCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.basecovariance method)": [[96, "skfolio.moments.BaseCovariance.get_params"]], "set_params() (skfolio.moments.basecovariance method)": [[96, "skfolio.moments.BaseCovariance.set_params"]], "basemu (class in skfolio.moments)": [[97, "skfolio.moments.BaseMu"]], "get_metadata_routing() (skfolio.moments.basemu method)": [[97, "skfolio.moments.BaseMu.get_metadata_routing"]], "get_params() (skfolio.moments.basemu method)": [[97, "skfolio.moments.BaseMu.get_params"]], "set_params() (skfolio.moments.basemu method)": [[97, "skfolio.moments.BaseMu.set_params"]], "denoisecovariance (class in skfolio.moments)": [[98, "skfolio.moments.DenoiseCovariance"]], "fit() (skfolio.moments.denoisecovariance method)": [[98, "skfolio.moments.DenoiseCovariance.fit"]], "get_metadata_routing() (skfolio.moments.denoisecovariance method)": [[98, "skfolio.moments.DenoiseCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.denoisecovariance method)": [[98, "skfolio.moments.DenoiseCovariance.get_params"]], "set_params() (skfolio.moments.denoisecovariance method)": [[98, "skfolio.moments.DenoiseCovariance.set_params"]], "detonecovariance (class in skfolio.moments)": [[99, "skfolio.moments.DetoneCovariance"]], "fit() (skfolio.moments.detonecovariance method)": [[99, "skfolio.moments.DetoneCovariance.fit"]], "get_metadata_routing() (skfolio.moments.detonecovariance method)": [[99, "skfolio.moments.DetoneCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.detonecovariance method)": [[99, "skfolio.moments.DetoneCovariance.get_params"]], "set_params() (skfolio.moments.detonecovariance method)": [[99, "skfolio.moments.DetoneCovariance.set_params"]], "ewcovariance (class in skfolio.moments)": [[100, "skfolio.moments.EWCovariance"]], "fit() (skfolio.moments.ewcovariance method)": [[100, "skfolio.moments.EWCovariance.fit"]], "get_metadata_routing() (skfolio.moments.ewcovariance method)": [[100, "skfolio.moments.EWCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.ewcovariance method)": [[100, "skfolio.moments.EWCovariance.get_params"]], "set_params() (skfolio.moments.ewcovariance method)": [[100, "skfolio.moments.EWCovariance.set_params"]], "ewmu (class in skfolio.moments)": [[101, "skfolio.moments.EWMu"]], "fit() (skfolio.moments.ewmu method)": [[101, "skfolio.moments.EWMu.fit"]], "get_metadata_routing() (skfolio.moments.ewmu method)": [[101, "skfolio.moments.EWMu.get_metadata_routing"]], "get_params() (skfolio.moments.ewmu method)": [[101, "skfolio.moments.EWMu.get_params"]], "set_params() (skfolio.moments.ewmu method)": [[101, "skfolio.moments.EWMu.set_params"]], "empiricalcovariance (class in skfolio.moments)": [[102, "skfolio.moments.EmpiricalCovariance"]], "fit() (skfolio.moments.empiricalcovariance method)": [[102, "skfolio.moments.EmpiricalCovariance.fit"]], "get_metadata_routing() (skfolio.moments.empiricalcovariance method)": [[102, "skfolio.moments.EmpiricalCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.empiricalcovariance method)": [[102, "skfolio.moments.EmpiricalCovariance.get_params"]], "set_params() (skfolio.moments.empiricalcovariance method)": [[102, "skfolio.moments.EmpiricalCovariance.set_params"]], "empiricalmu (class in skfolio.moments)": [[103, "skfolio.moments.EmpiricalMu"]], "fit() (skfolio.moments.empiricalmu method)": [[103, "skfolio.moments.EmpiricalMu.fit"]], "get_metadata_routing() (skfolio.moments.empiricalmu method)": [[103, "skfolio.moments.EmpiricalMu.get_metadata_routing"]], "get_params() (skfolio.moments.empiricalmu method)": [[103, "skfolio.moments.EmpiricalMu.get_params"]], "set_params() (skfolio.moments.empiricalmu method)": [[103, "skfolio.moments.EmpiricalMu.set_params"]], "equilibriummu (class in skfolio.moments)": [[104, "skfolio.moments.EquilibriumMu"]], "fit() (skfolio.moments.equilibriummu method)": [[104, "skfolio.moments.EquilibriumMu.fit"]], "get_metadata_routing() (skfolio.moments.equilibriummu method)": [[104, "skfolio.moments.EquilibriumMu.get_metadata_routing"]], "get_params() (skfolio.moments.equilibriummu method)": [[104, "skfolio.moments.EquilibriumMu.get_params"]], "set_params() (skfolio.moments.equilibriummu method)": [[104, "skfolio.moments.EquilibriumMu.set_params"]], "gerbercovariance (class in skfolio.moments)": [[105, "skfolio.moments.GerberCovariance"]], "fit() (skfolio.moments.gerbercovariance method)": [[105, "skfolio.moments.GerberCovariance.fit"]], "get_metadata_routing() (skfolio.moments.gerbercovariance method)": [[105, "skfolio.moments.GerberCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.gerbercovariance method)": [[105, "skfolio.moments.GerberCovariance.get_params"]], "set_params() (skfolio.moments.gerbercovariance method)": [[105, "skfolio.moments.GerberCovariance.set_params"]], "graphicallassocv (class in skfolio.moments)": [[106, "skfolio.moments.GraphicalLassoCV"]], "error_norm() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.error_norm"]], "fit() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.fit"]], "get_metadata_routing() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.get_metadata_routing"]], "get_params() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.get_params"]], "get_precision() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.get_precision"]], "mahalanobis() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.mahalanobis"]], "score() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.score"]], "set_params() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.set_params"]], "set_score_request() (skfolio.moments.graphicallassocv method)": [[106, "skfolio.moments.GraphicalLassoCV.set_score_request"]], "ledoitwolf (class in skfolio.moments)": [[107, "skfolio.moments.LedoitWolf"]], "error_norm() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.error_norm"]], "fit() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.fit"]], "get_metadata_routing() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.get_metadata_routing"]], "get_params() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.get_params"]], "get_precision() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.get_precision"]], "mahalanobis() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.mahalanobis"]], "score() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.score"]], "set_params() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.set_params"]], "set_score_request() (skfolio.moments.ledoitwolf method)": [[107, "skfolio.moments.LedoitWolf.set_score_request"]], "oas (class in skfolio.moments)": [[108, "skfolio.moments.OAS"]], "error_norm() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.error_norm"]], "fit() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.fit"]], "get_metadata_routing() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.get_metadata_routing"]], "get_params() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.get_params"]], "get_precision() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.get_precision"]], "mahalanobis() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.mahalanobis"]], "score() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.score"]], "set_params() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.set_params"]], "set_score_request() (skfolio.moments.oas method)": [[108, "skfolio.moments.OAS.set_score_request"]], "shrunkcovariance (class in skfolio.moments)": [[109, "skfolio.moments.ShrunkCovariance"]], "error_norm() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.error_norm"]], "fit() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.fit"]], "get_metadata_routing() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.get_metadata_routing"]], "get_params() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.get_params"]], "get_precision() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.get_precision"]], "mahalanobis() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.mahalanobis"]], "score() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.score"]], "set_params() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.set_params"]], "set_score_request() (skfolio.moments.shrunkcovariance method)": [[109, "skfolio.moments.ShrunkCovariance.set_score_request"]], "shrunkmu (class in skfolio.moments)": [[110, "skfolio.moments.ShrunkMu"]], "fit() (skfolio.moments.shrunkmu method)": [[110, "skfolio.moments.ShrunkMu.fit"]], "get_metadata_routing() (skfolio.moments.shrunkmu method)": [[110, "skfolio.moments.ShrunkMu.get_metadata_routing"]], "get_params() (skfolio.moments.shrunkmu method)": [[110, "skfolio.moments.ShrunkMu.get_params"]], "set_params() (skfolio.moments.shrunkmu method)": [[110, "skfolio.moments.ShrunkMu.set_params"]], "shrunkmumethods (class in skfolio.moments)": [[111, "skfolio.moments.ShrunkMuMethods"]], "basecomposition (class in skfolio.optimization)": [[112, "skfolio.optimization.BaseComposition"]], "get_metadata_routing() (skfolio.optimization.basecomposition method)": [[112, "skfolio.optimization.BaseComposition.get_metadata_routing"]], "get_params() (skfolio.optimization.basecomposition method)": [[112, "skfolio.optimization.BaseComposition.get_params"]], "set_params() (skfolio.optimization.basecomposition method)": [[112, "skfolio.optimization.BaseComposition.set_params"]], "basehierarchicaloptimization (class in skfolio.optimization)": [[113, "skfolio.optimization.BaseHierarchicalOptimization"]], "fit_predict() (skfolio.optimization.basehierarchicaloptimization method)": [[113, "skfolio.optimization.BaseHierarchicalOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.basehierarchicaloptimization method)": [[113, "skfolio.optimization.BaseHierarchicalOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.basehierarchicaloptimization method)": [[113, "skfolio.optimization.BaseHierarchicalOptimization.get_params"]], "predict() (skfolio.optimization.basehierarchicaloptimization method)": [[113, "skfolio.optimization.BaseHierarchicalOptimization.predict"]], "score() (skfolio.optimization.basehierarchicaloptimization method)": [[113, "skfolio.optimization.BaseHierarchicalOptimization.score"]], "set_params() (skfolio.optimization.basehierarchicaloptimization method)": [[113, "skfolio.optimization.BaseHierarchicalOptimization.set_params"]], "convexoptimization (class in skfolio.optimization)": [[114, "skfolio.optimization.ConvexOptimization"]], "fit_predict() (skfolio.optimization.convexoptimization method)": [[114, "skfolio.optimization.ConvexOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.convexoptimization method)": [[114, "skfolio.optimization.ConvexOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.convexoptimization method)": [[114, "skfolio.optimization.ConvexOptimization.get_params"]], "predict() (skfolio.optimization.convexoptimization method)": [[114, "skfolio.optimization.ConvexOptimization.predict"]], "score() (skfolio.optimization.convexoptimization method)": [[114, "skfolio.optimization.ConvexOptimization.score"]], "set_params() (skfolio.optimization.convexoptimization method)": [[114, "skfolio.optimization.ConvexOptimization.set_params"]], "distributionallyrobustcvar (class in skfolio.optimization)": [[115, "skfolio.optimization.DistributionallyRobustCVaR"]], "fit() (skfolio.optimization.distributionallyrobustcvar method)": [[115, "skfolio.optimization.DistributionallyRobustCVaR.fit"]], "fit_predict() (skfolio.optimization.distributionallyrobustcvar method)": [[115, "skfolio.optimization.DistributionallyRobustCVaR.fit_predict"]], "get_metadata_routing() (skfolio.optimization.distributionallyrobustcvar method)": [[115, "skfolio.optimization.DistributionallyRobustCVaR.get_metadata_routing"]], "get_params() (skfolio.optimization.distributionallyrobustcvar method)": [[115, "skfolio.optimization.DistributionallyRobustCVaR.get_params"]], "predict() (skfolio.optimization.distributionallyrobustcvar method)": [[115, "skfolio.optimization.DistributionallyRobustCVaR.predict"]], "score() (skfolio.optimization.distributionallyrobustcvar method)": [[115, "skfolio.optimization.DistributionallyRobustCVaR.score"]], "set_params() (skfolio.optimization.distributionallyrobustcvar method)": [[115, "skfolio.optimization.DistributionallyRobustCVaR.set_params"]], "equalweighted (class in skfolio.optimization)": [[116, "skfolio.optimization.EqualWeighted"]], "fit() (skfolio.optimization.equalweighted method)": [[116, "skfolio.optimization.EqualWeighted.fit"]], "fit_predict() (skfolio.optimization.equalweighted method)": [[116, "skfolio.optimization.EqualWeighted.fit_predict"]], "get_metadata_routing() (skfolio.optimization.equalweighted method)": [[116, "skfolio.optimization.EqualWeighted.get_metadata_routing"]], "get_params() (skfolio.optimization.equalweighted method)": [[116, "skfolio.optimization.EqualWeighted.get_params"]], "predict() (skfolio.optimization.equalweighted method)": [[116, "skfolio.optimization.EqualWeighted.predict"]], "score() (skfolio.optimization.equalweighted method)": [[116, "skfolio.optimization.EqualWeighted.score"]], "set_params() (skfolio.optimization.equalweighted method)": [[116, "skfolio.optimization.EqualWeighted.set_params"]], "hierarchicalequalriskcontribution (class in skfolio.optimization)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution"]], "fit() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution.fit"]], "fit_predict() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution.fit_predict"]], "get_metadata_routing() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution.get_metadata_routing"]], "get_params() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution.get_params"]], "predict() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution.predict"]], "score() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution.score"]], "set_params() (skfolio.optimization.hierarchicalequalriskcontribution method)": [[117, "skfolio.optimization.HierarchicalEqualRiskContribution.set_params"]], "hierarchicalriskparity (class in skfolio.optimization)": [[118, "skfolio.optimization.HierarchicalRiskParity"]], "fit() (skfolio.optimization.hierarchicalriskparity method)": [[118, "skfolio.optimization.HierarchicalRiskParity.fit"]], "fit_predict() (skfolio.optimization.hierarchicalriskparity method)": [[118, "skfolio.optimization.HierarchicalRiskParity.fit_predict"]], "get_metadata_routing() (skfolio.optimization.hierarchicalriskparity method)": [[118, "skfolio.optimization.HierarchicalRiskParity.get_metadata_routing"]], "get_params() (skfolio.optimization.hierarchicalriskparity method)": [[118, "skfolio.optimization.HierarchicalRiskParity.get_params"]], "predict() (skfolio.optimization.hierarchicalriskparity method)": [[118, "skfolio.optimization.HierarchicalRiskParity.predict"]], "score() (skfolio.optimization.hierarchicalriskparity method)": [[118, "skfolio.optimization.HierarchicalRiskParity.score"]], "set_params() (skfolio.optimization.hierarchicalriskparity method)": [[118, "skfolio.optimization.HierarchicalRiskParity.set_params"]], "inversevolatility (class in skfolio.optimization)": [[119, "skfolio.optimization.InverseVolatility"]], "fit() (skfolio.optimization.inversevolatility method)": [[119, "skfolio.optimization.InverseVolatility.fit"]], "fit_predict() (skfolio.optimization.inversevolatility method)": [[119, "skfolio.optimization.InverseVolatility.fit_predict"]], "get_metadata_routing() (skfolio.optimization.inversevolatility method)": [[119, "skfolio.optimization.InverseVolatility.get_metadata_routing"]], "get_params() (skfolio.optimization.inversevolatility method)": [[119, "skfolio.optimization.InverseVolatility.get_params"]], "predict() (skfolio.optimization.inversevolatility method)": [[119, "skfolio.optimization.InverseVolatility.predict"]], "score() (skfolio.optimization.inversevolatility method)": [[119, "skfolio.optimization.InverseVolatility.score"]], "set_params() (skfolio.optimization.inversevolatility method)": [[119, "skfolio.optimization.InverseVolatility.set_params"]], "maximumdiversification (class in skfolio.optimization)": [[120, "skfolio.optimization.MaximumDiversification"]], "fit() (skfolio.optimization.maximumdiversification method)": [[120, "skfolio.optimization.MaximumDiversification.fit"]], "fit_predict() (skfolio.optimization.maximumdiversification method)": [[120, "skfolio.optimization.MaximumDiversification.fit_predict"]], "get_metadata_routing() (skfolio.optimization.maximumdiversification method)": [[120, "skfolio.optimization.MaximumDiversification.get_metadata_routing"]], "get_params() (skfolio.optimization.maximumdiversification method)": [[120, "skfolio.optimization.MaximumDiversification.get_params"]], "predict() (skfolio.optimization.maximumdiversification method)": [[120, "skfolio.optimization.MaximumDiversification.predict"]], "score() (skfolio.optimization.maximumdiversification method)": [[120, "skfolio.optimization.MaximumDiversification.score"]], "set_params() (skfolio.optimization.maximumdiversification method)": [[120, "skfolio.optimization.MaximumDiversification.set_params"]], "meanrisk (class in skfolio.optimization)": [[121, "skfolio.optimization.MeanRisk"]], "fit() (skfolio.optimization.meanrisk method)": [[121, "skfolio.optimization.MeanRisk.fit"]], "fit_predict() (skfolio.optimization.meanrisk method)": [[121, "skfolio.optimization.MeanRisk.fit_predict"]], "get_metadata_routing() (skfolio.optimization.meanrisk method)": [[121, "skfolio.optimization.MeanRisk.get_metadata_routing"]], "get_params() (skfolio.optimization.meanrisk method)": [[121, "skfolio.optimization.MeanRisk.get_params"]], "predict() (skfolio.optimization.meanrisk method)": [[121, "skfolio.optimization.MeanRisk.predict"]], "score() (skfolio.optimization.meanrisk method)": [[121, "skfolio.optimization.MeanRisk.score"]], "set_params() (skfolio.optimization.meanrisk method)": [[121, "skfolio.optimization.MeanRisk.set_params"]], "nestedclustersoptimization (class in skfolio.optimization)": [[122, "skfolio.optimization.NestedClustersOptimization"]], "fit() (skfolio.optimization.nestedclustersoptimization method)": [[122, "skfolio.optimization.NestedClustersOptimization.fit"]], "fit_predict() (skfolio.optimization.nestedclustersoptimization method)": [[122, "skfolio.optimization.NestedClustersOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.nestedclustersoptimization method)": [[122, "skfolio.optimization.NestedClustersOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.nestedclustersoptimization method)": [[122, "skfolio.optimization.NestedClustersOptimization.get_params"]], "predict() (skfolio.optimization.nestedclustersoptimization method)": [[122, "skfolio.optimization.NestedClustersOptimization.predict"]], "score() (skfolio.optimization.nestedclustersoptimization method)": [[122, "skfolio.optimization.NestedClustersOptimization.score"]], "set_params() (skfolio.optimization.nestedclustersoptimization method)": [[122, "skfolio.optimization.NestedClustersOptimization.set_params"]], "objectivefunction (class in skfolio.optimization)": [[123, "skfolio.optimization.ObjectiveFunction"]], "random (class in skfolio.optimization)": [[124, "skfolio.optimization.Random"]], "fit() (skfolio.optimization.random method)": [[124, "skfolio.optimization.Random.fit"]], "fit_predict() (skfolio.optimization.random method)": [[124, "skfolio.optimization.Random.fit_predict"]], "get_metadata_routing() (skfolio.optimization.random method)": [[124, "skfolio.optimization.Random.get_metadata_routing"]], "get_params() (skfolio.optimization.random method)": [[124, "skfolio.optimization.Random.get_params"]], "predict() (skfolio.optimization.random method)": [[124, "skfolio.optimization.Random.predict"]], "score() (skfolio.optimization.random method)": [[124, "skfolio.optimization.Random.score"]], "set_params() (skfolio.optimization.random method)": [[124, "skfolio.optimization.Random.set_params"]], "riskbudgeting (class in skfolio.optimization)": [[125, "skfolio.optimization.RiskBudgeting"]], "fit() (skfolio.optimization.riskbudgeting method)": [[125, "skfolio.optimization.RiskBudgeting.fit"]], "fit_predict() (skfolio.optimization.riskbudgeting method)": [[125, "skfolio.optimization.RiskBudgeting.fit_predict"]], "get_metadata_routing() (skfolio.optimization.riskbudgeting method)": [[125, "skfolio.optimization.RiskBudgeting.get_metadata_routing"]], "get_params() (skfolio.optimization.riskbudgeting method)": [[125, "skfolio.optimization.RiskBudgeting.get_params"]], "predict() (skfolio.optimization.riskbudgeting method)": [[125, "skfolio.optimization.RiskBudgeting.predict"]], "score() (skfolio.optimization.riskbudgeting method)": [[125, "skfolio.optimization.RiskBudgeting.score"]], "set_params() (skfolio.optimization.riskbudgeting method)": [[125, "skfolio.optimization.RiskBudgeting.set_params"]], "stackingoptimization (class in skfolio.optimization)": [[126, "skfolio.optimization.StackingOptimization"]], "fit() (skfolio.optimization.stackingoptimization method)": [[126, "skfolio.optimization.StackingOptimization.fit"]], "fit_predict() (skfolio.optimization.stackingoptimization method)": [[126, "skfolio.optimization.StackingOptimization.fit_predict"]], "get_metadata_routing() (skfolio.optimization.stackingoptimization method)": [[126, "skfolio.optimization.StackingOptimization.get_metadata_routing"]], "get_params() (skfolio.optimization.stackingoptimization method)": [[126, "skfolio.optimization.StackingOptimization.get_params"]], "named_estimators (skfolio.optimization.stackingoptimization property)": [[126, "skfolio.optimization.StackingOptimization.named_estimators"]], "predict() (skfolio.optimization.stackingoptimization method)": [[126, "skfolio.optimization.StackingOptimization.predict"]], "score() (skfolio.optimization.stackingoptimization method)": [[126, "skfolio.optimization.StackingOptimization.score"]], "set_params() (skfolio.optimization.stackingoptimization method)": [[126, "skfolio.optimization.StackingOptimization.set_params"]], "population (class in skfolio.population)": [[127, "skfolio.population.Population"]], "append() (skfolio.population.population method)": [[127, "skfolio.population.Population.append"]], "clear() (skfolio.population.population method)": [[127, "skfolio.population.Population.clear"]], "composition() (skfolio.population.population method)": [[127, "skfolio.population.Population.composition"]], "copy() (skfolio.population.population method)": [[127, "skfolio.population.Population.copy"]], "count() (skfolio.population.population method)": [[127, "skfolio.population.Population.count"]], "extend() (skfolio.population.population method)": [[127, "skfolio.population.Population.extend"]], "filter() (skfolio.population.population method)": [[127, "skfolio.population.Population.filter"]], "index() (skfolio.population.population method)": [[127, "skfolio.population.Population.index"]], "insert() (skfolio.population.population method)": [[127, "skfolio.population.Population.insert"]], "max_measure() (skfolio.population.population method)": [[127, "skfolio.population.Population.max_measure"]], "measures() (skfolio.population.population method)": [[127, "skfolio.population.Population.measures"]], "measures_mean() (skfolio.population.population method)": [[127, "skfolio.population.Population.measures_mean"]], "measures_std() (skfolio.population.population method)": [[127, "skfolio.population.Population.measures_std"]], "min_measure() (skfolio.population.population method)": [[127, "skfolio.population.Population.min_measure"]], "non_denominated_sort() (skfolio.population.population method)": [[127, "skfolio.population.Population.non_denominated_sort"]], "plot_composition() (skfolio.population.population method)": [[127, "skfolio.population.Population.plot_composition"]], "plot_cumulative_returns() (skfolio.population.population method)": [[127, "skfolio.population.Population.plot_cumulative_returns"]], "plot_distribution() (skfolio.population.population method)": [[127, "skfolio.population.Population.plot_distribution"]], "plot_measures() (skfolio.population.population method)": [[127, "skfolio.population.Population.plot_measures"]], "pop() (skfolio.population.population method)": [[127, "skfolio.population.Population.pop"]], "quantile() (skfolio.population.population method)": [[127, "skfolio.population.Population.quantile"]], "remove() (skfolio.population.population method)": [[127, "skfolio.population.Population.remove"]], "reverse() (skfolio.population.population method)": [[127, "skfolio.population.Population.reverse"]], "set_portfolio_params() (skfolio.population.population method)": [[127, "skfolio.population.Population.set_portfolio_params"]], "sort() (skfolio.population.population method)": [[127, "skfolio.population.Population.sort"]], "sort_measure() (skfolio.population.population method)": [[127, "skfolio.population.Population.sort_measure"]], "summary() (skfolio.population.population method)": [[127, "skfolio.population.Population.summary"]], "baseportfolio (class in skfolio.portfolio)": [[128, "skfolio.portfolio.BasePortfolio"]], "annualized_factor (skfolio.portfolio.baseportfolio property)": [[128, "skfolio.portfolio.BasePortfolio.annualized_factor"]], "clear() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.clear"]], "composition (skfolio.portfolio.baseportfolio property)": [[128, "skfolio.portfolio.BasePortfolio.composition"]], "copy() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.copy"]], "cumulative_returns (skfolio.portfolio.baseportfolio attribute)": [[128, "skfolio.portfolio.BasePortfolio.cumulative_returns"]], "cumulative_returns_df (skfolio.portfolio.baseportfolio property)": [[128, "skfolio.portfolio.BasePortfolio.cumulative_returns_df"]], "dominates() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.dominates"]], "drawdowns (skfolio.portfolio.baseportfolio attribute)": [[128, "skfolio.portfolio.BasePortfolio.drawdowns"]], "fitness (skfolio.portfolio.baseportfolio attribute)": [[128, "skfolio.portfolio.BasePortfolio.fitness"]], "fitness_measures (skfolio.portfolio.baseportfolio property)": [[128, "skfolio.portfolio.BasePortfolio.fitness_measures"]], "get_measure() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.get_measure"]], "measures_df (skfolio.portfolio.baseportfolio property)": [[128, "skfolio.portfolio.BasePortfolio.measures_df"]], "n_observations (skfolio.portfolio.baseportfolio property)": [[128, "skfolio.portfolio.BasePortfolio.n_observations"]], "plot_composition() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.plot_composition"]], "plot_cumulative_returns() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.plot_cumulative_returns"]], "plot_returns() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.plot_returns"]], "plot_rolling_measure() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.plot_rolling_measure"]], "returns_df (skfolio.portfolio.baseportfolio property)": [[128, "skfolio.portfolio.BasePortfolio.returns_df"]], "rolling_measure() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.rolling_measure"]], "summary() (skfolio.portfolio.baseportfolio method)": [[128, "skfolio.portfolio.BasePortfolio.summary"]], "multiperiodportfolio (class in skfolio.portfolio)": [[129, "skfolio.portfolio.MultiPeriodPortfolio"]], "annualized_factor (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.annualized_factor"]], "append() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.append"]], "assets (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.assets"]], "clear() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.clear"]], "composition (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.composition"]], "copy() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.copy"]], "cumulative_returns (skfolio.portfolio.multiperiodportfolio attribute)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.cumulative_returns"]], "cumulative_returns_df (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.cumulative_returns_df"]], "dominates() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.dominates"]], "drawdowns (skfolio.portfolio.multiperiodportfolio attribute)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.drawdowns"]], "fitness (skfolio.portfolio.multiperiodportfolio attribute)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.fitness"]], "fitness_measures (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.fitness_measures"]], "get_measure() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.get_measure"]], "measures_df (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.measures_df"]], "n_observations (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.n_observations"]], "plot_composition() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.plot_composition"]], "plot_cumulative_returns() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.plot_cumulative_returns"]], "plot_returns() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.plot_returns"]], "plot_rolling_measure() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.plot_rolling_measure"]], "portfolios (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.portfolios"]], "returns_df (skfolio.portfolio.multiperiodportfolio property)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.returns_df"]], "rolling_measure() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.rolling_measure"]], "summary() (skfolio.portfolio.multiperiodportfolio method)": [[129, "skfolio.portfolio.MultiPeriodPortfolio.summary"]], "portfolio (class in skfolio.portfolio)": [[130, "skfolio.portfolio.Portfolio"]], "annualized_factor (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.annualized_factor"]], "clear() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.clear"]], "composition (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.composition"]], "contribution() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.contribution"]], "copy() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.copy"]], "cumulative_returns (skfolio.portfolio.portfolio attribute)": [[130, "skfolio.portfolio.Portfolio.cumulative_returns"]], "cumulative_returns_df (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.cumulative_returns_df"]], "diversification (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.diversification"]], "dominates() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.dominates"]], "drawdowns (skfolio.portfolio.portfolio attribute)": [[130, "skfolio.portfolio.Portfolio.drawdowns"]], "expected_returns_from_assets() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.expected_returns_from_assets"]], "fitness (skfolio.portfolio.portfolio attribute)": [[130, "skfolio.portfolio.Portfolio.fitness"]], "fitness_measures (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.fitness_measures"]], "get_measure() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.get_measure"]], "get_weight() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.get_weight"]], "measures_df (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.measures_df"]], "n_observations (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.n_observations"]], "nonzero_assets (skfolio.portfolio.portfolio attribute)": [[130, "skfolio.portfolio.Portfolio.nonzero_assets"]], "nonzero_assets_index (skfolio.portfolio.portfolio attribute)": [[130, "skfolio.portfolio.Portfolio.nonzero_assets_index"]], "plot_composition() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.plot_composition"]], "plot_contribution() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.plot_contribution"]], "plot_cumulative_returns() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.plot_cumulative_returns"]], "plot_returns() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.plot_returns"]], "plot_rolling_measure() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.plot_rolling_measure"]], "returns_df (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.returns_df"]], "rolling_measure() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.rolling_measure"]], "sric (skfolio.portfolio.portfolio property)": [[130, "skfolio.portfolio.Portfolio.sric"]], "summary() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.summary"]], "variance_from_assets() (skfolio.portfolio.portfolio method)": [[130, "skfolio.portfolio.Portfolio.variance_from_assets"]], "dropcorrelated (class in skfolio.pre_selection)": [[131, "skfolio.pre_selection.DropCorrelated"]], "fit() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.fit"]], "fit_transform() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.fit_transform"]], "get_feature_names_out() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.get_feature_names_out"]], "get_metadata_routing() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.get_metadata_routing"]], "get_params() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.get_params"]], "get_support() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.get_support"]], "inverse_transform() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.inverse_transform"]], "set_output() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.set_output"]], "set_params() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.set_params"]], "transform() (skfolio.pre_selection.dropcorrelated method)": [[131, "skfolio.pre_selection.DropCorrelated.transform"]], "selectkextremes (class in skfolio.pre_selection)": [[132, "skfolio.pre_selection.SelectKExtremes"]], "fit() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.fit"]], "fit_transform() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.fit_transform"]], "get_feature_names_out() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.get_feature_names_out"]], "get_metadata_routing() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.get_metadata_routing"]], "get_params() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.get_params"]], "get_support() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.get_support"]], "inverse_transform() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.inverse_transform"]], "set_output() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.set_output"]], "set_params() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.set_params"]], "transform() (skfolio.pre_selection.selectkextremes method)": [[132, "skfolio.pre_selection.SelectKExtremes.transform"]], "selectnondominated (class in skfolio.pre_selection)": [[133, "skfolio.pre_selection.SelectNonDominated"]], "fit() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.fit"]], "fit_transform() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.fit_transform"]], "get_feature_names_out() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.get_feature_names_out"]], "get_metadata_routing() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.get_metadata_routing"]], "get_params() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.get_params"]], "get_support() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.get_support"]], "inverse_transform() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.inverse_transform"]], "set_output() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.set_output"]], "set_params() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.set_params"]], "transform() (skfolio.pre_selection.selectnondominated method)": [[133, "skfolio.pre_selection.SelectNonDominated.transform"]], "prices_to_returns() (in module skfolio.preprocessing)": [[134, "skfolio.preprocessing.prices_to_returns"]], "baseloadingmatrix (class in skfolio.prior)": [[135, "skfolio.prior.BaseLoadingMatrix"]], "get_metadata_routing() (skfolio.prior.baseloadingmatrix method)": [[135, "skfolio.prior.BaseLoadingMatrix.get_metadata_routing"]], "get_params() (skfolio.prior.baseloadingmatrix method)": [[135, "skfolio.prior.BaseLoadingMatrix.get_params"]], "set_params() (skfolio.prior.baseloadingmatrix method)": [[135, "skfolio.prior.BaseLoadingMatrix.set_params"]], "baseprior (class in skfolio.prior)": [[136, "skfolio.prior.BasePrior"]], "get_metadata_routing() (skfolio.prior.baseprior method)": [[136, "skfolio.prior.BasePrior.get_metadata_routing"]], "get_params() (skfolio.prior.baseprior method)": [[136, "skfolio.prior.BasePrior.get_params"]], "set_params() (skfolio.prior.baseprior method)": [[136, "skfolio.prior.BasePrior.set_params"]], "blacklitterman (class in skfolio.prior)": [[137, "skfolio.prior.BlackLitterman"]], "fit() (skfolio.prior.blacklitterman method)": [[137, "skfolio.prior.BlackLitterman.fit"]], "get_metadata_routing() (skfolio.prior.blacklitterman method)": [[137, "skfolio.prior.BlackLitterman.get_metadata_routing"]], "get_params() (skfolio.prior.blacklitterman method)": [[137, "skfolio.prior.BlackLitterman.get_params"]], "set_params() (skfolio.prior.blacklitterman method)": [[137, "skfolio.prior.BlackLitterman.set_params"]], "empiricalprior (class in skfolio.prior)": [[138, "skfolio.prior.EmpiricalPrior"]], "fit() (skfolio.prior.empiricalprior method)": [[138, "skfolio.prior.EmpiricalPrior.fit"]], "get_metadata_routing() (skfolio.prior.empiricalprior method)": [[138, "skfolio.prior.EmpiricalPrior.get_metadata_routing"]], "get_params() (skfolio.prior.empiricalprior method)": [[138, "skfolio.prior.EmpiricalPrior.get_params"]], "set_params() (skfolio.prior.empiricalprior method)": [[138, "skfolio.prior.EmpiricalPrior.set_params"]], "factormodel (class in skfolio.prior)": [[139, "skfolio.prior.FactorModel"]], "fit() (skfolio.prior.factormodel method)": [[139, "skfolio.prior.FactorModel.fit"]], "get_metadata_routing() (skfolio.prior.factormodel method)": [[139, "skfolio.prior.FactorModel.get_metadata_routing"]], "get_params() (skfolio.prior.factormodel method)": [[139, "skfolio.prior.FactorModel.get_params"]], "set_params() (skfolio.prior.factormodel method)": [[139, "skfolio.prior.FactorModel.set_params"]], "loadingmatrixregression (class in skfolio.prior)": [[140, "skfolio.prior.LoadingMatrixRegression"]], "fit() (skfolio.prior.loadingmatrixregression method)": [[140, "skfolio.prior.LoadingMatrixRegression.fit"]], "get_metadata_routing() (skfolio.prior.loadingmatrixregression method)": [[140, "skfolio.prior.LoadingMatrixRegression.get_metadata_routing"]], "get_params() (skfolio.prior.loadingmatrixregression method)": [[140, "skfolio.prior.LoadingMatrixRegression.get_params"]], "set_params() (skfolio.prior.loadingmatrixregression method)": [[140, "skfolio.prior.LoadingMatrixRegression.set_params"]], "priormodel (class in skfolio.prior)": [[141, "skfolio.prior.PriorModel"]], "basecovarianceuncertaintyset (class in skfolio.uncertainty_set)": [[142, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet"]], "get_metadata_routing() (skfolio.uncertainty_set.basecovarianceuncertaintyset method)": [[142, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.basecovarianceuncertaintyset method)": [[142, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.basecovarianceuncertaintyset method)": [[142, "skfolio.uncertainty_set.BaseCovarianceUncertaintySet.set_params"]], "basemuuncertaintyset (class in skfolio.uncertainty_set)": [[143, "skfolio.uncertainty_set.BaseMuUncertaintySet"]], "get_metadata_routing() (skfolio.uncertainty_set.basemuuncertaintyset method)": [[143, "skfolio.uncertainty_set.BaseMuUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.basemuuncertaintyset method)": [[143, "skfolio.uncertainty_set.BaseMuUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.basemuuncertaintyset method)": [[143, "skfolio.uncertainty_set.BaseMuUncertaintySet.set_params"]], "bootstrapcovarianceuncertaintyset (class in skfolio.uncertainty_set)": [[144, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet"]], "fit() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[144, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[144, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[144, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.bootstrapcovarianceuncertaintyset method)": [[144, "skfolio.uncertainty_set.BootstrapCovarianceUncertaintySet.set_params"]], "bootstrapmuuncertaintyset (class in skfolio.uncertainty_set)": [[145, "skfolio.uncertainty_set.BootstrapMuUncertaintySet"]], "fit() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.bootstrapmuuncertaintyset method)": [[145, "skfolio.uncertainty_set.BootstrapMuUncertaintySet.set_params"]], "empiricalcovarianceuncertaintyset (class in skfolio.uncertainty_set)": [[146, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet"]], "fit() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[146, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[146, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[146, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.empiricalcovarianceuncertaintyset method)": [[146, "skfolio.uncertainty_set.EmpiricalCovarianceUncertaintySet.set_params"]], "empiricalmuuncertaintyset (class in skfolio.uncertainty_set)": [[147, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet"]], "fit() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.fit"]], "get_metadata_routing() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.get_metadata_routing"]], "get_params() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.get_params"]], "set_params() (skfolio.uncertainty_set.empiricalmuuncertaintyset method)": [[147, "skfolio.uncertainty_set.EmpiricalMuUncertaintySet.set_params"]], "uncertaintyset (class in skfolio.uncertainty_set)": [[148, "skfolio.uncertainty_set.UncertaintySet"]], "nbinsmethod() (in module skfolio.utils.stats)": [[149, "skfolio.utils.stats.NBinsMethod"]], "assert_is_distance() (in module skfolio.utils.stats)": [[150, "skfolio.utils.stats.assert_is_distance"]], "assert_is_square() (in module skfolio.utils.stats)": [[151, "skfolio.utils.stats.assert_is_square"]], "assert_is_symmetric() (in module skfolio.utils.stats)": [[152, "skfolio.utils.stats.assert_is_symmetric"]], "commutation_matrix() (in module skfolio.utils.stats)": [[153, "skfolio.utils.stats.commutation_matrix"]], "compute_optimal_n_clusters() (in module skfolio.utils.stats)": [[154, "skfolio.utils.stats.compute_optimal_n_clusters"]], "corr_to_cov() (in module skfolio.utils.stats)": [[155, "skfolio.utils.stats.corr_to_cov"]], "cov_nearest() (in module skfolio.utils.stats)": [[156, "skfolio.utils.stats.cov_nearest"]], "cov_to_corr() (in module skfolio.utils.stats)": [[157, "skfolio.utils.stats.cov_to_corr"]], "is_cholesky_dec() (in module skfolio.utils.stats)": [[158, "skfolio.utils.stats.is_cholesky_dec"]], "n_bins_freedman() (in module skfolio.utils.stats)": [[159, "skfolio.utils.stats.n_bins_freedman"]], "n_bins_knuth() (in module skfolio.utils.stats)": [[160, "skfolio.utils.stats.n_bins_knuth"]], "rand_weights() (in module skfolio.utils.stats)": [[161, "skfolio.utils.stats.rand_weights"]], "rand_weights_dirichlet() (in module skfolio.utils.stats)": [[162, "skfolio.utils.stats.rand_weights_dirichlet"]]}})